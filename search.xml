<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[如何使用RedisTemplate访问Redis数据结构]]></title>
      <url>/2018/01/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8RedisTemplate%E8%AE%BF%E9%97%AERedis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h2 id="Redis-数据结构简介"><a href="#Redis-数据结构简介" class="headerlink" title="Redis 数据结构简介"></a>Redis 数据结构简介</h2><p>Redis 可以存储键与5种不同数据结构类型之间的映射，这5种数据结构类型分别为String（字符串）、List（列表）、Set（集合）、Hash（散列）和 Zset（有序集合）</p>
<p>下面来对这5种数据结构类型作简单的介绍：</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>结构类型</th>
<th style="text-align:center">结构存储的值</th>
<th style="text-align:right">结构的读写能力</th>
</tr>
</thead>
<tbody>
<tr>
<td>String</td>
<td style="text-align:center">可以是字符串、整数或者浮点数</td>
<td style="text-align:right">对整个字符串或者字符串的其中一部分执行操作；对象和浮点数执行自增(increment)或者自减(decrement)</td>
</tr>
<tr>
<td>List</td>
<td style="text-align:center">一个链表，链表上的每个节点都包含了一个字符串</td>
<td style="text-align:right">从链表的两端推入或者弹出元素；根据偏移量对链表进行修剪(trim)；读取单个或者多个元素；根据值来查找或者移除元素</td>
</tr>
<tr>
<td>Set</td>
<td style="text-align:center">包含字符串的无序收集器(unorderedcollection)，并且被包含的每个字符串都是独一无二的、各不相同</td>
<td style="text-align:right">添加、获取、移除单个元素；检查一个元素是否存在于某个集合中；计算交集、并集、差集；从集合里卖弄随机获取元素</td>
</tr>
<tr>
<td>Hash</td>
<td style="text-align:center">包含键值对的无序散列表</td>
<td style="text-align:right">添加、获取、移除单个键值对；获取所有键值对</td>
</tr>
<tr>
<td>Zset</td>
<td style="text-align:center">字符串成员(member)与浮点数分值(score)之间的有序映射，元素的排列顺序由分值的大小决定</td>
<td style="text-align:right">添加、获取、删除单个元素；根据分值范围(range)或者成员来获取元素</td>
</tr>
</tbody>
</table>
<p>Redis 5种数据结构的概念大致介绍到这边，下面将结合Spring封装的RedisTemplate来对这5种数据结构的运用进行演示</p>
<h2 id="RedisTemplate介绍"><a href="#RedisTemplate介绍" class="headerlink" title="RedisTemplate介绍"></a>RedisTemplate介绍</h2><p>spring 封装了 <code>RedisTemplate</code> 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api</p>
<h3 id="RedisTemplate在spring代码中的结构如下："><a href="#RedisTemplate在spring代码中的结构如下：" class="headerlink" title="RedisTemplate在spring代码中的结构如下："></a>RedisTemplate在spring代码中的结构如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.data.redis.core</span><br><span class="line">Class RedisTemplate&lt;K,V&gt;</span><br><span class="line">java.lang.Object</span><br><span class="line">    org.springframework.data.redis.core.RedisAccessor</span><br><span class="line">        org.springframework.data.redis.core.RedisTemplate&lt;K,V&gt;</span><br></pre></td></tr></table></figure>
<p><strong>Type Parameters:</strong></p>
<blockquote>
<p><strong>K:</strong>模板中的Redis key的类型（通常为String）如：RedisTemplate<string, object=""><br>注意：如果没特殊情况，切勿定义成RedisTemplate<object, object="">，否则根据里氏替换原则，使用的时候会造成类型错误 。</object,></string,></p>
<p><strong>V:</strong> 模板中的Redis value的类型</p>
</blockquote>
<h3 id="RedisTemplate中定义了对5种数据结构操作"><a href="#RedisTemplate中定义了对5种数据结构操作" class="headerlink" title="RedisTemplate中定义了对5种数据结构操作"></a>RedisTemplate中定义了对5种数据结构操作</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue<span class="comment">()</span>;<span class="comment">//操作字符串</span></span><br><span class="line">redisTemplate.opsForHash<span class="comment">()</span>;<span class="comment">//操作hash</span></span><br><span class="line">redisTemplate.opsForList<span class="comment">()</span>;<span class="comment">//操作list</span></span><br><span class="line">redisTemplate.opsForSet<span class="comment">()</span>;<span class="comment">//操作set</span></span><br><span class="line">redisTemplate.opsForZSet<span class="comment">()</span>;<span class="comment">//操作有序set</span></span><br></pre></td></tr></table></figure>
<h2 id="StringRedisTemplate与RedisTemplate"><a href="#StringRedisTemplate与RedisTemplate" class="headerlink" title="StringRedisTemplate与RedisTemplate"></a>StringRedisTemplate与RedisTemplate</h2><ul>
<li>两者的关系是StringRedisTemplate继承RedisTemplate。</li>
</ul>
<ul>
<li><p>两者的数据是不共通的；也就是说StringRedisTemplate只能管理StringRedisTemplate里面的数据，RedisTemplate只能管理RedisTemplate中的数据</p>
</li>
<li><p>SDR默认采用的序列化策略有两种，一种是String的序列化策略，一种是JDK的序列化策略。</p>
<p>  StringRedisTemplate默认采用的是String的序列化策略，保存的key和value都是采用此策略序列化保存的。</p>
<p>  RedisTemplate默认采用的是JDK的序列化策略，保存的key和value都是采用此策略序列化保存的。</p>
</li>
</ul>
<h3 id="RedisTemplate配置如下："><a href="#RedisTemplate配置如下：" class="headerlink" title="RedisTemplate配置如下："></a>RedisTemplate配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        template.setKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Redis的String数据结构-（推荐使用StringRedisTemplate）"><a href="#Redis的String数据结构-（推荐使用StringRedisTemplate）" class="headerlink" title="Redis的String数据结构 （推荐使用StringRedisTemplate）"></a>Redis的String数据结构 （推荐使用StringRedisTemplate）</h2><p><strong>注意：如果使用RedisTemplate需要更改序列化方式</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RedisSerializer&lt;String&gt; stringSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        template.setKeySerializer(stringSerializer );</span><br><span class="line">        template.setValueSerializer(stringSerializer );</span><br><span class="line">        template.setHashKeySerializer(stringSerializer );</span><br><span class="line">        template.setHashValueSerializer(stringSerializer );</span><br></pre></td></tr></table></figure>
<h4 id="ValueOperations可以对String数据结构进行操作"><a href="#ValueOperations可以对String数据结构进行操作" class="headerlink" title="ValueOperations可以对String数据结构进行操作"></a><strong>ValueOperations可以对String数据结构进行操作</strong></h4><ul>
<li><p><strong>set void set(K key, V value);</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：redisTemplate.opsForValue().set(<span class="string">"name"</span>,<span class="string">"tom"</span>);</span><br><span class="line">结果：redisTemplate.opsForValue().get(<span class="string">"name"</span>)  输出结果为tom</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>set void set(K key, V value, long timeout, TimeUnit unit);</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：redisTemplate.opsForValue().set(<span class="string">"name"</span>,<span class="string">"tom"</span>,<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">结果：redisTemplate.opsForValue().get(<span class="string">"name"</span>)由于设置的是<span class="number">10</span>秒失效，十秒之内查询有结果，十秒之后返回为<span class="keyword">null</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>set void set(K key, V value, long offset);</strong></p>
<p>该方法是用 value 参数覆写(overwrite)给定 key 所储存的字符串值，从偏移量 offset 开始</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set(<span class="string">"key"</span>,<span class="string">"hello world"</span>);</span><br><span class="line">       template.opsForValue().set(<span class="string">"key"</span>,<span class="string">"redis"</span>, <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"***************"</span>+template.opsForValue().get(<span class="string">"key"</span>));</span><br><span class="line">结果：***************hello redis</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>setIfAbsent Boolean setIfAbsent(K key, V value);</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用:   System.out.println(template.opsForValue().setIfAbsent(<span class="string">"multi1"</span>,<span class="string">"multi1"</span>));<span class="comment">// false  multi1之前已经存在</span></span><br><span class="line">         System.out.println(template.opsForValue().setIfAbsent(<span class="string">"multi111"</span>,<span class="string">"multi111"</span>)); <span class="comment">//true  multi111之前不存在</span></span><br><span class="line">结果：<span class="keyword">false</span></span><br><span class="line">       <span class="keyword">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>multiSet void multiSet(Map&lt;? extends K, ? extends V&gt; m);</strong></p>
<p>为多个键分别设置它们的值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用：Map&lt;String,String&gt; maps = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">      maps.put(<span class="string">"multi1"</span>,<span class="string">"multi1"</span>);</span><br><span class="line">      maps.put(<span class="string">"multi2"</span>,<span class="string">"multi2"</span>);</span><br><span class="line">      maps.put(<span class="string">"multi3"</span>,<span class="string">"multi3"</span>);</span><br><span class="line">      template.opsForValue().multiSet(maps);</span><br><span class="line">      List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">      keys.add(<span class="string">"multi1"</span>);</span><br><span class="line">      keys.add(<span class="string">"multi2"</span>);</span><br><span class="line">      keys.add(<span class="string">"multi3"</span>);</span><br><span class="line">      System.out.println(template.opsForValue().multiGet(keys));</span><br><span class="line"> 结果：[multi1, multi2, multi3]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>multiSetIfAbsent Boolean multiSetIfAbsent(Map&lt;? extends K, ? extends V&gt; m);</strong></p>
<p>为多个键分别设置它们的值，如果存在则返回false，不存在返回true</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">使用：Map&lt;String,String&gt; maps = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">      maps.put(<span class="string">"multi11"</span>,<span class="string">"multi11"</span>);</span><br><span class="line">      maps.put(<span class="string">"multi22"</span>,<span class="string">"multi22"</span>);</span><br><span class="line">      maps.put(<span class="string">"multi33"</span>,<span class="string">"multi33"</span>);</span><br><span class="line">      Map&lt;String,String&gt; maps2 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">      maps2.put(<span class="string">"multi1"</span>,<span class="string">"multi1"</span>);</span><br><span class="line">      maps2.put(<span class="string">"multi2"</span>,<span class="string">"multi2"</span>);</span><br><span class="line">      maps2.put(<span class="string">"multi3"</span>,<span class="string">"multi3"</span>);</span><br><span class="line">      System.out.println(template.opsForValue().multiSetIfAbsent(maps));</span><br><span class="line">      System.out.println(template.opsForValue().multiSetIfAbsent(maps2));</span><br><span class="line">结果：<span class="keyword">true</span></span><br><span class="line">       <span class="keyword">false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>get V get(Object key);</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set(<span class="string">"key"</span>,<span class="string">"hello world"</span>);</span><br><span class="line">       System.out.println(<span class="string">"***************"</span>+template.opsForValue().get(<span class="string">"key"</span>));</span><br><span class="line">结果：***************hello world</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>getAndSet V getAndSet(K key, V value);</strong></p>
<p>设置键的字符串值并返回其旧值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set(<span class="string">"getSetTest"</span>,<span class="string">"test"</span>);</span><br><span class="line">       System.out.println(template.opsForValue().getAndSet(<span class="string">"getSetTest"</span>,<span class="string">"test2"</span>));</span><br><span class="line">结果：test</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>multiGet List<v> multiGet(Collection<k> keys);</k></v></strong></p>
<p>为多个键分别取出它们的值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用：Map&lt;String,String&gt; maps = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">      maps.put(<span class="string">"multi1"</span>,<span class="string">"multi1"</span>);</span><br><span class="line">      maps.put(<span class="string">"multi2"</span>,<span class="string">"multi2"</span>);</span><br><span class="line">      maps.put(<span class="string">"multi3"</span>,<span class="string">"multi3"</span>);</span><br><span class="line">      template.opsForValue().multiSet(maps);</span><br><span class="line">      List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">      keys.add(<span class="string">"multi1"</span>);</span><br><span class="line">      keys.add(<span class="string">"multi2"</span>);</span><br><span class="line">      keys.add(<span class="string">"multi3"</span>);</span><br><span class="line">      System.out.println(template.opsForValue().multiGet(keys));</span><br><span class="line">结果：[multi1, multi2, multi3]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>increment Long increment(K key, long delta);</strong></p>
<p>支持整数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().increment(<span class="string">"increlong"</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"***************"</span>+template.opsForValue().get(<span class="string">"increlong"</span>));</span><br><span class="line">结果：***************<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>increment Double increment(K key, double delta);</strong></p>
<p>支持浮点数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().increment(<span class="string">"increlong"</span>,<span class="number">1.2</span>);</span><br><span class="line">        System.out.println(<span class="string">"***************"</span>+template.opsForValue().get(<span class="string">"increlong"</span>));</span><br><span class="line">结果：***************<span class="number">2.2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>append Integer append(K key, String value);</strong></p>
<p>如果key已经存在并且是一个字符串，则该命令将该值追加到字符串的末尾。如果键不存在，则它被创建并设置为空字符串，因此APPEND在这种特殊情况下将类似于SET。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().append(<span class="string">"appendTest"</span>,<span class="string">"Hello"</span>);</span><br><span class="line">       System.out.println(template.opsForValue().get(<span class="string">"appendTest"</span>));</span><br><span class="line">       template.opsForValue().append(<span class="string">"appendTest"</span>,<span class="string">"world"</span>);</span><br><span class="line">       System.out.println(template.opsForValue().get(<span class="string">"appendTest"</span>));</span><br><span class="line">结果：Hello</span><br><span class="line">        Helloworld</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>get String get(K key, long start, long end);</strong></p>
<p>截取key所对应的value字符串</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：appendTest对应的value为Helloworld</span><br><span class="line">        System.out.println(<span class="string">"*********"</span>+template.opsForValue().get(<span class="string">"appendTest"</span>,<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">结果：*********Hellow</span><br><span class="line">使用：System.out.println(<span class="string">"*********"</span>+template.opsForValue().get(<span class="string">"appendTest"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果：*********Helloworld</span><br><span class="line">使用： System.out.println(<span class="string">"*********"</span>+template.opsForValue().get(<span class="string">"appendTest"</span>,-<span class="number">3</span>,-<span class="number">1</span>));</span><br><span class="line">结果：*********rld</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>size Long size(K key);</strong></p>
<p>返回key所对应的value值得长度</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set(<span class="string">"key"</span>,<span class="string">"hello world"</span>);</span><br><span class="line">        System.out.println(<span class="string">"***************"</span>+template.opsForValue().size(<span class="string">"key"</span>));</span><br><span class="line">结果：***************<span class="number">11</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>setBit Boolean setBit(K key, long offset, boolean value);</strong></p>
<p>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)<br>key键对应的值value对应的ascii码,在offset的位置(从左向右数)变为value</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set(<span class="string">"bitTest"</span>,<span class="string">"a"</span>);</span><br><span class="line">      <span class="comment">// 'a' 的ASCII码是 97。转换为二进制是：01100001</span></span><br><span class="line">      <span class="comment">// 'b' 的ASCII码是 98  转换为二进制是：01100010</span></span><br><span class="line">      <span class="comment">// 'c' 的ASCII码是 99  转换为二进制是：01100011</span></span><br><span class="line">      <span class="comment">//因为二进制只有0和1，在setbit中true为1，false为0，因此我 要变为'b'的话第六位设置为1，第七位设置为0</span></span><br><span class="line">      template.opsForValue().setBit(<span class="string">"bitTest"</span>,<span class="number">6</span>, <span class="keyword">true</span>);</span><br><span class="line">      template.opsForValue().setBit(<span class="string">"bitTest"</span>,<span class="number">7</span>, <span class="keyword">false</span>);</span><br><span class="line">       System.out.println(template.opsForValue().get(<span class="string">"bitTest"</span>));</span><br><span class="line"> 结果：b</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>getBit Boolean getBit(K key, long offset);</strong></p>
<p>获取键对应值的ascii码的在offset处位值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForValue().getBit(<span class="string">"bitTest"</span>,<span class="number">7</span>));</span><br><span class="line">结果：<span class="keyword">false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Redis的List数据结构"><a href="#Redis的List数据结构" class="headerlink" title="Redis的List数据结构"></a>Redis的List数据结构</h2><p><strong>这边我们把RedisTemplate序列化方式改回之前的</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</span><br><span class="line">       ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">       om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">       jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">       RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">       template.setKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">       template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">       template.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">       template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br></pre></td></tr></table></figure>
<p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）</p>
<p><strong>ListOperations专门操作list列表:</strong></p>
<ul>
<li><p><strong>List<v> range(K key, long start, long end);</v></strong></p>
<p>返回存储在键中的列表的指定元素。偏移开始和停止是基于零的索引，其中0是列表的第一个元素（列表的头部），1是下一个元素</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range(<span class="string">"list"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果:[c#, c++, python, java, c#, c#]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>void trim(K key, long start, long end);</strong></p>
<p>修剪现有列表，使其只包含指定的指定范围的元素，起始和停止都是基于0的索引</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range(<span class="string">"list"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">        template.opsForList().trim(<span class="string">"list"</span>,<span class="number">1</span>,-<span class="number">1</span>);<span class="comment">//裁剪第一个元素</span></span><br><span class="line">        System.out.println(template.opsForList().range(<span class="string">"list"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果:[c#, c++, python, java, c#, c#]</span><br><span class="line">       [c++, python, java, c#, c#]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Long size(K key);</strong></p>
<p>返回存储在键中的列表的长度。如果键不存在，则将其解释为空列表，并返回0。当key存储的值不是列表时返回错误。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().size(<span class="string">"list"</span>));</span><br><span class="line">结果:<span class="number">6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Long leftPush(K key, V value);</strong></p>
<p>将所有指定的值插入存储在键的列表的头部。如果键不存在，则在执行推送操作之前将其创建为空列表。（从左边插入）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForList().leftPush(<span class="string">"list"</span>,<span class="string">"java"</span>);</span><br><span class="line">       template.opsForList().leftPush(<span class="string">"list"</span>,<span class="string">"python"</span>);</span><br><span class="line">       template.opsForList().leftPush(<span class="string">"list"</span>,<span class="string">"c++"</span>);</span><br><span class="line">结果:返回的结果为推送操作后的列表的长度</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Long leftPushAll(K key, V… values);</strong></p>
<p>批量把一个数组插入到列表中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：String[] stringarrays = <span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>&#125;;</span><br><span class="line">       template.opsForList().leftPushAll(<span class="string">"listarray"</span>,stringarrays);</span><br><span class="line">       System.out.println(template.opsForList().range(<span class="string">"listarray"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果:[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Long leftPushAll(K key, Collection<v> values);</v></strong></p>
<p>批量把一个集合插入到列表中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：List&lt;Object&gt; strings = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">      strings.add(<span class="string">"1"</span>);</span><br><span class="line">      strings.add(<span class="string">"2"</span>);</span><br><span class="line">      strings.add(<span class="string">"3"</span>);</span><br><span class="line">      template.opsForList().leftPushAll(<span class="string">"listcollection4"</span>, strings);</span><br><span class="line">      System.out.println(template.opsForList().range(<span class="string">"listcollection4"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果:[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Long leftPushIfPresent(K key, V value);</strong></p>
<p>只有存在key对应的列表才能将这个value值插入到key所对应的列表中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 使用： System.out.println(template.opsForList().leftPushIfPresent(<span class="string">"leftPushIfPresent"</span>,<span class="string">"aa"</span>));</span><br><span class="line">        System.out.println(template.opsForList().leftPushIfPresent(<span class="string">"leftPushIfPresent"</span>,<span class="string">"bb"</span>));</span><br><span class="line">==========分割线===========</span><br><span class="line">System.out.println(template.opsForList().leftPush(<span class="string">"leftPushIfPresent"</span>,<span class="string">"aa"</span>));</span><br><span class="line">        System.out.println(template.opsForList().leftPushIfPresent(<span class="string">"leftPushIfPresent"</span>,<span class="string">"bb"</span>));</span><br><span class="line">结果:</span><br><span class="line"> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span></span><br><span class="line"> ==========分割线===========</span><br><span class="line"> <span class="number">1</span></span><br><span class="line"> <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Long leftPush(K key, V pivot, V value);</strong></p>
<p>把value值放到key对应列表中pivot值的左面，如果pivot值存在的话</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForList().leftPush(<span class="string">"list"</span>,<span class="string">"java"</span>,<span class="string">"oc"</span>);</span><br><span class="line">       System.out.print(template.opsForList().range(<span class="string">"list"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果：[c++, python, oc, java, c#, c#]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Long rightPush(K key, V value);</strong></p>
<p>将所有指定的值插入存储在键的列表的头部。如果键不存在，则在执行推送操作之前将其创建为空列表。（从右边插入）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForList().rightPush(<span class="string">"listRight"</span>,<span class="string">"java"</span>);</span><br><span class="line">       template.opsForList().rightPush(<span class="string">"listRight"</span>,<span class="string">"python"</span>);</span><br><span class="line">       template.opsForList().rightPush(<span class="string">"listRight"</span>,<span class="string">"c++"</span>);</span><br><span class="line">结果:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Long rightPushAll(K key, V… values);</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：String[] stringarrays = <span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>&#125;;</span><br><span class="line">       template.opsForList().rightPushAll(<span class="string">"listarrayright"</span>,stringarrays);</span><br><span class="line">       System.out.println(template.opsForList().range(<span class="string">"listarrayright"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Long rightPushAll(K key, Collection<v> values);</v></strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：List&lt;Object&gt; strings = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">      strings.add(<span class="string">"1"</span>);</span><br><span class="line">      strings.add(<span class="string">"2"</span>);</span><br><span class="line">      strings.add(<span class="string">"3"</span>);</span><br><span class="line">      template.opsForList().rightPushAll(<span class="string">"listcollectionright"</span>, strings);</span><br><span class="line">      System.out.println(template.opsForList().range(<span class="string">"listcollectionright"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Long rightPushIfPresent(K key, V value);</strong></p>
<p>只有存在key对应的列表才能将这个value值插入到key所对应的列表中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().rightPushIfPresent(<span class="string">"rightPushIfPresent"</span>,<span class="string">"aa"</span>));</span><br><span class="line">      System.out.println(template.opsForList().rightPushIfPresent(<span class="string">"rightPushIfPresent"</span>,<span class="string">"bb"</span>));</span><br><span class="line">      System.out.println(<span class="string">"==========分割线==========="</span>);</span><br><span class="line">      System.out.println(template.opsForList().rightPush(<span class="string">"rightPushIfPresent"</span>,<span class="string">"aa"</span>));</span><br><span class="line">      System.out.println(template.opsForList().rightPushIfPresent(<span class="string">"rightPushIfPresent"</span>,<span class="string">"bb"</span>));</span><br><span class="line">结果:<span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">==========分割线===========</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Long rightPush(K key, V pivot, V value);</strong></p>
<p>把value值放到key对应列表中pivot值的右面，如果pivot值存在的话</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range(<span class="string">"listRight"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">      template.opsForList().rightPush(<span class="string">"listRight"</span>,<span class="string">"python"</span>,<span class="string">"oc"</span>);</span><br><span class="line">      System.out.println(template.opsForList().range(<span class="string">"listRight"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果:[java, python, c++]</span><br><span class="line">[java, python, oc, c++]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>void set(K key, long index, V value);</strong></p>
<p>在列表中index的位置设置value值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range(<span class="string">"listRight"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">       template.opsForList().set(<span class="string">"listRight"</span>,<span class="number">1</span>,<span class="string">"setValue"</span>);</span><br><span class="line">       System.out.println(template.opsForList().range(<span class="string">"listRight"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果:[java, python, oc, c++]</span><br><span class="line">[java, setValue, oc, c++]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Long remove(K key, long count, Object value);</strong></p>
<p>从存储在键中的列表中删除等于值的元素的第一个计数事件。<br>计数参数以下列方式影响操作：</p>
<p>  count&gt; 0：删除等于从头到尾移动的值的元素。</p>
<p>  count &lt;0：删除等于从尾到头移动的值的元素。</p>
<p>  count = 0：删除等于value的所有元素。 </p>
 <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   使用：System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForList().range(<span class="string">"listRight"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">         <span class="keyword">template</span>.opsForList().<span class="built_in">remove</span>(<span class="string">"listRight"</span>,<span class="number">1</span>,<span class="string">"setValue"</span>);<span class="comment">//将删除列表中存储的列表中第一次次出现的“setValue”。</span></span><br><span class="line">         System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForList().range(<span class="string">"listRight"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">  结果:[java, setValue, oc, c++]</span><br><span class="line">  		[java, oc, c++]</span><br><span class="line">  </span><br><span class="line">   ``` </span><br><span class="line">  </span><br><span class="line">- **V index(K key, <span class="keyword">long</span> index);**</span><br><span class="line"></span><br><span class="line">  根据下表获取列表中的值，下标是从<span class="number">0</span>开始的</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForList().range(“listRight”,0,-1));</p>
<pre><code>System.out.println(template.opsForList().index(&quot;listRight&quot;,2));
</code></pre><p>结果:[java, oc, c++]</p>
<pre><code>c++
</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="selector-tag">-</span> **<span class="selector-tag">V</span> <span class="selector-tag">leftPop</span>(<span class="selector-tag">K</span> <span class="selector-tag">key</span>);**</span><br><span class="line"></span><br><span class="line">  弹出最左边的元素，弹出之后该值在列表中将不复存在</span><br><span class="line"> </span><br><span class="line">  ```<span class="selector-tag">java</span></span><br><span class="line">  使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">list</span>",0,<span class="selector-tag">-1</span>));</span><br><span class="line">         <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.leftPop</span>("<span class="selector-tag">list</span>"));</span><br><span class="line">         <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">list</span>",0,<span class="selector-tag">-1</span>));</span><br><span class="line">  结果:</span><br><span class="line">  		<span class="selector-attr">[c++, python, oc, java, c#, c#]</span></span><br><span class="line">  		 <span class="selector-tag">c</span>++</span><br><span class="line">  		<span class="selector-attr">[python, oc, java, c#, c#]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>V leftPop(K key, long timeout, TimeUnit unit);</strong></p>
<p>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用：用法与 leftPop(K key)<span class="comment">;一样</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>V rightPop(K key);</strong></p>
<p>弹出最右边的元素，弹出之后该值在列表中将不复存在</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用： <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">list</span>",0,<span class="selector-tag">-1</span>));</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.rightPop</span>("<span class="selector-tag">list</span>"));</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">list</span>",0,<span class="selector-tag">-1</span>));</span><br><span class="line">结果:<span class="selector-attr">[python, oc, java, c#, c#]</span></span><br><span class="line">       <span class="selector-tag">c</span>#</span><br><span class="line">       <span class="selector-attr">[python, oc, java, c#]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>V rightPop(K key, long timeout, TimeUnit unit)</strong></p>
<p>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用：用法与 rightPop(K key)<span class="comment">;一样</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>V rightPopAndLeftPush(K sourceKey, K destinationKey);</strong></p>
<p>用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">list</span>",0,<span class="selector-tag">-1</span>));		 <span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.rightPopAndLeftPush</span>("<span class="selector-tag">list</span>","<span class="selector-tag">rightPopAndLeftPush</span>");</span><br><span class="line">   	 <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">list</span>",0,<span class="selector-tag">-1</span>));</span><br><span class="line">   	 <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">rightPopAndLeftPush</span>",0,<span class="selector-tag">-1</span>));</span><br><span class="line">结果: <span class="selector-attr">[oc, java,c#]</span></span><br><span class="line">       <span class="selector-attr">[oc, java]</span></span><br><span class="line">       <span class="selector-attr">[c#]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>V rightPopAndLeftPush(K sourceKey, K destinationKey, long timeout, TimeUnit unit);</strong> </p>
<p>用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用：用法与rightPopAndLeftPush(<span class="keyword">K</span> sourceKey, <span class="keyword">K</span> destinationKey)一样</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Redis的Hash数据机构"><a href="#Redis的Hash数据机构" class="headerlink" title="Redis的Hash数据机构"></a>Redis的Hash数据机构</h2><p> Redis的散列可以让用户将多个键值对存储到一个Redis键里面。</p>
<p> public interface HashOperations<h,hk,hv></h,hk,hv></p>
<p> HashOperations提供一系列方法操作hash：</p>
 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">初始数据:</span><br><span class="line"><span class="regexp">//</span>template.opsForHash().put(<span class="string">"redisHash"</span>,<span class="string">"name"</span>,<span class="string">"tom"</span>);</span><br><span class="line"><span class="regexp">//</span>template.opsForHash().put(<span class="string">"redisHash"</span>,<span class="string">"age"</span>,<span class="number">26</span>);</span><br><span class="line"><span class="regexp">//</span>template.opsForHash().put(<span class="string">"redisHash"</span>,<span class="string">"class"</span>,<span class="string">"6"</span>);</span><br><span class="line"><span class="regexp">//</span>Map&lt;String,Object&gt; testMap = new HashMap();</span><br><span class="line">       <span class="regexp">//</span>testMap.put(<span class="string">"name"</span>,<span class="string">"jack"</span>);</span><br><span class="line">       <span class="regexp">//</span>testMap.put(<span class="string">"age"</span>,<span class="number">27</span>);</span><br><span class="line">       <span class="regexp">//</span>testMap.put(<span class="string">"class"</span>,<span class="string">"1"</span>);</span><br><span class="line">       <span class="regexp">//</span>template.opsForHash().putAll(<span class="string">"redisHash1"</span>,testMap);</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>Long delete(H key, Object… hashKeys);</strong> </p>
<p>删除给定的哈希hashKeys</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForHash().<span class="keyword">delete</span>(<span class="string">"redisHash"</span>,<span class="string">"name"</span>));</span><br><span class="line">      System.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForHash().entries(<span class="string">"redisHash"</span>));</span><br><span class="line">结果：<span class="number">1</span></span><br><span class="line">&#123;<span class="keyword">class</span>=<span class="number">6</span>, age=<span class="number">28.1</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>Boolean hasKey(H key, Object hashKey);</strong></p>
<p>确定哈希hashKey是否存在</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForHash().hasKey(<span class="string">"redisHash"</span>,<span class="string">"age"</span>));</span><br><span class="line">       System.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForHash().hasKey(<span class="string">"redisHash"</span>,<span class="string">"ttt"</span>));</span><br><span class="line">结果：<span class="literal">true</span></span><br><span class="line">       <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>HV get(H key, Object hashKey);</strong></p>
<p>从键中的哈希获取给定hashKey的值</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForHash().<span class="built_in">get</span>(<span class="string">"redisHash"</span>,<span class="string">"age"</span>));</span><br><span class="line">结果：<span class="number">26</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>List<hv> multiGet(H key, Collection<hk> hashKeys);</hk></hv></strong></p>
<p>从哈希中获取给定hashKey的值</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：List&lt;<span class="keyword">Object</span>&gt; kes = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">Object</span>&gt;();</span><br><span class="line">       kes.<span class="built_in">add</span>(<span class="string">"name"</span>);</span><br><span class="line">       kes.<span class="built_in">add</span>(<span class="string">"age"</span>);</span><br><span class="line">       System.out.<span class="built_in">println</span>(template.opsForHash().multiGet(<span class="string">"redisHash"</span>,kes));</span><br><span class="line">结果：[jack, <span class="number">28.1</span>]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>Long increment(H key, HK hashKey, long delta);</strong></p>
<p>通过给定的delta增加散列hashKey的值（整型）</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  使用：System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForHash().<span class="built_in">get</span>(<span class="string">"redisHash"</span>,<span class="string">"age"</span>));</span><br><span class="line">         System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForHash().increment(<span class="string">"redisHash"</span>,<span class="string">"age"</span>,<span class="number">1</span>));</span><br><span class="line">  结果：<span class="number">26</span></span><br><span class="line">       <span class="number">27</span></span><br><span class="line">  ``` </span><br><span class="line">  </span><br><span class="line">- **Double increment(H key, HK hashKey, <span class="keyword">double</span> delta);**</span><br><span class="line">true</span><br><span class="line">  通过给定的delta增加散列hashKey的值（浮点数）</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForHash().get(“redisHash”,”age”));</p>
<pre><code>System.out.println(template.opsForHash().increment(&quot;redisHash&quot;,&quot;age&quot;,1.1));
</code></pre><p>结果：27</p>
<pre><code>28.1
</code></pre><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Set&lt;HK&gt; <span class="built_in">keys</span>(H <span class="built_in">key</span>);**</span><br><span class="line"></span><br><span class="line">  获取<span class="built_in">key</span>所对应的散列表的<span class="built_in">key</span></span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForHash().keys(“redisHash1”));</p>
<pre><code>//redisHash1所对应的散列表为{class=1, name=jack, age=27}
</code></pre><p>结果：[name, class, age]</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Long <span class="built_in">size</span>(H <span class="built_in">key</span>);**  </span><br><span class="line"></span><br><span class="line">  获取<span class="built_in">key</span>所对应的散列表的大小个数</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForHash().size(“redisHash1”));</p>
<pre><code>//redisHash1所对应的散列表为{class=1, name=jack, age=27}
</code></pre><p>结果：3</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **<span class="function"><span class="keyword">void</span> <span class="title">putAll</span><span class="params">(H key, Map&lt;? <span class="keyword">extends</span> HK, ? <span class="keyword">extends</span> HV&gt; m)</span></span>;** </span><br><span class="line"> 	</span><br><span class="line">  使用m中提供的多个散列字段设置到key对应的散列表中</span><br></pre></td></tr></table></figure>
<p>使用：Map<string,object> testMap = new HashMap();</string,object></p>
<pre><code>    testMap.put(&quot;name&quot;,&quot;jack&quot;);
    testMap.put(&quot;age&quot;,27);
    testMap.put(&quot;class&quot;,&quot;1&quot;);
template.opsForHash().putAll(&quot;redisHash1&quot;,testMap);
System.out.println(template.opsForHash().entries(&quot;redisHash1&quot;));
</code></pre><p>结果：{class=1, name=jack, age=27}</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **<span class="function"><span class="keyword">void</span> <span class="title">put</span>(<span class="params">H key, HK hashKey, HV <span class="keyword">value</span></span>)</span>;**</span><br><span class="line"></span><br><span class="line">  设置散列hashKey的值</span><br></pre></td></tr></table></figure>
<p>使用：template.opsForHash().put(“redisHash”,”name”,”tom”);</p>
<pre><code>template.opsForHash().put(&quot;redisHash&quot;,&quot;age&quot;,26);
template.opsForHash().put(&quot;redisHash&quot;,&quot;class&quot;,&quot;6&quot;);
   System.out.println(template.opsForHash().entries(&quot;redisHash&quot;));
</code></pre><p>结果：{age=26, class=6, name=tom}</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">  </span></span><br><span class="line"><span class="bullet">- </span>*<span class="strong">*Boolean putIfAbsent(H key, HK hashKey, HV value);*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">	</span></span><br><span class="line"><span class="strong">  仅当hashKey不存在时才设置散列hashKey的值</span></span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForHash().putIfAbsent(“redisHash”,”age”,30));</p>
<pre><code>System.out.println(template.opsForHash().putIfAbsent(&quot;redisHash&quot;,&quot;kkk&quot;,&quot;kkk&quot;));
</code></pre><p>结果：false</p>
<pre><code>true
</code></pre><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">  </span></span><br><span class="line"><span class="bullet">- </span>*<span class="strong">*List&lt;HV&gt; values(H key);*</span>* </span><br><span class="line"></span><br><span class="line"><span class="code">  获取整个哈希存储的值根据密钥</span></span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForHash().values(“redisHash”));<br>结果：[tom, 26, 6]</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">  </span></span><br><span class="line"><span class="bullet">- </span>*<span class="strong">*Map&lt;HK, HV&gt; entries(H key);*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">  获取整个哈希存储根据密钥</span></span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForHash().entries(“redisHash”));<br>结果：{age=26, class=6, name=tom}  </p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">-<span class="ruby"> **Cursor&lt;Map.Entry&lt;HK, HV<span class="meta">&gt;&gt; </span>scan(H key, ScanOptions options);**  </span></span><br><span class="line"><span class="ruby">  </span></span><br><span class="line"><span class="ruby">  使用Cursor在key的hash中迭代，相当于迭代器。</span></span><br></pre></td></tr></table></figure>
<p>使用：Cursor<map.entry<object, object="">&gt; curosr =     template.opsForHash().scan(“redisHash”, ScanOptions.ScanOptions.NONE);</map.entry<object,></p>
<pre><code> while(curosr.hasNext()){
    Map.Entry&lt;Object, Object&gt; entry = curosr.next();
    System.out.println(entry.getKey()+&quot;:&quot;+entry.getValue());
}
</code></pre><p>结果：age:28.1</p>
<pre><code>class:6
kkk:kkk
</code></pre><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">## Redis的Set数据结构</span></span><br><span class="line"></span><br><span class="line">Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据 </span><br><span class="line">  </span><br><span class="line">Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</span><br><span class="line">public<span class="built_in"> interface </span>SetOperations&lt;K,V&gt;</span><br><span class="line">SetOperations提供了对无序集合的一系列操作：</span><br><span class="line">  </span><br><span class="line">- **Long <span class="builtin-name">add</span>(K key, V<span class="built_in">..</span>. values);**</span><br><span class="line"></span><br><span class="line">  无序集合中添加元素，返回添加个数</span><br><span class="line">也可以直接在add里面添加多个值 如：template.opsForSet().<span class="builtin-name">add</span>(<span class="string">"setTest"</span>,<span class="string">"aaa"</span>,<span class="string">"bbb"</span>)</span><br></pre></td></tr></table></figure>
<p>使用：String[] strarrays = new String[]{“strarr1”,”sgtarr2”};</p>
<pre><code>System.out.println(template.opsForSet().add(&quot;setTest&quot;, strarrays));
</code></pre><p>结果：2</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Long <span class="built_in">remove</span>(K <span class="built_in">key</span>, Object... <span class="built_in">values</span>);**</span><br><span class="line">  </span><br><span class="line">  移除集合中一个或多个成员</span><br></pre></td></tr></table></figure>
<p>使用：String[] strarrays = new String[]{“strarr1”,”sgtarr2”};</p>
<pre><code>System.out.println(template.opsForSet().remove(&quot;setTest&quot;,strarrays));
</code></pre><p>结果：2</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">  </span></span><br><span class="line"><span class="bullet">- </span>*<span class="strong">*V pop(K key);*</span>* </span><br><span class="line"><span class="code"> 	</span></span><br><span class="line"><span class="code">  移除并返回集合中的一个随机元素</span></span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForSet().pop(“setTest”));</p>
<pre><code>System.out.println(template.opsForSet().members(&quot;setTest&quot;));
</code></pre><p>结果：bbb</p>
<pre><code>[aaa, ccc]
</code></pre><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **<span class="keyword">Boolean </span><span class="keyword">move(K </span>key, V value, K destKey)<span class="comment">;**</span></span><br><span class="line"></span><br><span class="line">  将 member 元素从 source 集合移动到 destination 集合</span><br></pre></td></tr></table></figure>
<p>使用：template.opsForSet().move(“setTest”,”aaa”,”setTest2”);</p>
<pre><code>System.out.println(template.opsForSet().members(&quot;setTest&quot;));
System.out.println(template.opsForSet().members(&quot;setTest2&quot;));
</code></pre><p>结果：[ccc]</p>
<pre><code>[aaa]
</code></pre><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">  </span></span><br><span class="line"><span class="bullet">- </span>*<span class="strong">*Long size(K key);*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">  </span></span><br><span class="line"><span class="strong">  无序集合的大小长度</span></span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForSet().size(“setTest”));<br>结果：1</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **<span class="built_in">Boolean</span> isMember(K <span class="keyword">key</span>, <span class="built_in">Object</span> o);** </span><br><span class="line">  </span><br><span class="line">  判断 member 元素是否是集合 <span class="keyword">key</span> 的成员</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForSet().isMember(“setTest”,”ccc”));</p>
<pre><code>System.out.println(template.opsForSet().isMember(&quot;setTest&quot;,&quot;asd&quot;));
</code></pre><p>结果：true</p>
<pre><code>false
</code></pre><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">- **<span class="keyword">Set</span>&lt;V&gt; intersect(K <span class="comment">key, K otherKey)</span>;**</span><br><span class="line">  </span><br><span class="line">  key对应的无序集合与otherKey对应的无序集合求交集</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForSet().members(“setTest”));</p>
<pre><code>System.out.println(template.opsForSet().members(&quot;setTest2&quot;));
System.out.println(template.opsForSet().intersect(&quot;setTest&quot;,&quot;setTest2&quot;));
</code></pre><p>结果：[aaa, ccc]</p>
<pre><code>[aaa]
[aaa]
</code></pre><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **<span class="keyword">Set</span>&lt;V&gt; intersect(K <span class="comment">key, Collection&lt;K&gt; otherKeys)</span>;** </span><br><span class="line">  </span><br><span class="line">  key对应的无序集合与多个otherKey对应的无序集合求交集</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForSet().members(“setTest”));</p>
<pre><code>System.out.println(template.opsForSet().members(&quot;setTest2&quot;));
System.out.println(template.opsForSet().members(&quot;setTest3&quot;));
List&lt;String&gt; strlist = new ArrayList&lt;String&gt;();
strlist.add(&quot;setTest2&quot;);
strlist.add(&quot;setTest3&quot;);
System.out.println(template.opsForSet().intersect(&quot;setTest&quot;,strlist));
</code></pre><p>结果：[aaa, ccc]</p>
<pre><code>[aaa]
[ccc, aaa]
[aaa]
</code></pre><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Long intersectAndStore(<span class="keyword">K</span> key, <span class="keyword">K</span> otherKey, <span class="keyword">K</span> destKey);**</span><br><span class="line">  </span><br><span class="line">  key无序集合与otherkey无序集合的交集存储到destKey无序集合中</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));</p>
<pre><code>System.out.println(&quot;setTest2:&quot; + template.opsForSet().members(&quot;setTest2&quot;));
System.out.println(template.opsForSet().intersectAndStore(&quot;setTest&quot;,&quot;setTest2&quot;,&quot;destKey1&quot;));
System.out.println(template.opsForSet().members(&quot;destKey1&quot;));
</code></pre><p>结果：setTest:[ddd, bbb, aaa, ccc]</p>
<pre><code> setTest2:[ccc, aaa]
 2
[aaa, ccc]    
</code></pre><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Long intersectAndStore(<span class="keyword">K</span> key, Collection&lt;<span class="keyword">K</span>&gt; otherKeys, <span class="keyword">K</span> destKey);**</span><br><span class="line">  </span><br><span class="line">  key对应的无序集合与多个otherKey对应的无序集合求交集存储到destKey无序集合中</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));</p>
<pre><code>System.out.println(&quot;setTest2:&quot; + template.opsForSet().members(&quot;setTest2&quot;));
System.out.println(&quot;setTest3:&quot; + template.opsForSet().members(&quot;setTest3&quot;));
List&lt;String&gt; strlist = new ArrayList&lt;String&gt;();
    strlist.add(&quot;setTest2&quot;);
    strlist.add(&quot;setTest3&quot;);
System.out.println(template.opsForSet().intersectAndStore(&quot;setTest&quot;,strlist,&quot;destKey2&quot;));
System.out.println(template.opsForSet().members(&quot;destKey2&quot;));
</code></pre><p>结果：setTest:[ddd, bbb, aaa, ccc]</p>
<pre><code>setTest2:[ccc, aaa]
setTest3:[ccc, aaa]
2
  [aaa, ccc]
</code></pre><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Set&lt;V&gt; <span class="class"><span class="keyword">union</span>(<span class="title">K</span> <span class="title">key</span>, <span class="title">K</span> <span class="title">otherKey</span>);</span>**</span><br><span class="line"></span><br><span class="line">  key无序集合与otherKey无序集合的并集</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));</p>
<pre><code>System.out.println(&quot;setTest2:&quot; + template.opsForSet().members(&quot;setTest2&quot;));
System.out.println(template.opsForSet().union(&quot;setTest&quot;,&quot;setTest2&quot;));
</code></pre><p>结果：setTest:[ddd, bbb, aaa, ccc]</p>
<pre><code>setTest2:[ccc, aaa]
[ccc, aaa, ddd, bbb]
</code></pre><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Set&lt;V&gt; <span class="class"><span class="keyword">union</span>(<span class="title">K</span> <span class="title">key</span>, <span class="title">Collection</span>&lt;<span class="title">K</span>&gt; <span class="title">otherKeys</span>);</span>**</span><br><span class="line">  </span><br><span class="line">  key无序集合与多个otherKey无序集合的并集</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));</p>
<pre><code>System.out.println(&quot;setTest2:&quot; + template.opsForSet().members(&quot;setTest2&quot;));
System.out.println(&quot;setTest3:&quot; + template.opsForSet().members(&quot;setTest3&quot;));
List&lt;String&gt; strlist = new ArrayList&lt;String&gt;();
   strlist.add(&quot;setTest2&quot;);
   strlist.add(&quot;setTest3&quot;);
System.out.println(template.opsForSet().union(&quot;setTest&quot;,strlist));
</code></pre><p>结果：setTest:[ddd, bbb, aaa, ccc]</p>
<pre><code>setTest2:[ccc, aaa]
setTest3:[xxx, ccc, aaa]
[ddd, xxx, bbb, aaa, ccc]
</code></pre> <figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Long unionAndStore(<span class="keyword">K</span> key, <span class="keyword">K</span> otherKey, <span class="keyword">K</span> destKey);** </span><br><span class="line"></span><br><span class="line">  key无序集合与otherkey无序集合的并集存储到destKey无序集合中</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));</p>
<pre><code>System.out.println(&quot;setTest2:&quot; + template.opsForSet().members(&quot;setTest2&quot;));
System.out.println(template.opsForSet().unionAndStore(&quot;setTest&quot;,&quot;setTest2&quot;,&quot;unionAndStoreTest1&quot;));
System.out.println(&quot;unionAndStoreTest1:&quot; + template.opsForSet().members(&quot;unionAndStoreTest1&quot;));
</code></pre><p>结果：setTest:[ddd, bbb, aaa, ccc]</p>
<pre><code>setTest2:[ccc, aaa]
4
unionAndStoreTest1:[ccc, aaa, ddd, bbb]
</code></pre><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Long unionAndStore(<span class="keyword">K</span> key, Collection&lt;<span class="keyword">K</span>&gt; otherKeys, <span class="keyword">K</span> destKey);**</span><br><span class="line">  </span><br><span class="line">  key无序集合与多个otherkey无序集合的并集存储到destKey无序集合中</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));</p>
<pre><code>System.out.println(&quot;setTest2:&quot; + template.opsForSet().members(&quot;setTest2&quot;));
System.out.println(&quot;setTest3:&quot; + template.opsForSet().members(&quot;setTest3&quot;));
List&lt;String&gt; strlist = new ArrayList&lt;String&gt;();
strlist.add(&quot;setTest2&quot;);
strlist.add(&quot;setTest3&quot;);
System.out.println(template.opsForSet().unionAndStore(&quot;setTest&quot;,strlist,&quot;unionAndStoreTest2&quot;));
System.out.println(&quot;unionAndStoreTest2:&quot; + template.opsForSet().members(&quot;unionAndStoreTest2&quot;));
</code></pre><p>结果：setTest:[ddd, bbb, aaa, ccc]</p>
<pre><code>setTest2:[ccc, aaa]
setTest3:[xxx, ccc, aaa]
5
unionAndStoreTest2:[ddd, xxx, bbb, aaa, ccc]
</code></pre><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">- **<span class="keyword">Set</span>&lt;V&gt; difference(K <span class="comment">key, K otherKey)</span>;**</span><br><span class="line"> </span><br><span class="line">  key无序集合与otherKey无序集合的差集</span><br></pre></td></tr></table></figure>
<p> 使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));</p>
<pre><code>System.out.println(&quot;setTest2:&quot; + template.opsForSet().members(&quot;setTest2&quot;));
System.out.println(template.opsForSet().difference(&quot;setTest&quot;,&quot;setTest2&quot;));
</code></pre><p> 结果：setTest:[ddd, bbb, aaa, ccc]</p>
<pre><code>setTest2:[ccc, aaa]
[bbb, ddd] 
</code></pre> <figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **<span class="keyword">Set</span>&lt;V&gt; difference(K <span class="comment">key, Collection&lt;K&gt; otherKeys)</span>;**</span><br><span class="line">  </span><br><span class="line">  key无序集合与多个otherKey无序集合的差集</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));</p>
<pre><code>System.out.println(&quot;setTest2:&quot; + template.opsForSet().members(&quot;setTest2&quot;));
System.out.println(&quot;setTest3:&quot; + template.opsForSet().members(&quot;setTest3&quot;));
List&lt;String&gt; strlist = new ArrayList&lt;String&gt;();
   strlist.add(&quot;setTest2&quot;);
   strlist.add(&quot;setTest3&quot;);
System.out.println(template.opsForSet().difference(&quot;setTest&quot;,strlist));
</code></pre><p>结果：setTest:[ddd, bbb, aaa, ccc]</p>
<pre><code>setTest2:[ccc, aaa]
setTest3:[xxx, ccc, aaa]
[bbb, ddd]
</code></pre><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Long differenceAndStore(<span class="keyword">K</span> key, <span class="keyword">K</span> otherKey, <span class="keyword">K</span> destKey);** </span><br><span class="line"></span><br><span class="line">  key无序集合与otherkey无序集合的差集存储到destKey无序集合中</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));</p>
<pre><code>System.out.println(&quot;setTest2:&quot; + template.opsForSet().members(&quot;setTest2&quot;));
System.out.println(template.opsForSet().differenceAndStore(&quot;setTest&quot;,&quot;setTest2&quot;,&quot;differenceAndStore1&quot;));
System.out.println(&quot;differenceAndStore1:&quot; + template.opsForSet().members(&quot;differenceAndStore1&quot;));
</code></pre><p>结果：setTest:[ddd, bbb, aaa, ccc]</p>
<pre><code>setTest2:[ccc, aaa]
2
differenceAndStore1:[bbb, ddd]
</code></pre><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **Long differenceAndStore(<span class="keyword">K</span> key, Collection&lt;<span class="keyword">K</span>&gt; otherKeys, <span class="keyword">K</span> destKey);** </span><br><span class="line"></span><br><span class="line">  key无序集合与多个otherkey无序集合的差集存储到destKey无序集合中</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));</p>
<pre><code>System.out.println(&quot;setTest2:&quot; + template.opsForSet().members(&quot;setTest2&quot;));
System.out.println(&quot;setTest3:&quot; + template.opsForSet().members(&quot;setTest3&quot;));
List&lt;String&gt; strlist = new ArrayList&lt;String&gt;();
   strlist.add(&quot;setTest2&quot;);
   strlist.add(&quot;setTest3&quot;);
System.out.println(template.opsForSet().differenceAndStore(&quot;setTest&quot;,strlist,&quot;differenceAndStore2&quot;));
System.out.println(&quot;differenceAndStore2:&quot; + template.opsForSet().members(&quot;differenceAndStore2&quot;));
</code></pre><p>结果：setTest:[ddd, bbb, aaa, ccc]</p>
<pre><code>setTest2:[ccc, aaa]
setTest3:[xxx, ccc, aaa]
2
differenceAndStore2:[bbb, ddd]
</code></pre><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **<span class="keyword">Set</span>&lt;V&gt; members(K <span class="comment">key)</span>;**</span><br><span class="line">  </span><br><span class="line">  返回集合中的所有成员</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForSet().members(“setTest”));<br>结果：[ddd, bbb, aaa, ccc]</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">  </span></span><br><span class="line"><span class="bullet">- </span>*<span class="strong">*V randomMember(K key);*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">  随机获取key无序集合中的一个元素</span></span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));</p>
<pre><code>System.out.println(&quot;setTestrandomMember:&quot; + template.opsForSet().randomMember(&quot;setTest&quot;));
System.out.println(&quot;setTestrandomMember:&quot; + template.opsForSet().randomMember(&quot;setTest&quot;));
System.out.println(&quot;setTestrandomMember:&quot; + template.opsForSet().randomMember(&quot;setTest&quot;));
System.out.println(&quot;setTestrandomMember:&quot; + template.opsForSet().randomMember(&quot;setTest&quot;));
</code></pre><p>结果：setTest:[ddd, bbb, aaa, ccc]</p>
<pre><code>setTestrandomMember:aaa
setTestrandomMember:bbb
setTestrandomMember:aaa
setTestrandomMember:ddd
</code></pre><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Set&lt;V&gt; <span class="keyword">distinctRandomMembers(K </span>key, long <span class="built_in">count</span>)<span class="comment">;** </span></span><br><span class="line">  </span><br><span class="line">  获取多个key无序集合中的元素（去重），<span class="built_in">count</span>表示个数</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(“randomMembers:” + template.opsForSet().distinctRandomMembers(“setTest”,5));<br>结果：randomMembers:[aaa, bbb, ddd, ccc]</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **List&lt;V&gt; randomMembers(K <span class="built_in">key</span>, long <span class="built_in">count</span>);**</span><br><span class="line">  </span><br><span class="line">  获取多个<span class="built_in">key</span>无序集合中的元素，<span class="built_in">count</span>表示个数</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(“randomMembers:” + template.opsForSet().randomMembers(“setTest”,5));<br>结果：randomMembers:[ccc, ddd, ddd, ddd, aaa]</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Cursor&lt;V&gt; <span class="keyword">scan(K </span>key, <span class="keyword">ScanOptions </span>options)<span class="comment">;**</span></span><br><span class="line">  </span><br><span class="line">  遍历set</span><br></pre></td></tr></table></figure>
<p>使用： Cursor<object> curosr = template.opsForSet().scan(“setTest”, ScanOptions.NONE);</object></p>
<pre><code>while(curosr.hasNext()){
   System.out.println(curosr.next());
}
</code></pre><p>结果：ddd</p>
<pre><code>bbb
  aaa
ccc
</code></pre><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">## Redis的ZSet数据结构 </span></span><br><span class="line"> </span><br><span class="line"> Redis 有序集合和无序集合一样也是string类型元素的集合,且不允许重复的成员。</span><br><span class="line">不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</span><br><span class="line">有序集合的成员是唯一的,但分数(score)却可以重复。</span><br><span class="line">public<span class="built_in"> interface </span>ZSetOperations&lt;K,V&gt;</span><br><span class="line">ZSetOperations提供了一系列方法对有序集合进行操作：</span><br><span class="line"></span><br><span class="line">- *<span class="number">*B</span>oolean <span class="builtin-name">add</span>(K key, V value, double score);**</span><br><span class="line"></span><br><span class="line">  新增一个有序集合，存在的话为<span class="literal">false</span>，不存在的话为<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().add(“zset1”,”zset-1”,1.0));<br>结果：true</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">-<span class="ruby"> **Long add(K key, Set&lt;TypedTuple&lt;V<span class="meta">&gt;&gt; </span>tuples);**</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">  新增一个有序集合</span></span><br></pre></td></tr></table></figure>
<p>使用：ZSetOperations.TypedTuple<object> objectTypedTuple1 = new DefaultTypedTuple<object>(“zset-5”,9.6);</object></object></p>
<pre><code>ZSetOperations.TypedTuple&lt;Object&gt; objectTypedTuple2 = new DefaultTypedTuple&lt;Object&gt;(&quot;zset-6&quot;,9.9);
Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples = new HashSet&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt;();
    tuples.add(objectTypedTuple1);
    tuples.add(objectTypedTuple2);
System.out.println(template.opsForZSet().add(&quot;zset1&quot;,tuples));
System.out.println(template.opsForZSet().range(&quot;zset1&quot;,0,-1));
</code></pre><p>结果：[zset-1, zset-2, zset-3, zset-4, zset-5, zset-6]</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Long <span class="built_in">remove</span>(K <span class="built_in">key</span>, Object... <span class="built_in">values</span>);** </span><br><span class="line">  </span><br><span class="line">  从有序集合中移除一个或者多个元素</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().range(“zset1”,0,-1));</p>
<pre><code>System.out.println(template.opsForZSet().remove(&quot;zset1&quot;,&quot;zset-6&quot;));
System.out.println(template.opsForZSet().range(&quot;zset1&quot;,0,-1));
</code></pre><p>结果：[zset-1, zset-2, zset-3, zset-4, zset-5, zset-6]</p>
<pre><code>1
  [zset-1, zset-2, zset-3, zset-4, zset-5]
</code></pre><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **<span class="function">Double <span class="title">incrementScore</span>(<span class="params">K key, V <span class="keyword">value</span>, <span class="keyword">double</span> delta</span>)</span>;**  </span><br><span class="line">  </span><br><span class="line">  增加元素的score值，并返回增加后的值</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().incrementScore(“zset1”,”zset-1”,1.1));  //原为1.1<br>结果：2.2</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **<span class="built_in">Long</span> rank(K <span class="keyword">key</span>, <span class="built_in">Object</span> o);**</span><br><span class="line">  </span><br><span class="line">  返回有序集中指定成员的排名，其中有序集成员按分数值递增(从小到大)顺序排列</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().range(“zset1”,0,-1));</p>
<pre><code>System.out.println(template.opsForZSet().rank(&quot;zset1&quot;,&quot;zset-2&quot;));
</code></pre><p>结果：[zset-2, zset-1, zset-3, zset-4, zset-5]</p>
<pre><code>0   //表明排名第一
</code></pre><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **<span class="built_in">Long</span> reverseRank(K <span class="keyword">key</span>, <span class="built_in">Object</span> o);** </span><br><span class="line">  </span><br><span class="line">  返回有序集中指定成员的排名，其中有序集成员按分数值递减(从大到小)顺序排列</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().range(“zset1”,0,-1));</p>
<pre><code>System.out.println(template.opsForZSet().reverseRank(&quot;zset1&quot;,&quot;zset-2&quot;));
</code></pre><p>结果：[zset-2, zset-1, zset-3, zset-4, zset-5]</p>
<pre><code>4 //递减之后排到第五位去了  
</code></pre><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **<span class="keyword">Set</span>&lt;V&gt; range(K <span class="keyword">key</span>, <span class="built_in">long</span> start, <span class="built_in">long</span> <span class="keyword">end</span>);**</span><br><span class="line">  </span><br><span class="line">  通过索引区间返回有序集合成指定区间内的成员，其中有序集成员按分数值递增(从小到大)顺序排列</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().range(“zset1”,0,-1));<br>结果：[zset-2, zset-1, zset-3, zset-4, zset-5]</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **<span class="keyword">Set</span>&lt;TypedTuple&lt;V&gt;&gt; rangeWithScores(K <span class="keyword">key</span>, <span class="built_in">long</span> start, <span class="built_in">long</span> <span class="keyword">end</span>);**</span><br><span class="line">  </span><br><span class="line">  通过索引区间返回有序集合成指定区间内的成员对象，其中有序集成员按分数值递增(从小到大)顺序排列</span><br></pre></td></tr></table></figure>
<p>使用：Set<zsetoperations.typedtuple<object>&gt; tuples = template.opsForZSet().rangeWithScores(“zset1”,0,-1);</zsetoperations.typedtuple<object></p>
<pre><code>Iterator&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; iterator = tuples.iterator();
while (iterator.hasNext())
{
    ZSetOperations.TypedTuple&lt;Object&gt; typedTuple = iterator.next();
    System.out.println(&quot;value:&quot; + typedTuple.getValue() + &quot;score:&quot; + typedTuple.getScore());
}
</code></pre><p>结果：value:zset-2score:1.2</p>
<pre><code>value:zset-1score:2.2
value:zset-3score:2.3
   value:zset-4score:6.6
 value:zset-5score:9.6
</code></pre><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **Set&lt;V&gt; rangeByScore(K <span class="built_in">key</span>, <span class="keyword">double</span> <span class="built_in">min</span>, <span class="keyword">double</span> <span class="built_in">max</span>);**</span><br><span class="line"></span><br><span class="line">  通过分数返回有序集合指定区间内的成员，其中有序集成员按分数值递增(从小到大)顺序排列</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().rangeByScore(“zset1”,0,5));<br>结果：[zset-2, zset-1, zset-3]</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Set&lt;TypedTuple&lt;V&gt;&gt; rangeByScoreWithScores(K <span class="built_in">key</span>, <span class="keyword">double</span> <span class="built_in">min</span>, <span class="keyword">double</span> <span class="built_in">max</span>);**</span><br><span class="line"></span><br><span class="line">  通过分数返回有序集合指定区间内的成员对象，其中有序集成员按分数值递增(从小到大)顺序排列</span><br></pre></td></tr></table></figure>
<p>使用：Set<zsetoperations.typedtuple<object>&gt; tuples = template.opsForZSet().rangeByScoreWithScores(“zset1”,0,5);</zsetoperations.typedtuple<object></p>
<pre><code>Iterator&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; iterator = tuples.iterator();
while (iterator.hasNext())
{
    ZSetOperations.TypedTuple&lt;Object&gt; typedTuple = iterator.next();
    System.out.println(&quot;value:&quot; + typedTuple.getValue() + &quot;score:&quot; + typedTuple.getScore());
}
</code></pre><p>结果：value:zset-2score:1.2</p>
<pre><code>value:zset-1score:2.2
value:zset-3score:2.3
</code></pre><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Set&lt;V&gt; rangeByScore(K <span class="built_in">key</span>, <span class="keyword">double</span> <span class="built_in">min</span>, <span class="keyword">double</span> <span class="built_in">max</span>, <span class="keyword">long</span> offset, <span class="keyword">long</span> count);**</span><br><span class="line">   </span><br><span class="line">  通过分数返回有序集合指定区间内的成员，并在索引范围内，其中有序集成员按分数值递增(从小到大)顺序排列</span><br></pre></td></tr></table></figure>
<p>使用： System.out.println(template.opsForZSet().rangeByScore(“zset1”,0,5));<br>  System.out.println(template.opsForZSet().rangeByScore(“zset1”,0,5,1,2));<br>结果：[zset-2, zset-1, zset-3]</p>
<pre><code>[zset-1, zset-3]
</code></pre><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Set&lt;TypedTuple&lt;V&gt;&gt; rangeByScoreWithScores(K <span class="built_in">key</span>, <span class="keyword">double</span> <span class="built_in">min</span>, <span class="keyword">double</span> <span class="built_in">max</span>, <span class="keyword">long</span> offset, <span class="keyword">long</span> count);**</span><br><span class="line"></span><br><span class="line">  通过分数返回有序集合指定区间内的成员对象，并在索引范围内，其中有序集成员按分数值递增(从小到大)顺序排列</span><br></pre></td></tr></table></figure>
<p>使用：Set<zsetoperations.typedtuple<object>&gt; tuples = template.opsForZSet().rangeByScoreWithScores(“zset1”,0,5,1,2);</zsetoperations.typedtuple<object></p>
<pre><code>Iterator&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; iterator = tuples.iterator();
while (iterator.hasNext())
{
    ZSetOperations.TypedTuple&lt;Object&gt; typedTuple = iterator.next();
    System.out.println(&quot;value:&quot; + typedTuple.getValue() + &quot;score:&quot; + typedTuple.getScore());
}
</code></pre><p>结果：value:zset-1score:2.2</p>
<pre><code>value:zset-3score:2.3
</code></pre><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Set&lt;V&gt; reverseRange(K <span class="type">key</span>, long start, long end);**</span><br><span class="line">  </span><br><span class="line">  通过索引区间返回有序集合成指定区间内的成员，其中有序集成员按分数值递减(从大到小)顺序排列</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ```  </span><br><span class="line">  使用：System.out.println(template.opsForZSet().reverseRange(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">  结果：[zset<span class="number">-5</span>, zset<span class="number">-4</span>, zset<span class="number">-3</span>, zset<span class="number">-1</span>, zset<span class="number">-2</span>]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>Set<typedtuple<v>&gt; reverseRangeWithScores(K key, long start, long end);</typedtuple<v></strong></p>
<p>通过索引区间返回有序集合成指定区间内的成员对象，其中有序集成员按分数值递减(从大到小)顺序排列</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">使用：Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples = template.opsForZSet().reverseRangeWithScores(<span class="string">"zset1"</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">      Iterator&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; iterator = tuples.iterator();</span><br><span class="line">      <span class="keyword">while</span> (iterator.hasNext())</span><br><span class="line">      &#123;</span><br><span class="line">          ZSetOperations.TypedTuple&lt;Object&gt; typedTuple = iterator.next();</span><br><span class="line">          System.<span class="keyword">out</span>.println(<span class="string">"value:"</span> + typedTuple.getValue() + <span class="string">"score:"</span> + typedTuple.getScore());</span><br><span class="line">      &#125;</span><br><span class="line">结果：<span class="keyword">value</span>:zset-<span class="number">5</span>score:<span class="number">9.6</span></span><br><span class="line"> <span class="keyword">value</span>:zset-<span class="number">4</span>score:<span class="number">6.6</span></span><br><span class="line"> <span class="keyword">value</span>:zset-<span class="number">3</span>score:<span class="number">2.3</span></span><br><span class="line"> <span class="keyword">value</span>:zset-<span class="number">1</span>score:<span class="number">2.2</span></span><br><span class="line"> <span class="keyword">value</span>:zset-<span class="number">2</span>score:<span class="number">1.2</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>Set<v> reverseRangeByScore(K key, double min, double max);</v></strong></p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  使用：与rangeByScore调用方法一样，其中有序集成员按分数值递减(从大到小)顺序排列</span><br><span class="line">  ```  </span><br><span class="line">  </span><br><span class="line">- **Set&lt;TypedTuple&lt;V&gt;&gt; reverseRangeByScoreWithScores(K <span class="built_in">key</span>, <span class="keyword">double</span> <span class="built_in">min</span>, <span class="keyword">double</span> <span class="built_in">max</span>);**</span><br></pre></td></tr></table></figure>
<p>使用：与rangeByScoreWithScores调用方法一样，其中有序集成员按分数值递减(从大到小)顺序排列</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">- **Set&lt;V&gt; reverseRangeByScore(K <span class="built_in">key</span>, <span class="keyword">double</span> <span class="built_in">min</span>, <span class="keyword">double</span> <span class="built_in">max</span>, <span class="keyword">long</span> offset, <span class="keyword">long</span> count);**</span><br></pre></td></tr></table></figure>
<p>使用：与rangeByScore调用方法一样，其中有序集成员按分数值递减(从大到小)顺序排列</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Set&lt;TypedTuple&lt;V&gt;&gt; reverseRangeByScoreWithScores(K <span class="built_in">key</span>, <span class="keyword">double</span> <span class="built_in">min</span>, <span class="keyword">double</span> <span class="built_in">max</span>, <span class="keyword">long</span> offset, <span class="keyword">long</span> count);**</span><br></pre></td></tr></table></figure>
<p>使用：与rangeByScoreWithScores调用方法一样，其中有序集成员按分数值递减(从大到小)顺序排列</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">- **Long <span class="built_in">count</span>(K key, <span class="keyword">double</span> <span class="built_in">min</span>, <span class="keyword">double</span> <span class="built_in">max</span>);**  </span><br><span class="line">  </span><br><span class="line">  通过分数返回有序集合指定区间内的成员个数</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().rangeByScore(“zset1”,0,5));</p>
<pre><code>System.out.println(template.opsForZSet().count(&quot;zset1&quot;,0,5));
</code></pre><p>结果：[zset-2, zset-1, zset-3]<br>3</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">  </span></span><br><span class="line"><span class="bullet">- </span>*<span class="strong">*Long size(K key);*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">  </span></span><br><span class="line"><span class="strong">  获取有序集合的成员数，内部调用的就是zCard方法</span></span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().size(“zset1”));<br>结果：6</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">  </span></span><br><span class="line"><span class="bullet">- </span>*<span class="strong">*Long zCard(K key);*</span>* </span><br><span class="line"><span class="code">  </span></span><br><span class="line"><span class="code">  获取有序集合的成员数</span></span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().zCard(“zset1”));<br>结果：6</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **<span class="built_in">Double</span> score(K <span class="keyword">key</span>, <span class="built_in">Object</span> o);**  </span><br><span class="line">  </span><br><span class="line">  获取指定成员的score值</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().score(“zset1”,”zset-1”));<br>结果：2.2</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **<span class="built_in">Long</span> removeRange(K <span class="keyword">key</span>, <span class="built_in">long</span> start, <span class="built_in">long</span> <span class="keyword">end</span>);**</span><br><span class="line">  </span><br><span class="line">  移除指定索引位置的成员，其中有序集成员按分数值递增(从小到大)顺序排列</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().range(“zset2”,0,-1));</p>
<pre><code>System.out.println(template.opsForZSet().removeRange(&quot;zset2&quot;,1,2));
System.out.println(template.opsForZSet().range(&quot;zset2&quot;,0,-1));
</code></pre><p>结果：[zset-1, zset-2, zset-3, zset-4]</p>
<pre><code>2
[zset-1, zset-4]
</code></pre><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Long removeRangeByScore(K <span class="built_in">key</span>, <span class="keyword">double</span> <span class="built_in">min</span>, <span class="keyword">double</span> <span class="built_in">max</span>);**</span><br><span class="line">  </span><br><span class="line">  根据指定的score值得范围来移除成员</span><br></pre></td></tr></table></figure>
<p>使用：//System.out.println(template.opsForZSet().add(“zset2”,”zset-1”,1.1));</p>
<pre><code>//System.out.println(template.opsForZSet().add(&quot;zset2&quot;,&quot;zset-2&quot;,1.2));
//System.out.println(template.opsForZSet().add(&quot;zset2&quot;,&quot;zset-3&quot;,2.3));
//System.out.println(template.opsForZSet().add(&quot;zset2&quot;,&quot;zset-4&quot;,6.6));
System.out.println(template.opsForZSet().range(&quot;zset2&quot;,0,-1));
System.out.println(template.opsForZSet().removeRangeByScore(&quot;zset2&quot;,2,3));
System.out.println(template.opsForZSet().range(&quot;zset2&quot;,0,-1));
</code></pre><p>结果：[zset-1, zset-2, zset-3,zset-4]</p>
<pre><code>    1
[zset-1, zset-2, zset-4]
</code></pre><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **Long unionAndStore(<span class="keyword">K</span> key, <span class="keyword">K</span> otherKey, <span class="keyword">K</span> destKey);** </span><br><span class="line">  </span><br><span class="line">  计算给定的一个有序集的并集，并存储在新的 destKey中，key相同的话会把score值相加</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().add(“zzset1”,”zset-1”,1.0));</p>
<pre><code>System.out.println(template.opsForZSet().add(&quot;zzset1&quot;,&quot;zset-2&quot;,2.0));
System.out.println(template.opsForZSet().add(&quot;zzset1&quot;,&quot;zset-3&quot;,3.0));
System.out.println(template.opsForZSet().add(&quot;zzset1&quot;,&quot;zset-4&quot;,6.0));

System.out.println(template.opsForZSet().add(&quot;zzset2&quot;,&quot;zset-1&quot;,1.0));
System.out.println(template.opsForZSet().add(&quot;zzset2&quot;,&quot;zset-2&quot;,2.0));
System.out.println(template.opsForZSet().add(&quot;zzset2&quot;,&quot;zset-3&quot;,3.0));
System.out.println(template.opsForZSet().add(&quot;zzset2&quot;,&quot;zset-4&quot;,6.0));
System.out.println(template.opsForZSet().add(&quot;zzset2&quot;,&quot;zset-5&quot;,7.0));
System.out.println(template.opsForZSet().unionAndStore(&quot;zzset1&quot;,&quot;zzset2&quot;,&quot;destZset11&quot;));

Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples = template.opsForZSet().rangeWithScores(&quot;destZset11&quot;,0,-1);
Iterator&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; iterator = tuples.iterator();
while (iterator.hasNext())
{
    ZSetOperations.TypedTuple&lt;Object&gt; typedTuple = iterator.next();
    System.out.println(&quot;value:&quot; + typedTuple.getValue() + &quot;score:&quot; + typedTuple.getScore());
}
</code></pre><p>结果：value:zset-1score:2.0</p>
<pre><code>value:zset-2score:4.0
value:zset-3score:6.0
value:zset-5score:7.0
value:zset-4score:12.0
</code></pre><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Long unionAndStore(<span class="keyword">K</span> key, Collection&lt;<span class="keyword">K</span>&gt; otherKeys, <span class="keyword">K</span> destKey);**</span><br><span class="line">  </span><br><span class="line">  计算给定的多个有序集的并集，并存储在新的 destKey中</span><br></pre></td></tr></table></figure>
<p>使用：//System.out.println(template.opsForZSet().add(“zzset1”,”zset-1”,1.0));</p>
<pre><code>//System.out.println(template.opsForZSet().add(&quot;zzset1&quot;,&quot;zset-2&quot;,2.0));
//System.out.println(template.opsForZSet().add(&quot;zzset1&quot;,&quot;zset-3&quot;,3.0));
//System.out.println(template.opsForZSet().add(&quot;zzset1&quot;,&quot;zset-4&quot;,6.0));
//
//System.out.println(template.opsForZSet().add(&quot;zzset2&quot;,&quot;zset-1&quot;,1.0));
//System.out.println(template.opsForZSet().add(&quot;zzset2&quot;,&quot;zset-2&quot;,2.0));
//System.out.println(template.opsForZSet().add(&quot;zzset2&quot;,&quot;zset-3&quot;,3.0));
//System.out.println(template.opsForZSet().add(&quot;zzset2&quot;,&quot;zset-4&quot;,6.0));
//System.out.println(template.opsForZSet().add(&quot;zzset2&quot;,&quot;zset-5&quot;,7.0));

System.out.println(template.opsForZSet().add(&quot;zzset3&quot;,&quot;zset-1&quot;,1.0));
System.out.println(template.opsForZSet().add(&quot;zzset3&quot;,&quot;zset-2&quot;,2.0));
System.out.println(template.opsForZSet().add(&quot;zzset3&quot;,&quot;zset-3&quot;,3.0));
System.out.println(template.opsForZSet().add(&quot;zzset3&quot;,&quot;zset-4&quot;,6.0));
System.out.println(template.opsForZSet().add(&quot;zzset3&quot;,&quot;zset-5&quot;,7.0));

List&lt;String&gt; stringList = new ArrayList&lt;String&gt;();
stringList.add(&quot;zzset2&quot;);
stringList.add(&quot;zzset3&quot;);
System.out.println(template.opsForZSet().unionAndStore(&quot;zzset1&quot;,stringList,&quot;destZset22&quot;));

Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples = template.opsForZSet().rangeWithScores(&quot;destZset22&quot;,0,-1);
Iterator&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; iterator = tuples.iterator();
while (iterator.hasNext())
{
    ZSetOperations.TypedTuple&lt;Object&gt; typedTuple = iterator.next();
    System.out.println(&quot;value:&quot; + typedTuple.getValue() + &quot;score:&quot; + typedTuple.getScore());
}
</code></pre><p>结果：value:zset-1score:3.0</p>
<pre><code>value:zset-2score:6.0
value:zset-3score:9.0
value:zset-5score:14.0
value:zset-4score:18.0
</code></pre><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br><span class="line">- **Long intersectAndStore(<span class="keyword">K</span> key, <span class="keyword">K</span> otherKey, <span class="keyword">K</span> destKey);**</span><br><span class="line">  </span><br><span class="line">  计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</span><br></pre></td></tr></table></figure>
<p>使用：System.out.println(template.opsForZSet().intersectAndStore(“zzset1”,”zzset2”,”destZset33”));</p>
<pre><code>Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples = template.opsForZSet().rangeWithScores(&quot;destZset33&quot;,0,-1);
Iterator&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; iterator = tuples.iterator();
while (iterator.hasNext())
{
    ZSetOperations.TypedTuple&lt;Object&gt; typedTuple = iterator.next();
    System.out.println(&quot;value:&quot; + typedTuple.getValue() + &quot;score:&quot; + typedTuple.getScore());
}
</code></pre><p>结果：value:zset-1score:2.0</p>
<pre><code>value:zset-2score:4.0
value:zset-3score:6.0
value:zset-4score:12.0
</code></pre><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **Long intersectAndStore(<span class="keyword">K</span> key, Collection&lt;<span class="keyword">K</span>&gt; otherKeys, <span class="keyword">K</span> destKey);**  </span><br><span class="line">  </span><br><span class="line">  计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</span><br></pre></td></tr></table></figure>
<p>使用：List<string> stringList = new ArrayList<string>();</string></string></p>
<pre><code>stringList.add(&quot;zzset2&quot;);
stringList.add(&quot;zzset3&quot;);
System.out.println(template.opsForZSet().intersectAndStore(&quot;zzset1&quot;,stringList,&quot;destZset44&quot;));

Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples = template.opsForZSet().rangeWithScores(&quot;destZset44&quot;,0,-1);
Iterator&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; iterator = tuples.iterator();
while (iterator.hasNext())
{
    ZSetOperations.TypedTuple&lt;Object&gt; typedTuple = iterator.next();
    System.out.println(&quot;value:&quot; + typedTuple.getValue() + &quot;score:&quot; + typedTuple.getScore());
}
</code></pre><p>结果：value:zset-1score:3.0</p>
<pre><code>value:zset-2score:6.0
value:zset-3score:9.0
value:zset-4score:18.0
</code></pre><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">-<span class="ruby"> **Cursor&lt;TypedTuple&lt;V<span class="meta">&gt;&gt; </span>scan(K key, ScanOptions options);** </span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">  遍历zset</span></span><br></pre></td></tr></table></figure>
<p>使用： Cursor<zsetoperations.typedtuple<object>&gt; cursor = template.opsForZSet().scan(“zzset1”, ScanOptions.NONE);</zsetoperations.typedtuple<object></p>
<pre><code>while (cursor.hasNext()){
    ZSetOperations.TypedTuple&lt;Object&gt; item = cursor.next();
    System.out.println(item.getValue() + &quot;:&quot; + item.getScore());
}
</code></pre><p>结果：zset-1:1.0</p>
<pre><code>zset-2:2.0
zset-3:3.0
zset-4:6.0
</code></pre><p>```</p>
</li>
</ul>
<blockquote>
<p>注：TimeUnit是java.util.concurrent包下面的一个类，表示给定单元粒度的时间段<br>常用的颗粒度</p>
<p>TimeUnit.DAYS //天</p>
<p>TimeUnit.HOURS //小时</p>
<p>TimeUnit.MINUTES //分钟</p>
<p>TimeUnit.SECONDS //秒</p>
<p>TimeUnit.MILLISECONDS //毫秒</p>
</blockquote>
<p><strong>本文转自简书：<a href="https://www.jianshu.com/p/7bf5dc61ca06" target="_blank" rel="noopener">如何使用RedisTemplate访问Redis数据结构</a></strong></p>
]]></content>
      
        <categories>
            
            <category> Redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot（十）之 RabbitMQ]]></title>
      <url>/2017/12/14/SpringBoot%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8B%20RabbitMQ/</url>
      <content type="html"><![CDATA[<p>本文要介绍的RabbitMQ是以AMQP协议实现的一种中间件产品，它可以支持多种操作系统，多种编程语言，几乎可以覆盖所有主流的企业级技术平台。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><p>在RabbitMQ官网的下载页面 <a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noopener">https://www.rabbitmq.com/download.html</a>中，我们可以获取到针对各种不同操作系统的安装包和说明文档。</p>
<p>由于我用的是MAC ，这里介绍怎么在MAC上安装RabbitMQ。</p>
<a id="more"></a>
<p>在Mac OS X中使用brew工具，可以很容易的安装RabbitMQ的服务端，只需要按如下命令操作即可：</p>
<ul>
<li>brew更新到最新版本，执行：<code>brew update</code></li>
<li>安装Erlang，执行：<code>brew install erlang</code></li>
<li>安装RabbitMQ Server，执行：<code>brew install rabbitmq</code></li>
</ul>
<p>我们这里说一下brew工具，这是他的 <a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">官网</a> , 它是macOS 缺失的软件包管理器，非常好用，官网有中文，不知道的可以自己研究一下，如果你的电脑没有安装brew, 官网有安装教程，这里也不再赘述。</p>
<p>BabbitMQ是基于Erlang，安装Erlang时为了避免未知报错。</p>
<p>通过上面的命令，RabbitMQ Server的命令会被安装到 <code>/usr/local/sbin</code>，并不会自动加到用户的环境变量中去，所以我们需要在<code>.bash_profile</code>文件中增加下面内容：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span><span class="symbol">:/usr/local/sbin</span></span><br></pre></td></tr></table></figure>
<p>打开 <code>.bash_profile</code></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span> .bash_profile</span><br></pre></td></tr></table></figure>
<p>输入下面的命令使修改生效</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure>
<p>这样，我们就可以通过 <code>rabbitmq-server</code> 命令来启动RabbitMQ的服务端了。</p>
<p>下图表示启动成功</p>
<p><img src="/2017/12/14/SpringBoot（十）之 RabbitMQ/1.png" alt=""></p>
<h3 id="RabbitMQ管理"><a href="#RabbitMQ管理" class="headerlink" title="RabbitMQ管理"></a><strong>RabbitMQ管理</strong></h3><p>我们可以直接通过配置文件的访问进行管理，也可以通过Web的访问进行管理。下面我们将介绍如何通过Web进行管理。</p>
<ul>
<li><p>执行 <code>rabbitmq-plugins enable rabbitmq_management</code> 命令，开启Web管理插件，这样我们就可以通过浏览器来进行管理了。</p>
<p>  <img src="/2017/12/14/SpringBoot（十）之 RabbitMQ/2.png" alt=""></p>
</li>
<li><p>打开浏览器并访问：<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a>， 并使用默认用户guest登录，密码也为guest。我们可以看到如下图的管理页面：</p>
<p>  <img src="/2017/12/14/SpringBoot（十）之 RabbitMQ/3.png" alt=""></p>
</li>
</ul>
<p>点击 <code>Admin</code> 标签，在这里可以进行用户的管理。</p>
<h3 id="与Spring-Boot整合"><a href="#与Spring-Boot整合" class="headerlink" title="与Spring Boot整合"></a><strong>与Spring Boot整合</strong></h3><p>下面，我们通过在Spring Boot应用中整合RabbitMQ，并实现一个简单的发送、接收消息的例子来对RabbitMQ有一个直观的感受和理解。</p>
<p>在Spring Boot中整合RabbitMQ是一件非常容易的事，下面我们就来详细说说整合过程：</p>
<ul>
<li>这次我们新建一个Spring Boot工程，命名为：“rabbitmq”</li>
<li><p>在pom.xml中引入如下依赖内容，其中spring-boot-starter-amqp用于支持RabbitMQ</p>
  <figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attribute">&lt;groupId&gt;</span>org.springframework.boot<span class="attribute">&lt;/groupId</span></span><br><span class="line"><span class="attribute">    &lt;artifactId&gt;</span>spring-boot-starter-amqp<span class="attribute">&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attribute">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>application.properties</code> 中配置关于RabbitMQ的连接和用户信息，用户可以回到上面的安装内容，在管理页面中创建用户,这里我们用默认的账号</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.application</span><span class="selector-class">.name</span>=rabbitmq</span><br><span class="line"></span><br><span class="line">spring<span class="selector-class">.rabbitmq</span><span class="selector-class">.host</span>=localhost</span><br><span class="line">spring<span class="selector-class">.rabbitmq</span><span class="selector-class">.port</span>=<span class="number">5672</span></span><br><span class="line">spring<span class="selector-class">.rabbitmq</span><span class="selector-class">.username</span>=guest</span><br><span class="line">spring<span class="selector-class">.rabbitmq</span><span class="selector-class">.password</span>=guest</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建消息生产者 <code>Sender</code>。通过注入 <code>AmqpTemplate</code> 接口的实例来实现消息的发送，<code>AmqpTemplate</code> 接口定义了一套针对AMQP协议的基础操作。在Spring Boot中会根据配置来注入其具体实现。在该生产者，我们会产生一个字符串，并发送到名为hello的队列中</p>
  <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sender</span> &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span>  AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">send</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        String context = <span class="string">"RabbitMQ"</span> + <span class="keyword">new</span> Date();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Sender : "</span> + context);</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">"hello"</span>, context);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建消息消费者 <code>Receiver</code>。通过 <code>@RabbitListener</code> 注解定义该类对hello队列的监听，并用 <code>@RabbitHandler</code> 注解来指定对消息的处理方法。所以，该消费者实现了对hello队列的消费，消费操作为输出消息的字符串内容。</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">process</span><span class="params">(String hello)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Receiver : "</span>+hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建RabbitMQ的配置类 <code>RabbitConfig</code>，用来配置队列、交换器、路由等高级信息。这里我们以入门为主，先以最小化的配置来定义，以完成一个基本的生产和消费过程。</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.amqp</span><span class="selector-class">.core</span><span class="selector-class">.Queue</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Bean</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Configuration</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Configuration</span></span><br><span class="line"><span class="keyword">public</span> class RabbitConfig &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Bean</span></span><br><span class="line">    public Queue helloQueue() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Queue</span>("<span class="selector-tag">hello</span>");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建单元测试类，用来调用消息生产：</p>
  <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="variable">@SpringBootTest</span></span><br><span class="line">public class RabbitmqApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private  Sender sender;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span>  <span class="selector-tag">void</span> <span class="selector-tag">test</span>()&#123;</span><br><span class="line">        <span class="selector-tag">sender</span><span class="selector-class">.send</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  完成程序编写之后，下面开始尝试运行。首先确保RabbitMQ Server已经开始，然后进行下面的操作：</p>
</li>
<li><p>启动应用主类，从控制台中，我们看到如下内容，程序创建了一个访问<code>127.0.0.1:5672</code> 中 <code>springcloud</code> 的连接。</p>
  <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Created <span class="keyword">new</span> connection: rabbitConnectionFactory<span class="string">#52100</span>cb8:<span class="number">0</span>/SimpleConnection@<span class="number">184</span>db0f4 [<span class="keyword">delegate</span>=amqp:<span class="comment">//guest@127.0.0.1:5672/, localPort= 62685]</span></span><br></pre></td></tr></table></figure>
<p>  同时，我们通过RabbitMQ的控制面板，可以看到Connection和Channels中包含当前连接的条目。</p>
</li>
<li><p>运行单元测试类，我们可以看到控制台中输出下面的内容，消息被发送到了RabbitMQ Server的hello队列中。</p>
  <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sender : <span class="type">RabbitMQ</span><span class="comment">----------------------Thu Dec 14 18:44:16 CST 2017</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到应用主类的控制台，我们可以看到类似如下输出，消费者对hello队列的监听程序执行了，并输出了接受到的消息信息</p>
  <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Receiver : <span class="type">RabbitMQ</span><span class="comment">----------------------Thu Dec 14 18:44:16 CST 2017</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>通过上面的示例，我们在Spring Boot应用中引入spring-boot-starter-amqp模块，进行简单配置就完成了对RabbitMQ的消息生产和消费的开发内容。然而在实际应用中，我们还有很多内容没有演示，这里不做更多的讲解，读者可以自行查阅RabbitMQ的官方教程，有更全面的了解。</p>
]]></content>
      
        <categories>
            
            <category> SpringBoot系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot（九）之 事务管理]]></title>
      <url>/2017/12/14/SpringBoot%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8B%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a><strong>什么是事务？</strong></h3><p>我们在开发企业应用时，对于业务人员的一个操作实际是对数据读写的多步操作的结合。由于数据操作在顺序执行的过程中，任何一步操作都有可能发生异常，异常会导致后续操作无法完成，此时由于业务逻辑并未正确的完成，之前成功操作数据的并不可靠，需要在这种情况下进行回退。</p>
<p>事务的作用就是为了保证用户的每一个操作都是可靠的，事务中的每一步操作都必须成功执行，只要有发生异常就回退到事务开始未进行操作的状态。</p>
<a id="more"></a>
<p>事务管理是Spring框架中最为常用的功能之一，我们在使用Spring Boot开发应用时，大部分情况下也都需要使用事务</p>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a><strong>快速入门</strong></h3><p>在Spring Boot中，当我们使用了spring-boot-starter-jdbc或spring-boot-starter-data-jpa依赖的时候，框架会自动默认分别注入<code>DataSourceTransactionManager</code>或 <code>JpaTransactionManager</code>。所以我们不需要任何额外配置就可以用 <code>@Transactional</code> 注解进行事务的使用。</p>
<p>我们用之前的项目作为基础模版，我们引入了spring-data-jpa，并创建了User实体以及对User的数据访问对象UserRepository，在ApplicationTest类中实现了使用UserRepository进行数据读写的单元测试用例，如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootTest</span></span><br><span class="line"><span class="variable">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line">public class DemoApplicationTests &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">true<span class="variable">@Autowired</span></span><br><span class="line">trueUserRepository  userRepository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">true<span class="variable">@Test</span></span><br><span class="line">truepublic  void  test ()&#123;</span><br><span class="line"></span><br><span class="line">truetrue<span class="comment">//创建5条数据</span></span><br><span class="line">truetrue<span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"a"</span>,<span class="string">"110"</span>));</span><br><span class="line">truetrue<span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"b"</span>,<span class="string">"112"</span>));</span><br><span class="line">truetrue<span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"c"</span>,<span class="string">"114"</span>));</span><br><span class="line">truetrue<span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"d"</span>,<span class="string">"115"</span>));</span><br><span class="line">truetrue<span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"e"</span>,<span class="string">"119"</span>));</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，在这个单元测试用例中，使用UserRepository对象连续创建了5个User实体到数据库中，下面我们人为的来制造一些异常，看看会发生什么情况。</p>
<p>通过定义User的userName属性长度为5，这样通过创建时User实体的userName属性超长就可以触发异常产生。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="built_in">Long</span>  id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, length = 5)</span></span><br><span class="line">    <span class="keyword">private</span>  String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span>  String passWord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  User()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User(String userName, String passWord) &#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.passWord = passWord;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改测试用例中创建记录的语句，将一条记录的userName长度超过5，如下：userName为AAAAAAAAAAAAAA的User对象将会抛出异常。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span>  test ()&#123;</span><br><span class="line"></span><br><span class="line">true<span class="comment">//创建5条数据</span></span><br><span class="line">trueuserRepository.<span class="built_in">save</span>(<span class="keyword">new</span> User(<span class="string">"a"</span>,<span class="string">"110"</span>));</span><br><span class="line">trueuserRepository.<span class="built_in">save</span>(<span class="keyword">new</span> User(<span class="string">"b"</span>,<span class="string">"112"</span>));</span><br><span class="line">trueuserRepository.<span class="built_in">save</span>(<span class="keyword">new</span> User(<span class="string">"c"</span>,<span class="string">"114"</span>));</span><br><span class="line">trueuserRepository.<span class="built_in">save</span>(<span class="keyword">new</span> User(<span class="string">"AAAAAAAAAAAAAA"</span>,<span class="string">"115"</span>));</span><br><span class="line">trueuserRepository.<span class="built_in">save</span>(<span class="keyword">new</span> User(<span class="string">"e"</span>,<span class="string">"119"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行测试用例，可以看到控制台中抛出了如下异常，userName字段超长：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.MysqlDataTruncation</span>: Data truncation: Data too long <span class="keyword">for</span> column <span class="string">'user_name'</span> at row <span class="number">1</span></span><br><span class="line">trueat com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.MysqlIO</span><span class="selector-class">.checkErrorPacket</span>(MysqlIO<span class="selector-class">.java</span>:<span class="number">3971</span>)</span><br><span class="line">trueat com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.MysqlIO</span><span class="selector-class">.checkErrorPacket</span>(MysqlIO<span class="selector-class">.java</span>:<span class="number">3909</span>)</span><br><span class="line">trueat com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.MysqlIO</span><span class="selector-class">.sendCommand</span>(MysqlIO<span class="selector-class">.java</span>:<span class="number">2527</span>)</span><br><span class="line">trueat com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.MysqlIO</span><span class="selector-class">.sqlQueryDirect</span>(MysqlIO<span class="selector-class">.java</span>:<span class="number">2680</span>)</span><br><span class="line">trueat com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.ConnectionImpl</span><span class="selector-class">.execSQL</span>(ConnectionImpl<span class="selector-class">.java</span>:<span class="number">2487</span>)</span><br></pre></td></tr></table></figure>
<p>此时查数据库中，创建了userName从a到c的记录，没有AAAAAAAAAAAAAA,e的记录。而若这是一个希望保证完整性操作的情况下，a到c的记录希望能在发生异常的时候被回退，这时候就可以使用事务让它实现回退，做法非常简单，我们只需要在test函数上添加<code>@Transactional</code>注解即可。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Test</span></span><br><span class="line"><span class="variable">@Transactional</span></span><br><span class="line">public  void  test ()&#123;</span><br><span class="line">    <span class="comment">//创建5条数据</span></span><br><span class="line">    <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"a"</span>,<span class="string">"110"</span>));</span><br><span class="line">    <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"b"</span>,<span class="string">"112"</span>));</span><br><span class="line">    <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"c"</span>,<span class="string">"114"</span>));</span><br><span class="line">    <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"AAAAAAAAAAAAAA"</span>,<span class="string">"115"</span>));</span><br><span class="line">    <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"e"</span>,<span class="string">"119"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们把刚刚插入的数据删掉，从新执行测试用例。再看数据库中，User表就没有a到c的用户数据了，成功实现了自动回滚。</p>
<p>这里主要通过单元测试演示了如何使用<code>@Transactional</code>注解来声明一个函数需要被事务管理，通常我们单元测试为了保证每个测试之间的数据独立，会使用<code>@Rollback</code>注解让每个单元测试都能在结束时回滚。而真正在开发业务逻辑时，我们通常在service层接口中使用<code>@Transactional</code>来对各个业务逻辑进行事务管理的配置。</p>
<h3 id="事务详解"><a href="#事务详解" class="headerlink" title="事务详解"></a><strong>事务详解</strong></h3><p>上面的例子中我们使用了默认的事务配置，可以满足一些基本的事务需求，但是当我们项目较大较复杂时（比如，有多个数据源等），这时候需要在声明事务时，指定不同的事务管理器。在声明事务时，只需要通过value属性指定配置的事务管理器名即可，例如：</p>
<p><code>@Transactional(value=&quot;transactionManagerPrimary&quot;)。</code></p>
<p>除了指定不同的事务管理器之后，还能对事务进行隔离级别和传播行为的控制，下面分别详细解释：</p>
<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a><strong>隔离级别</strong></h4><p>我们可以<code>org.springframework.transaction.annotation.Isolation</code>枚举类中定义了五个表示隔离级别的值：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Isolation</span> &#123;</span></span><br><span class="line">    DEFAULT(-<span class="number">1</span>),</span><br><span class="line">    READ_UNCOMMITTED(<span class="number">1</span>),</span><br><span class="line">    READ_COMMITTED(<span class="number">2</span>),</span><br><span class="line">    REPEATABLE_READ(<span class="number">4</span>),</span><br><span class="line">    SERIALIZABLE(<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是：READ_COMMITTED。</li>
<li>READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。</li>
<li>READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</li>
<li>REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读</li>
<li>SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>
</ul>
<p>指定方法：通过使用isolation属性设置，例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Transactional</span>(<span class="keyword">isolation</span> = Isolation.READ_COMMITTED)</span><br></pre></td></tr></table></figure>
<h4 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a><strong>传播行为</strong></h4><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。</p>
<p>我们可以看<code>org.springframework.transaction.annotation.Propagation</code>枚举类中定义了7个表示传播行为的枚举值：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Propagation</span> &#123;</span></span><br><span class="line">    REQUIRED(<span class="number">0</span>),</span><br><span class="line">    SUPPORTS(<span class="number">1</span>),</span><br><span class="line">    MANDATORY(<span class="number">2</span>),</span><br><span class="line">    REQUIRES_NEW(<span class="number">3</span>),</span><br><span class="line">    NOT_SUPPORTED(<span class="number">4</span>),</span><br><span class="line">    NEVER(<span class="number">5</span>),</span><br><span class="line">    NESTED(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li>
<li>SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>
<li>MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li>
<li>REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>
<li>NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>
<li>NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li>
<li>NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于REQUIRED。</li>
</ul>
<p>指定方法：通过使用propagation属性设置，例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Transactional</span>(<span class="keyword">propagation</span> = Propagation.REQUIRED)</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> SpringBoot系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot（八）之 整合 MyBatis]]></title>
      <url>/2017/12/13/SpringBoot%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8B%20%E6%95%B4%E5%90%88%20MyBatis/</url>
      <content type="html"><![CDATA[<p>现在大部分的项目还是整合的mybatis，下边我们就学习SpringBoot整合MyBatis。使用的项目基础是我们之前的教程中一步一步建立起来的。</p>
<ul>
<li><p><code>pom.xml</code> 中引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 这里不引入spring-boot-starter-jdbc依赖，是由于mybatis-spring-boot-starter中已经包含了此依赖</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>同之前介绍的使用spring-data连接数据库一样，在<code>application.properties</code>中配置mysql的连接配置</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.url</span>=jdbc:mysql:<span class="comment">//localhost:3306/demo</span></span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.username</span>=root</span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.password</span>=root</span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.driver-class-name</span>=com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.Driver</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在Mysql中创建product表，包含id(bigint)、name(varcher)、colour(varcher)字段。同时，创建映射对象Product</p>
  <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Data <span class="comment">//此注解为lombok</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">String</span>  colour;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Product映射的操作ProductMapper，为了后续单元测试验证，实现插入和查询操作</p>
  <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Mapper</span></span><br><span class="line">public interface ProductMapper &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">@Insert</span>(<span class="string">"insert into product(name, colour) values(#&#123;name&#125;, #&#123;colour&#125;)"</span>)</span><br><span class="line">int insert(<span class="variable">@Param</span>(<span class="string">"name"</span>) String name, <span class="variable">@Param</span>(<span class="string">"colour"</span>) String colour);</span><br><span class="line"></span><br><span class="line"><span class="variable">@Select</span>(<span class="string">"select * from product where name = #&#123;name&#125;"</span>)</span><br><span class="line">Product getProductByName(<span class="variable">@Param</span>(<span class="string">"name"</span>) String name);</span><br><span class="line"></span><br><span class="line"><span class="variable">@Update</span>(<span class="string">"update product set colour = #&#123;colour&#125; where name =#&#123;name&#125;"</span>)</span><br><span class="line">int updateColourByName(<span class="variable">@Param</span>(<span class="string">"name"</span>) String name , <span class="variable">@Param</span>(<span class="string">"colour"</span>) String colour);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  接下来，我们分别来介绍下这个注解方式。</p>
<p>  Mybatis注解的方式很简单，只要定义一个dao接口，然后sql语句通过注解写在接口方法上。最后给这个接口添加@Mapper注解就行了。如上图。</p>
<p>  简单的语句只需要使用@Insert、@Update、@Delete、@Select这4个注解即可。</p>
</li>
<li><p>创建测试</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    	<span class="meta">@Autowired</span></span><br><span class="line">    	<span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    	<span class="meta">@Test</span></span><br><span class="line">    	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    		productMapper.insert(<span class="string">"红桃A"</span>, <span class="string">"red"</span>);</span><br><span class="line">    	&#125;</span><br><span class="line">    </span><br><span class="line">    	<span class="meta">@Test</span></span><br><span class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getProductByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    		Product  p  = productMapper.getProductByName(<span class="string">"红桃A"</span>);</span><br><span class="line">    	&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    	<span class="meta">@Test</span></span><br><span class="line">    	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    		productMapper.updateColourByName(<span class="string">"红桃A"</span>, <span class="string">"blue"</span>);</span><br><span class="line">    	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分页插件</p>
<p>  <code>pom.xml</code>中添加依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>  然后你只需在查询list之前使用PageHelper.startPage(int pageNum, int pageSize)方法即可。pageNum是第几页，pageSize是每页多少条。</p>
<p>  分页插件PageHelper项目地址： <a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> SpringBoot系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot（七）之 Spring-data-jpa]]></title>
      <url>/2017/12/06/SpringBoot%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%20Spring-data-jpa/</url>
      <content type="html"><![CDATA[<p>Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它为Java开发人员提供了一种对象/关联映射工具来管理Java应用中的关系数据。提供了包括增删改查等在内的常用功能，且易于扩展。学习并使用 Spring Data JPA 可以极大提高开发效率,他的出现主要是为了简化现有的持久化开发工作和整合ORM技术,值得注意的是，JPA是在充分吸收了现有Hibernate，TopLink，JDO等ORM框架的基础上发展而来的，具有易于使用，伸缩性强等优点 。</p>
<a id="more"></a>
<h4 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a><strong>工程配置</strong></h4><p>在pom.xml中添加相关依赖，加入以下内容</p>
<figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">&lt;dependency</span></span><br><span class="line"><span class="attribute">    &lt;groupId&gt;</span>org.springframework.boot<span class="attribute">&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attribute">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="attribute">&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attribute">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attribute">&lt;groupId&gt;</span>org.springframework.boot<span class="attribute">&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attribute">&lt;artifactId&gt;</span>spring-boot-starter-jdbc<span class="attribute">&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attribute">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attribute">&lt;groupId&gt;</span>mysql<span class="attribute">&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attribute">&lt;artifactId&gt;</span>mysql-connector-java<span class="attribute">&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attribute">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>application.properties</code>中配置：数据库连接信息（自动创建表结构的设置，例如使用mysql的情况如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.url</span>=jdbc:mysql:<span class="comment">//localhost:3306/demo</span></span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.username</span>=root </span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.password</span>=root</span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.driver-class-name</span>=com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.Driver</span></span><br><span class="line"></span><br><span class="line">spring<span class="selector-class">.jpa</span><span class="selector-class">.properties</span><span class="selector-class">.hibernate</span><span class="selector-class">.hbm2ddl</span><span class="selector-class">.auto</span>=create-drop</span><br></pre></td></tr></table></figure>
<p><code>spring.jpa.properties.hibernate.hbm2ddl.auto</code>是hibernate的配置属性，其主要作用是：自动创建、更新、验证数据库表结构。该参数的几种配置如下：</p>
<p><code>create</code>：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。</p>
<p><code>create-drop</code>：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。</p>
<p><code>update</code>：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。</p>
<p><code>validate</code>：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</p>
<h4 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a><strong>创建实体</strong></h4><p>创建一个User实体，包含id（主键）、userName（姓名）、passWord（密码）属性，通过ORM框架其会被映射到数据库表中，由于配置了<code>hibernate.hbm2ddl.auto</code>，在应用启动的时候框架会自动去数据库中创建对应的表。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="built_in">Long</span>  id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span>  String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span>  String passWord;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User(String userName, String passWord) &#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.passWord = passWord;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建数据访问接口"><a href="#创建数据访问接口" class="headerlink" title="创建数据访问接口"></a><strong>创建数据访问接口</strong></h4><p>下面针对User实体创建对应的<code>Repository</code>接口实现对该实体的数据访问，如下代码：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>UserRepository extends JpaRepository&lt;User, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> User </span>findByUserName(String userName);</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> User </span>findByUserNameAndPassWord(String userName, String passWord);</span><br><span class="line"></span><br><span class="line">    @Query(<span class="string">"from User u where u.userName=:userName"</span>)</span><br><span class="line">   <span class="built_in"> User </span>findUser(@Param(<span class="string">"userName"</span>) String userName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Spring-data-jpa中，只需要编写类似上面这样的接口就可实现数据访问。不再像我们以往编写了接口时候还需要自己编写接口实现类</p>
<p>下面对上面的<code>UserRepository</code>做一些解释，该接口继承自<code>JpaRepository</code>，通过查看<code>JpaRepository</code>接口的<a href="https://docs.spring.io/spring-data/data-jpa/docs/current/api/" target="_blank" rel="noopener">API文档</a>，可以看到该接口本身已经实现了创建（save）、更新（save）、删除（delete）、查询（findAll、findOne）等基本操作的函数，因此对于这些基础操作的数据访问就不需要开发者再自己定义。</p>
<p>在上例中，我们可以看到下面两个函数：</p>
<ul>
<li>User findByUserName(String userName)</li>
<li>User findByUserNameAndPassWord(String userName, String passWord)</li>
</ul>
<p>它们分别实现了按userName查询User实体和按userName和passWord查询User实体，可以看到我们这里没有任何类SQL语句就完成了两个条件查询方法。这就是Spring-data-jpa的一大特性：<strong>通过解析方法名创建查询。</strong></p>
<p>除了通过解析方法名来创建查询外，它也提供通过使用@Query 注解来创建查询，您只需要编写JPQL语句，并通过类似“:name”来映射@Param指定的参数，就像例子中的第三个findUser函数一样。</p>
<h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a><strong>单元测试</strong></h4><p>在完成了上面的数据访问接口之后,我们编写对应的单元测试来验证编写的内容是否正确,我们在测试类中编写如下代码</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> DemoApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> testJpa()&#123;</span><br><span class="line">        <span class="comment">//创建5条数据</span></span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"a"</span>,<span class="string">"110"</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"b"</span>,<span class="string">"112"</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"c"</span>,<span class="string">"114"</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"d"</span>,<span class="string">"115"</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"e"</span>,<span class="string">"119"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试findAll, 查询所有记录</span></span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">count</span>  = userRepository.<span class="keyword">findAll</span>().<span class="keyword">size</span>();</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">count</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//测试findByUserName, 查询姓名为a的User</span></span><br><span class="line">        User user =  userRepository.findByUserName(<span class="string">"a"</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试findByUserNameAndPassWord, 查询姓名为e密码为119的User</span></span><br><span class="line">        user = userRepository.findByUserNameAndPassWord(<span class="string">"e"</span>, <span class="string">"119"</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试findUser, 查询姓名为b的User</span></span><br><span class="line">        user = userRepository.findUser(<span class="string">"b"</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试删除姓名为c的User</span></span><br><span class="line">        userRepository.<span class="keyword">delete</span>(userRepository.findByUserName(<span class="string">"c"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试findAll, 查询所有记录, 验证上面的删除是否成功</span></span><br><span class="line">        <span class="keyword">count</span> = userRepository.<span class="keyword">findAll</span>().<span class="keyword">size</span>();</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">count</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2017/12/06/SpringBoot（七）之 Spring-data-jpa/1.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> SpringBoot系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot（六）之 使用Swagger2构建RESTful API]]></title>
      <url>/2017/12/05/SpringBoot%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%20%E4%BD%BF%E7%94%A8Swagger2%E6%9E%84%E5%BB%BARESTful%20API/</url>
      <content type="html"><![CDATA[<p>由于Spring Boot能够快速开发、便捷部署等特性，相信有很大一部分Spring Boot的用户会用来构建RESTful API。</p>
<p>传统做法我们会创建一份RESTful API文档来记录所有接口细节，然而这样的做法有以下几个问题：</p>
<ul>
<li>由于接口众多，并且细节复杂，高质量地创建这份文档本身就是件非常吃力的事。</li>
<li>随着时间推移，不断修改接口实现的时候都必须同步修改接口文档，而文档与代码又处于两个不同的媒介，除非有严格的管理机制，不然很容易导致不一致现象。</li>
</ul>
<a id="more"></a>
<p>为了解决上面这样的问题，本文将介绍RESTful API的好伙伴Swagger2，它可以轻松的整合到Spring Boot中，并与Spring MVC程序配合组织出强大RESTful API文档。它既可以减少我们创建文档的工作量，同时说明内容又整合入实现代码中，让维护文档和修改代码整合为一体，可以让我们在修改代码逻辑的同时方便的修改文档说明。另外Swagger2也提供了强大的页面测试功能来调试每个RESTful API</p>
<p>下面来具体介绍，如果在Spring Boot中使用Swagger2</p>
<h4 id="添加Swagger2依赖"><a href="#添加Swagger2依赖" class="headerlink" title="添加Swagger2依赖"></a><strong>添加Swagger2依赖</strong></h4><p>在pom.xml中加入Swagger2的依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="创建Swagger2配置类"><a href="#创建Swagger2配置类" class="headerlink" title="创建Swagger2配置类"></a><strong>创建Swagger2配置类</strong></h4><p>在<code>DemoApplication.java</code>同级创建<code>Swagger2</code>的配置类<code>Swagger</code></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@EnableSwagger2</span></span><br><span class="line">public class Swagger &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">@Bean</span></span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="selector-class">.apiInfo</span>(apiInfo())</span><br><span class="line">                <span class="selector-class">.select</span>()</span><br><span class="line">                <span class="selector-class">.apis</span>(RequestHandlerSelectors.basePackage(<span class="string">"com.xiaosa.demo"</span>))</span><br><span class="line">                <span class="selector-class">.paths</span>(PathSelectors.any())</span><br><span class="line">                <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">ApiInfo</span> <span class="selector-tag">apiInfo</span>() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">ApiInfoBuilder</span>()</span><br><span class="line">                <span class="selector-class">.title</span>(<span class="string">"Spring Boot中使用Swagger2构建RESTful API"</span>)</span><br><span class="line">                <span class="selector-class">.description</span>(<span class="string">"更多Spring Boot相关文章请关注：http://litxiaosa.me"</span>)</span><br><span class="line">                <span class="selector-class">.termsOfServiceUrl</span>(<span class="string">"http://litxiaosa.me/"</span>)</span><br><span class="line">                <span class="selector-class">.contact</span>(<span class="string">"潇洒"</span>)</span><br><span class="line">                <span class="selector-class">.version</span>(<span class="string">"1.0"</span>)</span><br><span class="line">                <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上代码所示，通过<code>@Configuration</code>注解，让Spring来加载该类配置。再通过<code>@EnableSwagger2</code>注解来启用Swagger2。</p>
<p>再通过<code>createRestApi</code>函数创建<code>Docket</code>的Bean之后，<code>apiInfo()</code>用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。select()函数返回一个<code>ApiSelectorBuilder</code>实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被<code>@ApiIgnore</code>指定的请求）。</p>
<h4 id="添加文档内容"><a href="#添加文档内容" class="headerlink" title="添加文档内容"></a><strong>添加文档内容</strong></h4><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们通过<code>@ApiOperation</code>注解来给API增加说明、通过<code>@ApiImplicitParams</code>、<code>@ApiImplicitParam</code>注解来给参数增加说明</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"/users"</span>)</span> <span class="comment">// 通过这里配置使下面的映射都在/users下，可去除</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    static Map&lt;<span class="built_in">Long</span>, User&gt; users = Collections.synchronizedMap(new HashMap&lt;<span class="built_in">Long</span>, User&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"获取用户列表"</span>, notes=<span class="meta-string">""</span>)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = <span class="meta-string">"getUserList"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; getUserList() &#123;</span><br><span class="line">        List&lt;User&gt; user = new ArrayList&lt;User&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"创建用户"</span>, notes=<span class="meta-string">"根据User对象创建用户"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"user"</span>, value = <span class="meta-string">"用户详细实体user"</span>, required = true, dataType = <span class="meta-string">"User"</span>)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = <span class="meta-string">"createUser"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String createUser(<span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"获取用户详细信息"</span>, notes=<span class="meta-string">"根据url的id来获取用户详细信息"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"用户ID"</span>, required = true, dataType = <span class="meta-string">"Long"</span>)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = <span class="meta-string">"getUser"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> User getUser(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id) &#123;</span><br><span class="line">        <span class="keyword">return</span> users.<span class="keyword">get</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"删除用户"</span>, notes=<span class="meta-string">"根据user的id来指定删除对象"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"用户ID"</span>, required = true, dataType = <span class="meta-string">"Long"</span>)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(value = <span class="meta-string">"deleteUser"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String deleteUser(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id) &#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成上述代码添加上，启动Spring Boot程序，访问：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> 就能看到前文所展示的RESTful API的页面。</p>
<p><img src="/2017/12/05/SpringBoot（六）之 使用Swagger2构建RESTful API/1.png" alt=""></p>
<p>我们可以再点开具体的API请求，以POST类型的/users请求为例，可找到上述代码中我们配置的Notes信息以及参数user的描述信息，如下图所示。</p>
<p><img src="/2017/12/05/SpringBoot（六）之 使用Swagger2构建RESTful API/2.png" alt=""></p>
<h4 id="API文档访问与调试"><a href="#API文档访问与调试" class="headerlink" title="API文档访问与调试"></a><strong>API文档访问与调试</strong></h4><p>在上图请求的页面中，我们看到user的Value是个输入框？是的，Swagger除了查看接口功能外，还提供了调试测试功能，我们可以点击上图中右侧的Model Schema（黄色区域：它指明了User的数据结构），此时Value中就有了user对象的模板，我们只需要稍适修改，点击下方“Try it out！”按钮，即可完成了一次请求调用！</p>
<p>相比为这些接口编写文档的工作，我们增加的配置内容是非常少而且精简的，对于原有代码的侵入也在忍受范围之内。因此，在构建RESTful API的同时，加入swagger来对API文档进行管理，是个不错的选择。</p>
]]></content>
      
        <categories>
            
            <category> SpringBoot系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot（五）之 统一异常处理]]></title>
      <url>/2017/12/05/SpringBoot%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%20%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>我们在做Web应用的时候，请求处理过程中发生错误是非常常见的情况。Spring Boot提供了一个默认的映射：/error，当处理中抛出异常之后，会转到该请求中处理，并且该请求有一个全局的错误页面用来展示异常内容。</p>
<p>我们写一个一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaosa</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">error</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"发生错误！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>此时，可以看到类似下面的报错页面，该页面就是Spring Boot提供的默认error映射页面。</p>
<p><img src="/2017/12/05/SpringBoot（五）之 统一异常处理/1.png" alt=""></p>
<p>虽然，Spring Boot中实现了默认的error映射，但是在实际应用中，上面的错误页面对用户来说并不够友好，我们通常需要去实现我们自己的异常提示。</p>
<ul>
<li><p>创建全局异常处理类：通过使用<code>@ControllerAdvice</code>定义统一的异常处理类，而不是在每个<code>Controller</code>中逐个定义。<code>@ExceptionHandler</code>用来定义函数针对的异常类型，最后将<code>Exception</code>对象和请求URL映射到<code>error.html</code>中</p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_ERROR_VIEW = <span class="string">"error"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception.<span class="keyword">class</span>)</span><br><span class="line">    <span class="keyword">public</span> ModelAndView defaultErrorHandler(HttpServletRequest req, Exception e) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.addObject(<span class="string">"exception"</span>, e);</span><br><span class="line">        mav.addObject(<span class="string">"url"</span>, req.getRequestURL());</span><br><span class="line">        mav.setViewName(DEFAULT_ERROR_VIEW);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现<code>error.html</code>页面展示：在<code>templates</code>目录下创建<code>error.html</code>，将请求的URL和Exception对象的message输出。</p>
  <figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>统一异常处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Error Handler<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;exception.message&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>启动该应用，访问：<a href="http://localhost:8080/hello，可以看到如下错误提示页面" target="_blank" rel="noopener">http://localhost:8080/hello，可以看到如下错误提示页面</a>:</p>
<p><img src="/2017/12/05/SpringBoot（五）之 统一异常处理/2.png" alt=""></p>
<p>通过实现上述内容之后，我们只需要在<code>Controller</code>中抛出<code>Exception</code>，当然我们可能会有多种不同的<code>Exception</code>。然后在<code>@ControllerAdvice</code>类中，根据抛出的具体<code>Exception</code>类型匹配<code>@ExceptionHandler</code>中配置的异常类型来匹配错误映射和处理。</p>
]]></content>
      
        <categories>
            
            <category> SpringBoot系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot（四）之 静态资源和拦截器]]></title>
      <url>/2017/12/05/SpringBoot%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%20%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>本章我们来介绍下SpringBoot对静态资源的支持以及很重要的一个类<code>WebMvcConfigurerAdapter</code></p>
<p>通常情况下，Spring Boot的自动配置是符合我们大多数需求的。在你既需要保留Spring Boot提供的便利，有需要增加自己的额外的配置的时候，可以定义一个配置类并继承WebMvcConfigurerAdapter，重写这个类中的方法可以让我们增加额外的配置</p>
<a id="more"></a>
<h4 id="自定义资源映射addResourceHandlers"><a href="#自定义资源映射addResourceHandlers" class="headerlink" title="自定义资源映射addResourceHandlers"></a><strong>自定义资源映射addResourceHandlers</strong></h4><p>比如，我们想自定义静态资源映射目录的话，只需重写addResourceHandlers方法即可。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author xiaosa</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置静态访问资源</span></span><br><span class="line"><span class="comment">     * @param registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void addResourceHandlers(<span class="type">ResourceHandlerRegistry</span> registry) &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"image/**"</span>).addResourceLocations(<span class="string">"classpath:/image/"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过<code>addResourceHandler</code>添加映射路径，然后通过<code>addResourceLocations</code>来指定路径。我们访问自定义<code>image</code>文件夹中的a.jpg 图片的地址为 <a href="http://localhost:8080/image/a.jpg" target="_blank" rel="noopener">http://localhost:8080/image/a.jpg</a></p>
<p>addResourceLocations指的是文件放置的目录，addResoureHandler指的是对外暴露的访问路径</p>
<h4 id="页面跳转addViewControllers"><a href="#页面跳转addViewControllers" class="headerlink" title="页面跳转addViewControllers"></a><strong>页面跳转addViewControllers</strong></h4><p>SpringBoot 中，重写<code>WebMvcConfigurerAdapter</code>中的<code>addViewControllers</code>方法即可达到效果</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面跳转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addViewController(<span class="string">"login"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">    <span class="keyword">super</span>.addViewControllers(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里重写<code>addViewControllers</code>方法，并不会覆盖<code>WebMvcAutoConfiguration</code>中的<code>addViewControllers</code>（在此方法中，Spring Boot将“/”映射至index.html），这也就意味着我们自己的配置和Spring Boot的自动配置同时有效，这也是我们推荐添加自己的MVC配置的方式。  </p>
<h4 id="拦截器addInterceptors"><a href="#拦截器addInterceptors" class="headerlink" title="拦截器addInterceptors"></a><strong>拦截器addInterceptors</strong></h4><p>拦截器在我们项目中经常使用的，这里就来介绍下最简单的判断是否登录的使用。<br>要实现拦截器功能需要完成以下2个步骤：</p>
<ul>
<li>创建我们自己的拦截器类并实现 HandlerInterceptor 接口</li>
<li>重写WebMvcConfigurerAdapter中的addInterceptors方法把自定义的拦截器类添加进来</li>
</ul>
<p>第一步：自定义拦截器</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokingInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = (User)request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            response.sendRedirect(<span class="string">"login"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们简单实现了根据session中是否有User对象来判断是否登录，为空就跳转到登录页，不为空就通过。</p>
<p>第二步：重写<code>WebMvcConfigurerAdapter</code>中的<code>addInterceptors</code>方法</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// addPathPatterns 用于添加拦截规则</span></span><br><span class="line">    <span class="comment">// excludePathPatterns 用户排除拦截</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> InvokingInterceptor())</span><br><span class="line">            .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">"/toLogin"</span>,<span class="string">"/login"</span>);</span><br><span class="line">    <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样拦截器就写完了。</p>
<p><strong>页面登录代码</strong></p>
<p>html:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">meta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span> = <span class="string">"userName"</span> <span class="attr">required</span>=<span class="string">"required"</span> <span class="attr">placeholder</span> = <span class="string">"用户名"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span> = <span class="string">"password"</span> <span class="attr">required</span>=<span class="string">"required"</span> <span class="attr">placeholder</span> = <span class="string">"密码"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span> = <span class="string">"submit"</span> <span class="attr">id</span> = <span class="string">"toLogin"</span> &gt;</span>登陆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/login.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#toLogin"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type : <span class="string">"post"</span>,</span><br><span class="line">        url : <span class="string">"/toLogin"</span>,</span><br><span class="line">        data : &#123;</span><br><span class="line">            <span class="string">"userName"</span> : $(<span class="string">"#userName"</span>).val(),</span><br><span class="line">            <span class="string">"password"</span> : $(<span class="string">"#password"</span>).val()</span><br><span class="line">        &#125;,</span><br><span class="line">        success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (data.result == <span class="string">"0"</span>) &#123;</span><br><span class="line">                <span class="built_in">window</span>.location.href =<span class="string">"/learn"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">"账号密码不能为空！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>控制层代码</strong></p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登陆</span></span><br><span class="line"><span class="comment">     * @param request</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @RequestMapping(value = <span class="string">"/toLogin"</span>, method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; login(HttpServletRequest request, <span class="keyword">String</span> userName, <span class="keyword">String</span> password)&#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; map = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span>(!userName.equals(<span class="string">""</span>) &amp;&amp; password!=<span class="string">""</span>)&#123;</span><br><span class="line">            User user =<span class="keyword">new</span> <span class="type">User</span>(userName,password);</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">            map.put(<span class="string">"result"</span>,<span class="string">"0"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(<span class="string">"result"</span>,<span class="string">"-1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/learn"</span>)</span><br><span class="line">    <span class="keyword">public</span> ModelAndView index ()&#123;</span><br><span class="line">        List&lt;LearnThymeleaf&gt; learnList =<span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        LearnThymeleaf bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"官方参考文档"</span>,<span class="string">"Spring Boot Reference Guide"</span>,<span class="string">"地址1"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"地址2"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"龙国学院"</span>,<span class="string">"Spring Boot 教程系列学习"</span>,<span class="string">"地址3"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"潇洒的博客"</span>,<span class="string">"SpringBoot系列"</span>,<span class="string">"地址4"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"程序猿DD"</span>,<span class="string">"Spring Boot系列"</span>,<span class="string">"地址5"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> <span class="type">ModelAndView</span>(<span class="string">"/index"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"learnList"</span>, learnList);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样访问的时候，如果未登录就会跳转到login.html页面，而访问 <a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a> 不会被拦截。</p>
]]></content>
      
        <categories>
            
            <category> SpringBoot系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot（三）之 Thymeleaf篇]]></title>
      <url>/2017/12/04/SpringBoot%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%20Thymeleaf%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>在之前的示例中，我们都是通过@RestController来处理请求，所以返回的内容为json对象。那么如果需要渲染html页面的时候，要如何实现呢？</p>
<p>Spring Boot提供了默认配置的模板引擎主要有以下几种：</p>
<ul>
<li>Thymeleaf（官方推荐）</li>
<li>FreeMarker</li>
<li>Velocity</li>
<li>Groovy</li>
<li>Mustache</li>
</ul>
<a id="more"></a>
<p>当你使用上述模板引擎中的任何一个，它们默认的模板配置路径为：<code>src/main/resources/templates</code></p>
<h3 id="Thymeleaf模版"><a href="#Thymeleaf模版" class="headerlink" title="Thymeleaf模版"></a><strong>Thymeleaf模版</strong></h3><p>Thymeleaf提供了一个用于整合Spring MVC的可选模块，在应用开发中，你可以使用Thymeleaf来完全代替JSP或其他模板引擎，如Velocity、FreeMarker等。Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。你可以使用它创建经过验证的XML与HTML模板。相对于编写逻辑或代码，开发者只需将标签属性添加到模板中即可。</p>
<p>在Spring Boot中使用Thymeleaf，只需要引入下面依赖，并在默认的模板路径<code>src/main/resources/templates</code>下编写模板文件即可完成。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="示例页面模板："><a href="#示例页面模板：" class="headerlink" title="示例页面模板："></a><strong>示例页面模板：</strong></h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>learn thymeleaf<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: center;margin:0 auto;width: 500px; "</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>SpringBoot系列<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>系列名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"learn : $</span></span></span><span class="template-variable">&#123;learnList&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;learn.author&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>潇洒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;learn.title&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>SpringBoot系列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;learn.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：通过xmlns:th=”<a href="http://www.thymeleaf.org“" target="_blank" rel="noopener">http://www.thymeleaf.org“</a> 命令空间，将静态页面转换为动态的视图，需要进行动态处理的元素将使用“th:”前缀。</p>
</blockquote>
<h4 id="编写controller"><a href="#编写controller" class="headerlink" title="编写controller:"></a><strong>编写controller:</strong></h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/"</span>)</span><br><span class="line">    <span class="keyword">public</span> ModelAndView index ()&#123;</span><br><span class="line">        List&lt;LearnThymeleaf&gt; learnList =<span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        LearnThymeleaf bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"官方参考文档"</span>,<span class="string">"Spring Boot Reference Guide"</span>,<span class="string">"地址1"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"地址2"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"龙国学院"</span>,<span class="string">"Spring Boot 教程系列学习"</span>,<span class="string">"地址3"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"潇洒的博客"</span>,<span class="string">"SpringBoot系列"</span>,<span class="string">"地址4"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"程序猿DD"</span>,<span class="string">"Spring Boot系列"</span>,<span class="string">"地址5"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> <span class="type">ModelAndView</span>(<span class="string">"/index"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"learnList"</span>, learnList);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果直接打开html页面展现下面的内容</p>
<p><img src="/2017/12/04/SpringBoot（三）之 Thymeleaf篇/1.png" alt=""></p>
<p>但是启动程序后，访问 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 则是展示Controller中的值，做到了不破坏HTML自身内容的数据逻辑分离。</p>
<p><img src="/2017/12/04/SpringBoot（三）之 Thymeleaf篇/2.png" alt=""></p>
<p>如果报错404， 看一下Thymeleaf是否引入到了maven里。</p>
<p>更多Thymeleaf的页面语法，还请访问<a href="http://www.thymeleaf.org/documentation.html" target="_blank" rel="noopener">Thymeleaf的官方文档</a>查询使用。</p>
<h4 id="Thymeleaf的默认参数配置"><a href="#Thymeleaf的默认参数配置" class="headerlink" title="Thymeleaf的默认参数配置"></a><strong>Thymeleaf的默认参数配置</strong></h4><p>如有需要修改默认配置的时候，只需复制下面要修改的属性到application.properties中，并修改成需要的值，如修改模板文件的扩展名，修改默认的模板路径等。</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启模板缓存（默认值：true）</span></span><br><span class="line"><span class="string">spring.thymeleaf.cache=true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#在展示之前检查模板是否存在。</span></span><br><span class="line"><span class="string">spring.thymeleaf.check-template=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查模板位置是否正确（默认值:true）</span></span><br><span class="line"><span class="string">spring.thymeleaf.check-template-location=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Content-Type的值（默认值：text/html）</span></span><br><span class="line"><span class="string">spring.thymeleaf.content-type=text/html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启MVC Thymeleaf视图解析（默认值：true）</span></span><br><span class="line"><span class="string">spring.thymeleaf.enabled=true</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#模板编码</span></span><br><span class="line"><span class="string">spring.thymeleaf.encoding=UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要被排除在解析之外的视图名称列表，用逗号分隔</span></span><br><span class="line"><span class="string">spring.thymeleaf.excluded-view-names=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要运用于模板之上的模板模式。另见StandardTemplate-ModeHandlers(默认值：HTML5)</span></span><br><span class="line"><span class="string">spring.thymeleaf.mode=HTML5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在构建URL时添加到视图名称前的前缀（默认值：classpath:/templates/）</span></span><br><span class="line"><span class="string">spring.thymeleaf.prefix=classpath:/templates/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在构建URL时添加到视图名称后的后缀（默认值：.html）</span></span><br><span class="line"><span class="string">spring.thymeleaf.suffix=.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Thymeleaf模板解析器在解析器链中的顺序。默认情况下，它排第一位。顺序从1开始，只有在定义了额外的TemplateResolver Bean时才需要设置这个属性。</span></span><br><span class="line"><span class="string">spring.thymeleaf.template-resolver-order=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可解析的视图名称列表，用逗号分隔</span></span><br><span class="line"><span class="string">spring.thymeleaf.view-names=</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> SpringBoot系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot (二) 之 配置文件详解]]></title>
      <url>/2017/12/04/SpringBoot%20%20(%E4%BA%8C)%20%E4%B9%8B%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>相信很多人选择Spring Boot主要是考虑到它既能兼顾Spring的强大功能，还能实现快速开发的便捷。我们在Spring Boot使用过程中，最直观的感受就是没有了原来自己整合Spring应用时繁多的XML配置内容，替代它的是在pom.xml中引入模块化的Starter POMs，其中各个模块都有自己的默认配置，所以如果不是特殊应用场景，就只需要在application.properties中完成一些属性配置就能开启各模块的应用。</p>
<a id="more"></a>
<h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a><strong>自定义属性</strong></h3><p>application.properties提供自定义属性的支持，这样我们就可以把一些常量配置在这里：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com<span class="selector-class">.xiaosa</span><span class="selector-class">.name</span> = <span class="string">"xiaosa"</span></span><br><span class="line">com<span class="selector-class">.xiaosa</span><span class="selector-class">.title</span> = <span class="string">"SpringBoot"</span></span><br></pre></td></tr></table></figure>
<p>然后通过<code>@Value(&quot;${属性名}&quot;)</code>注解来加载对应的配置属性，为了方便我们依然在启动类里写如下代码：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;com.xiaosa.name&#125;</span>"</span>)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;com.xiaosa.title&#125;</span>"</span>)</span></span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String hexo()&#123;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">","</span>+title;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>我们启动工程输入<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 就可以看到打印了<code>”xiaosa,SpringBoot”</code></p>
<p>在application.properties中的各个参数之间也可以直接引用来使用，就像下面的设置：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com<span class="selector-class">.xiaosa</span><span class="selector-class">.name</span>=xiaosa</span><br><span class="line">com<span class="selector-class">.xiaosa</span><span class="selector-class">.title</span>=StringBoot</span><br><span class="line">com<span class="selector-class">.xiaosa</span><span class="selector-class">.desc</span>=$&#123;com.xiaosaname&#125;正在努力学$&#123;com<span class="selector-class">.xiaosa</span><span class="selector-class">.title</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用随机数"><a href="#使用随机数" class="headerlink" title="使用随机数"></a><strong>使用随机数</strong></h3><p>在一些情况下，有些参数我们需要希望它不是一个固定的值，比如密钥、服务端口等。Spring Boot的属性配置文件中可以通过<code>${random}</code>来产生int值、long值或者string字符串，来支持属性的随机值。</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机字符串</span></span><br><span class="line">com.xiaosa.<span class="attribute">value</span>=<span class="variable">$&#123;random.value&#125;</span></span><br><span class="line"><span class="comment"># 随机int</span></span><br><span class="line">com.xiaosa.<span class="attribute">number</span>=<span class="variable">$&#123;random.int&#125;</span></span><br><span class="line"><span class="comment"># 随机long</span></span><br><span class="line">com.xiaosa.<span class="attribute">bignumber</span>=<span class="variable">$&#123;random.long&#125;</span></span><br><span class="line"><span class="comment"># 10以内的随机数</span></span><br><span class="line">com.xiaosa.<span class="attribute">test1</span>=<span class="variable">$&#123;random.int(10)&#125;</span></span><br><span class="line"><span class="comment"># 10-20的随机数</span></span><br><span class="line">com.xiaosa.<span class="attribute">test2</span>=<span class="variable">$&#123;random.int[10,20]&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a><strong>多环境配置</strong></h3><p>我们在开发Spring Boot应用时，通常同一套程序会被应用和安装到几个不同的环境，比如：开发、测试、生产等。其中每个环境的数据库地址、服务器端口等等配置都会不同，如果在为不同环境打包时都要频繁修改配置文件的话，那必将是个非常繁琐且容易发生错误的事。</p>
<p>在Spring Boot中多环境配置文件名需要满足<code>application-{profile}.properties</code>的格式，其中<code>{profile}</code>对应你的环境标识，比如：</p>
<ul>
<li><p>application-dev.properties：开发环境</p>
</li>
<li><p>application-test.properties：测试环境  </p>
</li>
<li><p>application-prod.properties：生产环境</p>
</li>
</ul>
<p>至于哪个具体的配置文件会被加载，需要在<code>application.properties</code>文件中通过<code>spring.profiles.active</code>属性来设置，其值对应<code>{profile}</code>值。</p>
<p>如：<code>spring.profiles.active=test</code>就会加载<code>application-test.properties</code>配置文件内容</p>
<p>还可以给不同的环境添加不同的端口属性,例如：</p>
 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="attribute">port</span>=8081</span><br></pre></td></tr></table></figure>
<p>按照上面的实验，可以如下总结多环境的配置思路：</p>
<ul>
<li><code>application.properties</code>中配置通用内容，并设置<code>spring.profiles.active=dev</code>，以开发环境为默认配置</li>
<li><code>application-{profile}.properties</code>中配置各个环境不同的内容</li>
</ul>
<p>通过命令行方式去激活不同环境的配置,例如：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.profiles</span><span class="selector-class">.active</span>=dev</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> SpringBoot系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot（一）之 快速入门]]></title>
      <url>/2017/12/01/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p><strong>本系列基于：IDEA、JDK8、SprigBoot1.5.9。通常我们推荐使用JDK8</strong> </p>
<h2 id="使用Intellij中的Spring-Initializr来快速构建Spring-Boot工程"><a href="#使用Intellij中的Spring-Initializr来快速构建Spring-Boot工程" class="headerlink" title="使用Intellij中的Spring Initializr来快速构建Spring Boot工程"></a>使用Intellij中的Spring Initializr来快速构建Spring Boot工程</h2><p><strong>初始化Spring Boot项目</strong></p>
<ul>
<li><p>点击Create New Project，我们可以看到如下图所示的创建功能窗口。其中Initial Service Url指向的地址就是Spring官方提供的Spring Initializr工具地址，所以这里创建的工程实际上也是基于它的Web工具来实现的。</p>
<a id="more"></a>
<p><img src="/2017/12/01/SpringBoot（一）之 快速入门/2.png" alt=""></p>
</li>
</ul>
<ul>
<li><p>点击Next，等待片刻后，我们可以看到如下图所示的工程信息窗口，在这里我们可以编辑我们想要创建的工程信息。其中，</p>
<blockquote>
<p>Group 一般是公司名字的反写，也可以自己随意<br>Artifact: 你这个项目叫什么<br>Type可以改变我们要构建的工程类型，比如：Maven、Gradle；<br>Language可以选择：Java、Groovy、Kotlin。</p>
</blockquote>
<p><img src="/2017/12/01/SpringBoot（一）之 快速入门/3.png" alt=""></p>
</li>
<li><p>点击Next，进入选择Spring Boot版本和依赖管理的窗口。在这里值的我们关注的是，它不仅包含了Spring Boot Starter POMs中的各个依赖，还包含了Spring Cloud的各种依赖。 我们还可以选择SpringBoot的版本。</p>
<p><img src="/2017/12/01/SpringBoot（一）之 快速入门/4.png" alt=""></p>
</li>
<li><p>这个我们勾选了web，你也可以根据自己的需求勾选。点击Next，进入最后关于工程物理存储的一些细节。最后，点击Finish就能完成工程的构建了。   </p>
<p><img src="/2017/12/01/SpringBoot（一）之 快速入门/5.png" alt=""></p>
</li>
</ul>
<p><strong>项目结构</strong></p>
<p><img src="/2017/12/01/SpringBoot（一）之 快速入门/6.png" alt=""></p>
<p>如你所见，项目里面基本没有代码，除了几个空目录外，还包含如下几样东西。</p>
<ul>
<li>pom.xml：Maven构建说明文件。</li>
<li>DemoApplication：一个带有main()方法的类，用于启动应用程序（关键）。</li>
<li>DemoApplicationTests：一个空的Junit测试类，它加载了一个使用Spring Boot字典配置功能的Spring应用程序上下文。</li>
<li>application.properties：一个空的properties文件，你可以根据需要添加配置属性。</li>
</ul>
<p><strong>应用入口类</strong></p>
<p>DemoApplication是一个很关键的启动类，程序的入口就是这里,为了演示简单，我们不再新建控制类，而是直接在这个入口类中编写，添加@RestController以及index方法，如下：</p>
<p><img src="/2017/12/01/SpringBoot（一）之 快速入门/7.png" alt=""></p>
<ul>
<li>@SpringBootApplication是Sprnig Boot项目的核心注解，主要目的是开启自动配置。后续讲解原理的时候再深入介绍。</li>
<li><p>main方法这是一个标准的Java应用的main的方法，主要作用是作为项目启动的入口。</p>
</li>
<li><p>@RestController注解等价于@Controller+@ResponseBody的结合，使用这个注解的类里面的方法都以json格式输出。</p>
</li>
</ul>
<p>启动这个最简单的Web项目，他有三种方法。</p>
<ol>
<li><p>DemoApplication的main方法启动，上边个标红的和下面那个标红的是一样的。</p>
<p> <img src="/2017/12/01/SpringBoot（一）之 快速入门/8.png" alt=""></p>
</li>
<li><p>使用命令 <code>mvn spring-boot:run</code>”在命令行启动该应用，IDEA中该命令在如下位置：</p>
<p> <img src="/2017/12/01/SpringBoot（一）之 快速入门/9.png" alt=""></p>
</li>
<li><p>运行<code>mvn package</code>进行打包时，会打包成一个可以直接运行的 JAR 文件，使用<code>java -jar</code>命令就可以直接运行。</p>
<p><img src="/2017/12/01/SpringBoot（一）之 快速入门/10.png" alt=""></p>
</li>
</ol>
<p>这里是SpringBoot的启动标志</p>
<p><img src="/2017/12/01/SpringBoot（一）之 快速入门/11.png" alt=""></p>
<p>打开浏览器访问<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>, 你就能看到页面显示Hello Spring Boot效果了，一个简单的Web的项目就是如此简单。</p>
<p><img src="/2017/12/01/SpringBoot（一）之 快速入门/12.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> SpringBoot系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Git（五）之 搭建Git服务器]]></title>
      <url>/2017/11/29/%E5%AD%A6%E4%B9%A0Git%EF%BC%88%E4%BA%94%EF%BC%89%20%E4%B9%8B%20%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>在之前的学习中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。</p>
<p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</p>
<a id="more"></a>
<p>搭建Git服务器需要准备一台运行Linux的机器。我是在VMware虚拟机上装了一个CentOS 如果你装的是Ubuntu或者其他的，安装命令可能会不同。这个要注意一下。</p>
<p>假设你已经有sudo权限的用户账号，下面，正式开始安装。</p>
<p>第一步，安装git:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure>
<p>如果安装不上可能是网络没配好，找到这个下面这个文件</p>
<p><img src="/2017/11/29/学习Git（五） 之 搭建Git服务器/1.png" alt=""></p>
<p>看一下标红的是不是no,如果是,该为yes。再执行上边那个操作就可以了。</p>
<p><img src="/2017/11/29/学习Git（五） 之 搭建Git服务器/2.png" alt=""></p>
<p>第二步，创建证书：</p>
<p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到 <code>/home/git/.ssh/authorized_keys</code> 文件里，一行一个。</p>
<p><code>git</code>和 <code>.ssh/keys</code>是自己手动创建的，我的创建在了root目录下。</p>
<p>创建命令是：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> git</span><br><span class="line"><span class="built_in">mkdir</span> .ssh</span><br></pre></td></tr></table></figure>
<p>然后给这个目录对应的权限：</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 <span class="string">.ssh/</span></span><br></pre></td></tr></table></figure>
<p>再<code>cd .ssh</code> 创建 keys 文件：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">touch keys</span></span><br></pre></td></tr></table></figure>
<p>然后给这个文件对应的权限</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chmod</span> <span class="number">600</span> <span class="keyword">keys</span></span><br></pre></td></tr></table></figure>
<p>接着就是把所有的公钥导入了。</p>
<p>第三步，初始化Git仓库：</p>
<p>先选定一个目录作为Git仓库，假定是/root/lean.git，在/root目录下输入命令：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git init <span class="comment">--bare lean.git</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（五） 之 搭建Git服务器/3.png" alt=""></p>
<p>第四步，克隆远程仓库：</p>
<p>现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git<span class="variable">@server</span><span class="symbol">:/root/lean</span>.git</span><br></pre></td></tr></table></figure>
<blockquote>
<p>@server: 对应你们git服务器的ip地址。 </p>
</blockquote>
<p>剩下的推送就简单了。</p>
]]></content>
      
        <categories>
            
            <category> 学习Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Git（四）之 分支管理]]></title>
      <url>/2017/11/29/%E5%AD%A6%E4%B9%A0Git%EF%BC%88%E5%9B%9B%EF%BC%89%20%E4%B9%8B%20%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p>
<p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p>
<a id="more"></a>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/1.png" alt=""></p>
<p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p>
<p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p>
<p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。</p>
<p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/2.png" alt=""></p>
<p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长：</p>
<p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/3.png" alt=""></p>
<p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/4.png" alt=""></p>
<p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/5.png" alt=""></p>
<p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p>
<p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/6.png" alt=""></p>
<h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a><strong>创建与合并分支</strong></h3><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支, 当然了，要在你本地的仓库目录下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -<span class="selector-tag">b</span> dev</span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/7.png" alt=""></p>
<p><code>git checkout</code> 命令加上-b参数表示创建并切换，相当于以下两条命令：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="built_in">dev</span></span><br><span class="line">git checkout <span class="built_in">dev</span></span><br></pre></td></tr></table></figure>
<p>然后，用<code>git branch</code>命令查看当前分支：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git branch</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/8.png" alt=""></p>
<p><code>git branch</code> 命令会列出所有分支，当前分支前面会标一个*号。</p>
<p>然后，我们就可以在<code>dev</code>分支上正常提交，比如对<code>demo.txt</code>做个修改，加上 <code>haha</code></p>
<p>然后提交</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"branch test"</span></span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/9.png" alt=""></p>
<p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br></pre></td></tr></table></figure>
<p>切换回<code>master</code>分支后，再查看一个<code>demo.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/10.png" alt=""></p>
<p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">merge</span> dev</span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/11.png" alt=""></p>
<p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-D dev</span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/12.png" alt=""></p>
<p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/13.png" alt=""></p>
<p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a><strong>解决冲突</strong></h3><p>人生不如意之事十之八九，合并分支往往也不是一帆风顺的</p>
<p>准备新的<code>feature1</code>分支，继续我们的新分支开发：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -<span class="selector-tag">b</span> feature1</span><br></pre></td></tr></table></figure>
<p>再次修改<code>demo.txt</code>, 增加： </p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a <span class="keyword">new</span> branch <span class="keyword">is</span> quick <span class="keyword">AND</span> simple.</span><br></pre></td></tr></table></figure>
<p>在<code>feature1</code>分支上提交：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"AND simple"</span></span></span><br></pre></td></tr></table></figure>
<p>切换到<code>master</code>分支：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br></pre></td></tr></table></figure>
<p>Git还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/14.png" alt=""></p>
<p>在<code>master</code>分支上把<code>demo.txt</code>文件的最后一行替换为:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a <span class="keyword">new</span> branch <span class="keyword">is</span> quick &amp; simple</span><br></pre></td></tr></table></figure>
<p>提交</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt </span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"&amp; simple"</span></span></span><br></pre></td></tr></table></figure>
<p>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/15.png" alt=""></p>
<p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">merge</span> feature1</span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/16.png" alt=""></p>
<p>果然冲突了！Git告诉我们，<code>demo.txt</code>文件存在冲突，必须手动解决冲突后再提交。我们可以直接查看<code>demo.txt</code>的内容：</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/17.png" alt=""></p>
<p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存：</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/18.png" alt=""></p>
<p>再提交：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"conflict fixed"</span></span></span><br></pre></td></tr></table></figure>
<p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/19.png" alt=""></p>
<p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/20.png" alt="">    </p>
<p>最后，删除<code>feature1</code>分支：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-D feature1</span><br></pre></td></tr></table></figure>
<p>工作完成。</p>
<h3 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a><strong>分支策略</strong></h3><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>
<p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>
<p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在``master分支发布1.0版本；</p>
<p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p>
<p>所以，团队合作的分支看起来就像这样：</p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/21.png" alt=""></p>
<h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a><strong>多人协作</strong></h3><p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p>
<p>要查看远程库的信息，用<code>git remote</code>：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git remote</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/22.png" alt=""></p>
<p>或者，用<code>git remote -v</code>显示更详细的信息</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git remote -v</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/23.png" alt=""></p>
<p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p>
<h4 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a><strong>推送分支</strong></h4><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>
<p>如果要推送其他分支，比如dev，就改成：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> dev</span><br></pre></td></tr></table></figure>
<p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>
<ul>
<li><code>master</code>分支是主分支，因此要时刻与远程同步；</li>
<li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li>
</ul>
<p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p>
<h4 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a><strong>抓取分支</strong></h4><p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p>
<p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/Litxiaosa/learnGit.git</span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/24.png" alt=""></p>
<p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支。不信可以用<code>git branch</code>命令看看：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git branch</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/25.png" alt=""></p>
<p>现在，你的小伙伴要在dev分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">dev</span> origin/<span class="built_in">dev</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/26.png" alt=""></p>
<p>现在，他就可以在<code>dev</code>上继续修改，(我们在里面添加了<code>hello world</code>)然后，时不时地把<code>dev</code>分支push到远程：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"add hello world"</span></span></span><br><span class="line"><span class="bash">git push origin dev</span></span><br></pre></td></tr></table></figure>
<p>可能让你输入你的GitHub的用户名和密码 </p>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/27.png" alt=""></p>
<p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送,我们添加了一句：<code>hello git</code></p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"add hello git"</span></span></span><br><span class="line"><span class="bash">git push origin dev</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/28.png" alt=""></p>
<p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git pull origin dev</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/29/学习Git（四） 之 分支管理/29.png" alt=""></p>
<p><code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push。</p>
<p>因此，多人协作的工作模式通常是这样：</p>
<p>首先，可以试图用 <code>git push origin branch-name</code> 推送自己的修改；</p>
<p>如果推送失败，则因为远程分支比你的本地更新，需要先用 <code>git pull</code> 试图合并；</p>
<p>如果合并有冲突，则解决冲突，并在本地提交；</p>
<p>没有冲突或者解决掉冲突后，再用 <code>git push origin branch-name</code> 推送就能成功！</p>
<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h2><blockquote>
<ul>
<li>git branch           查看当前分支</li>
<li>git branch -v        查看每一个分支的最后一次提交</li>
<li>git branch -a        查看本地和远程分支的情况</li>
<li>git branch –merged  查看已经与当前分支合并的分支</li>
<li>git branch –no-merged 查看已经与当前分支未合并的分支</li>
<li>git branch -r        查看远程分支</li>
<li>git branch dev       创建分支 dev</li>
<li>git checkout dev     切换到分支dev</li>
<li>git checkout -b dev  创建并切换分支dev</li>
<li>git merge dev        名称为dev的分支与当前分支合并</li>
<li>git branch -d dev    删除分支dev</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Git（三） 之 远程仓库]]></title>
      <url>/2017/11/28/%E5%AD%A6%E4%B9%A0Git%EF%BC%88%E4%B8%89%EF%BC%89%20%E4%B9%8B%20%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>Git本地操作的熟练了后，就可以尝试连接远程仓库了，完全可以自己搭建一台运行Git的服务器，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交，不过现阶段，我们不打算这么搞。目前国内外比较出名的提供Git仓库远程托管的有国外的GitHub，国内的开源中国以及coding。这里我以GitHub为例子介绍如何操作远程仓库。</p>
<a id="more"></a>
<p>现在的情景是，你已经在本地创建了一个Git仓库，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。</p>
<h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a><strong>添加远程仓库</strong></h2><ol>
<li><p>首先，登陆GitHub，然后，在右上角找到“<code>new repository</code>”按钮，创建一个新的仓库：</p>
<p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/1.png" alt=""></p>
</li>
<li><p>在<code>Repository name</code>填入<code>learnGit</code>，其他保持默认设置，点击“<code>Create repository</code>”按钮，就成功地创建了一个新的Git仓库：</p>
<p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/2.png" alt=""></p>
</li>
<li><p>目前，在GitHub上的这个<code>learnGit</code>仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>
<p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/3.png" alt=""></p>
</li>
<li><p>现在，我们根据GitHub的提示，在本地的<code>GitRepository</code>仓库下运行命令：</p>
 <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span><span class="bash"> origin git@github.com:Litxiaosa/learnGit.git</span></span><br></pre></td></tr></table></figure>
<p> <strong>请千万注意，把上面的<code>Litxiaosa</code>替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中</strong></p>
</li>
<li><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p>
</li>
<li><p>下一步，就可以把本地库的所有内容推送到远程库上</p>
 <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>
<p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/4.png" alt=""></p>
<p> 可以看到，你本地的代码就推送到远程仓库了推送成功后</p>
<p> 由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</p>
<p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/5.png" alt=""></p>
</li>
<li><p>从现在起，只要本地作了提交，就可以通过命令</p>
 <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>
<p> 把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p>
</li>
</ol>
<h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a><strong>从远程库克隆</strong></h2><p>我们讲了先有本地库，后有远程库的时候，如何关联远程库。现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p>
<ol>
<li><p>首先，登陆GitHub，创建一个新的仓库，名字叫gitskills：</p>
<p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/6.png" alt=""></p>
<p> 我们勾选<code>Initialize this repository with a README</code>，这样GitHub会自动为我们创建一个<code>README.md</code>文件。创建完毕后，可以看到README.md文件：</p>
<p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/7.png" alt=""></p>
</li>
<li><p>现在，远程库已经准备好了，下一步是用命令<code>git clone</code>克隆一个本地库</p>
  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="keyword">clone</span> <span class="title">https</span>://github.com/Litxiaosa/gitskills.git</span><br></pre></td></tr></table></figure>
<p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/8.png" alt=""></p>
<p><strong>注意把Git库的地址换成你自己的</strong>，然后进入<code>gitskills</code>目录看看，已经有<br><code>README.md</code>文件了。</p>
<p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p>
</li>
</ol>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h1><ol>
<li><p>要关联一个远程库，使用命令 <code>git remote add origin git@server-name:path/repo-name.git</code></p>
</li>
<li><p>关联后，使用命令 <code>git push -u origin master</code> 第一次推送<code>master</code>分支的所有内容</p>
</li>
<li><p>此后，每次本地提交后，只要有必要，就可以使用命令 <code>git push origin master</code> 推送最新修改</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Git（二）之 暂存区]]></title>
      <url>/2017/11/28/%E5%AD%A6%E4%B9%A0Git%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%20%E6%9A%82%E5%AD%98%E5%8C%BA/</url>
      <content type="html"><![CDATA[<h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a><strong>工作区和暂存区</strong></h2><p>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。</p>
<p>先来看名词解释。</p>
<a id="more"></a>
<h3 id="工作区（Working-Directory）"><a href="#工作区（Working-Directory）" class="headerlink" title="工作区（Working Directory）"></a><strong>工作区（Working Directory）</strong></h3><p>就是你在电脑里能看到的目录，比如我的GitRepository文件夹就是一个工作区：</p>
<p><img src="/2017/11/28/学习Git（二）之 暂存区/1.png" alt=""></p>
<h3 id="版本库（Repository）"><a href="#版本库（Repository）" class="headerlink" title="版本库（Repository）"></a><strong>版本库（Repository）</strong></h3><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p>
<p>Git的版本库里存了很多东西，其中最重要的就是称为<code>stage</code>（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p>
<p><img src="/2017/11/28/学习Git（二）之 暂存区/1.jpeg" alt=""> </p>
<p>前面说了我们把文件往Git版本库里添加的时候，是分两步执行的：</p>
<p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p>
<p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<p>因为我们创建Git版本库时，<code>Git</code>自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往master分支上提交更改。</p>
<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>
<p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p>
<h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a><strong>撤销操作</strong></h2><ol>
<li><p>如果你文件只是在工作区修改了，但是还没提交到暂存区的时候，你可以用下面的命令来撤销。</p>
 <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- <span class="string">[file]</span></span><br></pre></td></tr></table></figure>
<p> 比如，你有一个文件叫<code>demo.txt</code>, 里面的内容为：<code>Today is Tuesday</code>。 并且这句话已经提交到暂存区。 此时，你又在工作区修改了<code>demo.txt</code> 这个文件， 内容增加了一句：<code>I don&#39;t know what to say</code> </p>
<p> 然后执行<code>git checkout -- demo.txt</code>命令,你会发现<code>demo.txt</code>内容又变成<code>Today is Tuesday</code>了。</p>
 <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">-- demo.txt</span></span><br></pre></td></tr></table></figure>
<p> <code>git checkout -- file</code>命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令。</p>
</li>
<li><p>假如你文件在工作区修改了,并且也执行 <code>git add</code> 命令提交给暂存区了，但是，还没有执行<code>commit</code>操作。那么执行上面的 <code>git checkout -- [file]</code> 已经无效了，因为工作区跟暂存区已经一样了，再怎么覆盖内容也一样，这时候就应该使用 <code>git reset HEAD</code> 命令来撤销。</p>
 <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">reset</span> HEAD <span class="built_in">demo</span>.txt</span><br></pre></td></tr></table></figure>
<p> 还记得如何丢弃工作区的修改吗？</p>
 <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">-- demo.txt</span></span><br></pre></td></tr></table></figure>
<p> 回头看看添加的内容是不是又回滚了？</p>
</li>
<li><p>现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。</p>
</li>
</ol>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h2><p> 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code></p>
<p> 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p>
<p> 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库。</p>
]]></content>
      
        <categories>
            
            <category> 学习Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Git（一）之 快速入门]]></title>
      <url>/2017/11/28/%E5%AD%A6%E4%B9%A0Git%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%20%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p><strong>本系列文章基于Mac系统</strong></p>
<p>之前自己搭建博客的时候使用到GitHub，需要使用git进行版本控制，现在很多公司也在使用Git，发现Git很棒，于是学习了解一下Git。这只是我自己的学习笔记，如果你是大神，请你不吝赐教，如果你也是小白，希望这系列文章能帮到你。</p>
<a id="more"></a>
<h2 id="安装并配置Git"><a href="#安装并配置Git" class="headerlink" title="安装并配置Git"></a><strong>安装并配置Git</strong></h2><ol>
<li><p>要使用Git，第一步当然是安装Git了。</p>
<p>首先，打开终端输入一下命令，看你是否安装了Git</p>
 <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
<p>如果没有安装，那么请下载安装 <a href="https://git-scm.com/download" target="_blank" rel="noopener">Git客户端</a>， 选择你自己的系统下载安装即可。</p>
</li>
<li><p>当安装完Git应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：</p>
 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name 你的名字</span><br><span class="line">git<span class="built_in"> config </span>--global user.email 你的邮箱</span><br></pre></td></tr></table></figure>
<p> 如果使用了 <code>--global</code> 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用这些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行不使用 <code>--global</code> 选项的命令来配置。</p>
</li>
<li><p>检查配置信息</p>
<p> 如果你不确定你的信息是不是配置成功了，可以输入一下命令查看</p>
 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--list</span><br></pre></td></tr></table></figure>
<p> 如果你觉得返回的信息太多，也可以输入<code>git config &lt;key&gt;：</code><br> 查询指定的配置，例如:</p>
 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>user.name  </span><br><span class="line">git<span class="built_in"> config </span>user.email</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a><strong>创建版本库</strong></h2><p>什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。    </p>
<p>创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录，直接新建文件夹即可（我的起名字叫：GitRepository），然后cd 到该文件夹下，执行下面的命令</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git init</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/28/学习Git（一）之 入门/1.png" alt="">       </p>
<p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p>
<p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p>
<h2 id="提交文件到版本库"><a href="#提交文件到版本库" class="headerlink" title="提交文件到版本库"></a><strong>提交文件到版本库</strong></h2><p>上面把git仓库搭建好了，现在就来试试添加文件到版本库里面。</p>
<p>创建一个txts文档起名叫做<code>demo.txt</code>，往里面添加一点内容 <code>Hello Git</code></p>
<p><strong>注意:这里需要文件是UTF-8格式的。</strong></p>
<p>一定要放到<code>GitRepository</code>目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p>
<p>第一步，用命令git add告诉Git，把文件添加到仓库：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt</span></span><br></pre></td></tr></table></figure>
<p> 执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p>
<p>第二步，用命令git commit告诉Git，把文件提交到仓库：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">"first commit"</span></span><br></pre></td></tr></table></figure>
<p>-m 参数是用来注释你提交的信息的，这样以后才知道这次提交更改了什么</p>
<p><img src="/2017/11/28/学习Git（一）之 入门/2.png" alt="">   </p>
<h2 id="查看当前新增或者修改的文件"><a href="#查看当前新增或者修改的文件" class="headerlink" title="查看当前新增或者修改的文件"></a><strong>查看当前新增或者修改的文件</strong></h2><p>实际使用中你不止提交一个文件，或新增或修改多个文件，可能时间一久就忘了有多少文件需要提交。</p>
<p>这里模拟一下，首先新建一个<code>hello.txt</code>的文件，然后修改<code>demo.txt</code>内容，添加一句<code>come on</code></p>
<p>这样就有2个文件需要提交了。</p>
<p>我们使用<code>git status</code>命令来查看当前状态,是否有未提交的文件</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git status</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/28/学习Git（一）之 入门/3.png" alt=""> </p>
<p>如图，可以看到一个<code>demo.txt</code>被修改过了，但还没有准备提交的修改，另外一个是<code>Untracked files: hello.txt</code>，表示新增的文件。</p>
<p>这时候准备把上面2个文件都提交，使用命令:</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt</span></span><br><span class="line"><span class="bash">git add hello.txt</span></span><br></pre></td></tr></table></figure>
<p>或者你嫌弃文件太多，一次次add感觉很麻烦，那么可以试试使用`git add .`` 提交，.表示提交当前目录所有文件</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"second commit"</span></span></span><br></pre></td></tr></table></figure>
<p>提交后再使用<code>git status</code>命令查看下</p>
<p><img src="/2017/11/28/学习Git（一）之 入门/4.png" alt=""></p>
<p>如图，可以看到文件提交到仓库了，并且<code>git status</code>后提示<code>nothing to commit, working directory clean</code>，说明当前没有需要提交的修改，工作目录是干净。</p>
<h2 id="查看历史提交记录"><a href="#查看历史提交记录" class="headerlink" title="查看历史提交记录"></a><strong>查看历史提交记录</strong></h2><p>有时候你想看看之前提交的历史纪录~那么就需要使用到下面的命令：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/28/学习Git（一）之 入门/5.png" alt=""></p>
<p>如图，可以看到我们提交的2次历史，<code>first commit</code>和 <code>second commit</code>。历史纪录是根据时间倒叙排列的。</p>
<p>如果觉得代码太多了，加点过滤就行</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment">--pretty=oneline</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/28/学习Git（一）之 入门/6.png" alt=""></p>
<h2 id="回滚版本"><a href="#回滚版本" class="headerlink" title="回滚版本"></a>回滚版本</h2><p>现在我们准备把<code>demo.txt</code>回退到上一个版本，也就是“<code>first commit</code>”的那个版本，怎么做呢？</p>
<p>首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交<code>2c49a55···9a9a13c</code>（注意我的提交ID和你的肯定不一样）， 就是上图中那一大长串字符，上一个版本就是 <code>HEAD^</code>，上上一个版本就是 <code>HEAD ^^</code>，当然往上100个版本写 <code>100个^</code> 比较容易数不过来，所以写成<code>HEAD~100</code>。</p>
<p>现在，我们要把当前版本“<code>second commit</code>”回退到上一个版本“<code>first commit</code>”，就可以使用<code>git reset</code>命令：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard HEAD^</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/28/学习Git（一）之 入门/7.png" alt=""></p>
<p>看看第二次提交的 <code>helllo.txt</code> 是不是不见了，<code>demo.txt</code> 里面的内容是不是也变了？ 好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？</p>
<p>办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个<code>second commit</code>的<code>commit id</code>是<code>2c49a55···9a9a13c</code>，于是就可以指定回到未来的某个版本：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard 2c49a5503041f562e8dfbf</span></span><br></pre></td></tr></table></figure>
<p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p>
<p><img src="/2017/11/28/学习Git（一）之 入门/8.png" alt=""></p>
<p>果然， 老子又回来了！</p>
<p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的<code>commit id</code>怎么办？</p>
<p>Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git reflog</span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/28/学习Git（一）之 入门/9.png" alt=""> </p>
<p>（注：我没有再次做回滚操作） <code>commit id</code> 又出来了，现在，你又可以到未来了。就问你厉不厉害！</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>好了，这一篇，我们学了Git的安装和一些基本命令操作，差不多算入门了，接下去就是继续深入学习了。</p>
]]></content>
      
        <categories>
            
            <category> 学习Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[姑苏有钟声]]></title>
      <url>/2017/10/31/%E5%A7%91%E8%8B%8F%E6%9C%89%E9%92%9F%E5%A3%B0/</url>
      <content type="html"><![CDATA[<p><img src="/2017/10/31/姑苏有钟声/钟.jpg" alt=""></p>
<blockquote>
<p>如果你听歌可眼红，何以待她好偏不懂。</p>
</blockquote>
<a id="more"></a>
<p>她不会像白富美那样偶尔流露出一丝惹人厌的高傲，更不会像女屌丝那样做派发指 长相抱歉。</p>
<p>她在自己生活的圈子里优雅的生活，不会默默无闻。</p>
<p>她长得不算差，打扮得干干净净，或许不会穿的跟颁奖礼一般，但绝对会扬长避短穿出别有一番韵味。她更绝不会不自量力搭配没品。</p>
<p>她或许温婉，或许贤良，或许天真，或许任性，但这都不重要，重要的是，她很温暖，很安心。</p>
<p>可能她是你的同学，又或者是校友，又或者是陌生人，反正就在那个电光火石般的一瞬，你像一朵青春萌动的少年，看见让自己眼前一亮的女生，一种莫名的冲动，发自内心，倚仗着荷尔蒙喷薄而出。</p>
<p>你像一般电视剧演的那样，像一个侦探一样，调动了一切手段渠道，用此处略去七十八个字儿的方法彻底地认识了她。</p>
<p>上天会怜悯那些绞尽脑汁的虔诚孩子，他会轻易地突破第四维度，将两条平行线改变了轨迹，交在了一起。</p>
<p>你只知道在继续省略十万八千个字之后她会叫你傻逼会叫你神经病，会在你让她早点睡觉的时候跟你说嗯。</p>
<p>在你寂寞的单身的想要恋爱的时候，你会发现她总会匪夷所思地出现在你的脑海。</p>
<p>她或许不会天天叫你早睡早起不要熬夜，或许也不记得有纪念意义的日子，或许更不会记得你的生日，你的爱好，她也不会认识太多你身边的朋友，或许连相熟也称不上。但你会。</p>
<p>有时候你也会约她，她大多会欣然答应，但恪守本分，不远不近保持着距离，若即若离。</p>
<p>你开始期待甚至盼望每天与她的相见，就像陈小春唱的，她像个天仙，她太美了。我那么平凡…… 然后小灯泡一亮，叮得一声：她不讨厌我，肯定喜欢我～</p>
<p>傻逼了吧。</p>
<p>也许对于她来说，你只是一个可有可无的存在，多一个不多，少一个不少。这只是她的一种教养，一个习惯，或者一种本能而已。你不能否认就是有这样的姑娘，自带女神光环，她们能让周围的人都如沐春风，让异性为之深深地吸引。</p>
<p>你跟她身边其余的异性一样，就像女生面对淘宝满屏的东西，你不能说她讨厌你，但确实也挑不到喜欢的。</p>
<p>每个男生骨子里爆棚的自信心也最容易高估自己，而这些恰恰会让感觉良好的少年们自作多情自不量力自欺欺人自讨苦吃自掘坟墓自食其果自取灭亡自作孽不可活。</p>
<p>你把这个感觉转嫁到了她身上，开始无可救药地以为爱上了。</p>
<p>你开始为了她的每句话揣测推断，开始去思考她每一条状态每一个签名，即使像今天我出去玩的好开心如此这般的毫无意义。</p>
<p>你开始每天守在电脑前，看着她的头像亮起来，然后去跟她闲扯去逗她笑，尽所能地去让你开心，快乐。你每次看到冰冷的屏幕上出现她打出来的哈哈或者嘿嘿，你总是盯着屏幕傻呵呵地咧嘴笑。你会反复在脑海里意淫般地勾画出你们俩个人在一起的情形。</p>
<p>你会抵挡不住见她的冲动不在乎跑多少公里，看到她的时候你会觉得这几千公里跟孙猴子一个筋斗那样不值一提。你会挖空心思地对她好，好到用语言描述出来都略显单薄但是无用。好到连你们周围的人都感觉到窒息，直到后来你才知道，太把优柔寡断投鼠忌器的磨叽当慎重的人，往往却会栽到自作聪明作茧自缚这几个字上。</p>
<p>小黄人喜欢的不是apple，而是banana。</p>
<p>对了，你是不是还会像个护食的汪星人一般，假如别的男生若是和她多聊几句，就在脑子里无数次描绘那男的被爆菊的惨状。</p>
<p>你看，说你神经病你还不愿意，你这就是神经病。</p>
<p>你还时常感谢上苍，他把两条平行线交汇在一起。但这只会让你记得交汇那一瞬她蹦蹦跳跳像个小猴子般的身影，和你脑子里那被风吹起的刘海。</p>
<p>你来到她的城市，走过她来时的路，然后，相交线就会渐行渐远。</p>
<p>到这里，你心里一定会跟千万只草泥马奔腾而过一样吧，老天爷办事儿，远他妈的不是你想的路数。</p>
<p>在我收集的剪报里，有大致如下几段话：你那时应该知道，如果一个人真的爱你，她一定会告诉你，至少会表现出来，而不是让你自己胡乱猜测的被感觉左右。和这位姑娘相处，本身就是一件很美好的事。你只是没给自己留一点可进退的余地，后悔莫及。你因为一厢情愿，搭上了自己的一片真心。没人不怪你看不透，只是因为你太需要爱。当你明白你再怎么做也无力回天的时候，还是感觉这东西害了你。这位姑娘对你没感觉，而感觉是个奇妙和淘气的小家伙。</p>
<p>当你觉得一个人千般好万般好，那也许是迷恋。当你觉得她有时候很呆傻，但却傻的非常可爱，那可能是喜欢。当你看到她的每一面，包括最差的，但还不想离开她，那大概是习惯。爱没法去描述，但你永远不会错认。</p>
<p>爱就是内心的召唤而已，夜里睡不着想到她时那满心酸楚的悸动，跟她说话聊天字斟句酌的计较，面对她的时候那喷薄而出的欲望，都是爱情的原因。</p>
<p>那时有一个姑娘，懂你所有，出现在你的生命里。</p>
<p>只是错误的时间，错误的地点，遇到错误的人，却产生了对的感觉。</p>
<p>只是她身上的温暖蛊惑了你，让你误以为那就是爱情。</p>
]]></content>
      
        <categories>
            
            <category> 不知所云 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 不知所云，摘抄 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里巴巴Java开发规约插件]]></title>
      <url>/2017/10/25/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E8%A7%84%E7%BA%A6%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="阿里巴巴Java开发手册"><a href="#阿里巴巴Java开发手册" class="headerlink" title="阿里巴巴Java开发手册"></a>阿里巴巴Java开发手册</h2><p>在介绍这款插件之前，先说一下《阿里巴巴Java开发手册》。2017年初，阿里巴巴官方首次公开Java代码规范标准手册，这套Java统一规范标准将有助于提高行业编码规范化水平，帮助行业人员提高开发质量和效率、大大降低代码维护成本，我第二时间（刚公开时我不知道。我也很无奈啊）下载来看。对我个人而言帮助挺大的，渐渐改掉了我好多编码的坏习惯。这个手册的愿景是这样的：</p>
<blockquote>
<p>“统一规范标准将有助于提高行业编码规范化水平，帮助行业人员提高开发质量和效率、大大降低代码维护成本”。</p>
</blockquote>
<a id="more"></a>
<p>到现在为止已经更新迭代了三个版本。也是阿里官方对外发布的最后一个PDF版本，我觉得是值得收藏的。</p>
<h2 id="插件简单介绍"><a href="#插件简单介绍" class="headerlink" title="插件简单介绍"></a>插件简单介绍</h2><p>阿里巴巴基于手册内容，研发了一套自动化的IDE检测插件（IDEA、Eclipse）， 该插件在扫描代码后，将不符合《手册》的代码按Blocker/Critical/Major三个等级显示在下方，甚至在IDEA上，还基于Inspection机制提供了实时检测功能，编写代码的同时也能快速发现问题所在。对于历史代码，部分规则实现了批量一键修复的功能，提升代码质量，提高团队研发效能。</p>
<p>代码已经开源，GitHub：<a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener">https://github.com/alibaba/p3c</a></p>
<h2 id="插件简单教程"><a href="#插件简单教程" class="headerlink" title="插件简单教程"></a>插件简单教程</h2><p>打开 IDEA 搜索”alibaba”, 你就可以看到返回结果里有”Alibaba Java Coding Guidelines”。我这里已经下载过了。直接安装重启编译器就好，</p>
<p><img src="/2017/10/25/阿里巴巴Java开发规约插件/1.jpg" alt=""></p>
<p>在项目上右键就可以看到这两个功能，点绿色按钮就扫面本项目全部的文件，如果只想扫描当前的文件，那就在当前文件上右键，那么它只扫描当前的文件。</p>
<p><img src="/2017/10/25/阿里巴巴Java开发规约插件/2.jpg" alt=""></p>
<p>前面说的都是手动监测，该插件也提供了实时监测的功能，此功能是默认开启的，在你编写代码时就会实时监测，一旦有不符合规范的语句就会出现错误提示。</p>
<p>扫描代码后，不符合规约的代码会按<code>Blocker/Critical/Major</code>三个等级显示在下方面板中，左边是扫描出的不符合规范的代码，依次点进去可以看到是代码的多少行出现了规约问题以及哪一个规约问题，右边则是规约的详细描述及实例代码。不仅如此，右边还可以点击自动改正代码，但是并不是所有的问题都可以。有些还是需要手动改的。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>用了几天，说一下感受，总体而言对于我个人而言还是有帮助的，它可以帮助我慢慢改掉我编码中的坏习惯，帮助我在编码规范方面成长。那么用了它是不是会让我们代码少一些bug呢？很显然不是，它只是一个监测和提示工具。最后还得靠我们自己。</p>
<p>多说一句，该插件所用的是阿里巴巴公司的开发规范，肯定会与其他的规范有出入。如果觉得不适合公司或者自己的开发习惯，那就没必要用了。适合自己的最好。</p>
]]></content>
      
        <categories>
            
            <category> 编码规范插件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编码规范插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[solr的配置和简单应用]]></title>
      <url>/2017/08/24/solr%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><strong>本文基于solr-6.6 、 tomcat-9、 jdk-1.8</strong></p>
<p>solr下载完成以后解压即可。</p>
<h2 id="在tomcat上安装solr"><a href="#在tomcat上安装solr" class="headerlink" title="在tomcat上安装solr"></a><strong>在tomcat上安装solr</strong></h2><ol>
<li><p>把solr目录下的<code>server/solr-webapp/webapp</code>目录拷贝到<code>tomcat/webapps</code>的目录下,并且重命名为solr（任意名字）</p>
<a id="more"></a>
</li>
<li><p>将<code>solr\server\lib\ext</code>下的所有jar包，以及<code>sol\server\lib</code>下以<code>metrics</code>开头的jar包复制到<code>tomcat\webapps\solr\WEB-INF\lib</code>下</p>
</li>
<li><p>在<code>tomcat\webapps\webapp\WEB-INF</code>中，新建classes文件夹，将<code>solr\server\resources</code>下的<code>log4j.properties</code>文件拷贝到里面，修改里面的solr.log=输出日志的路径（请使用/分割，注意不要有中文，避免乱码问题）</p>
</li>
<li><p>将<code>solr\server</code>中的solr目录拷贝到任意地方，重命名为<code>solrHome</code></p>
</li>
<li><p>修改<code>tomcat\webapps\solr\WEB-INF</code>中的<code>web.xml</code>文件</p>
<p> <img src="/2017/08/24/solr的配置和简单应用/1.png" alt=""></p>
<p> 并且注释调以下代码</p>
<p> <img src="/2017/08/24/solr的配置和简单应用/2.png" alt=""></p>
</li>
<li><p>启动tomcat访问<code>localhost:8080/solr/index.html</code>  </p>
<p> <img src="/2017/08/24/solr的配置和简单应用/15.png" alt=""></p>
</li>
<li><p>目前<code>solrHome</code>目录是空的，我们在<code>solrHome</code>目录下创建一个空文件夹<code>core1</code>，这个就是我们的一个实例。</p>
</li>
<li>把<code>solr/server/solr</code>下的文件复制到<code>solrHome</code>目录下。</li>
<li><p>在solr的管理控制台界面，添加一个core1</p>
<p> <img src="/2017/08/24/solr的配置和简单应用/3.png" alt=""></p>
</li>
<li><p>这下就创建成功了一个实例core1 ,注意，如果无法创建core,看一下是否执行了第8步，网上说这是bug</p>
<p><img src="/2017/08/24/solr的配置和简单应用/4.png" alt=""></p>
</li>
</ol>
<h2 id="Ik中文分词器"><a href="#Ik中文分词器" class="headerlink" title="Ik中文分词器"></a><strong>Ik中文分词器</strong></h2><p> <a href="http://download.csdn.net/download/linzhiqiang0316/9537326" target="_blank" rel="noopener">下载IK分词器</a></p>
<ol>
<li><p>将<code>ik-analyzer-solr5-5.x.jar</code>这个jar包放入<code>tomcat/webapps/solr/WEB-INF/lib</code>里面( 千万不要复制到<code>tomcat/lib</code>中，这样会找不到<code>lucene</code>的类)</p>
</li>
<li><p>将<code>IKAnalyzer.cfg.xml，ext.dic</code>（搜狗的扩展词库），<code>stopword.dic</code>放在<code>tomcat\webapps\solr\WEB-INF\classes</code>目录下</p>
</li>
<li><p>打开<code>solrHome/core1/conf/managed-schema</code>文件 添加以下配置</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_ik"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"index"</span> <span class="attr">useSmart</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKAnalyzer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"query"</span> <span class="attr">useSmart</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKAnalyzer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> <img src="/2017/08/24/solr的配置和简单应用/5.png" alt=""></p>
</li>
<li><p>重启tomcat，即可看到<code>text_ik</code>分词</p>
</li>
</ol>
<h2 id="域"><a href="#域" class="headerlink" title="域"></a><strong>域</strong></h2><ol>
<li><p><strong>插入的文档必须与域相匹配</strong></p>
<p> 域，它在solr中有特定的含义，就类似于数据库表中的列 ，规范着写入的数据。我们先来做个例子。</p>
<p> <img src="/2017/08/24/solr的配置和简单应用/6.png" alt=""></p>
<p> 可以看到，这次插入的文档，有id，title。当然，在solr中，每一条记录都必须有着一个唯一的id，它就类似数据库中的主键，不可重复。这条记录的插入是成功的。</p>
<p> 但是，如果我把title改成title1,这就与定义的字段不一样了，就会报错,可以看到，这里提示，未知的字段 title1.</p>
<p> <img src="/2017/08/24/solr的配置和简单应用/7.png" alt=""></p>
</li>
<li><p><strong>域的定义 field</strong></p>
<p> 先拿出来一条配置来看一下</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span>  <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p> 首先，我们认识一下这些属性</p>
<blockquote>
<p>name: 域名<br>type: 域的类型，必须匹配类型，不然会报错<br>indexed: 是否要做索引<br>stored: 是否要储存<br>required: 是否必填<br>multiValued：是否多值，如果设置为多值，里面的值就会采用数组的方式储存</p>
</blockquote>
</li>
<li><p><strong>动态域 dynamicField</strong></p>
<p> 同样，我们拿出一条来看</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dynamicField</span> <span class="attr">name</span>=<span class="string">"*_i"</span>  <span class="attr">type</span>=<span class="string">"string"</span>    <span class="attr">indexed</span>=<span class="string">"true"</span>  <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p> 那么，什么是动态域呢？就是这个域的名称，是由表达式组成的，只要名称满足了这个表达式，就可以用这个域</p>
<p> 同样的认识一下这些属性</p>
<blockquote>
<p>name: 域的名称，该域的名称是通过一个表达式来指定的，只要符合这这个规 则，就可以使用这个域</p>
<p>type: 对应的值类型，相应的值必须满足这个类型，不然就会报错<br>indexed: 是否要索引<br>stored: 是否要存储<br>…其它的属性与上边的一致</p>
</blockquote>
</li>
<li><p><strong>主键域 uniqueKey</strong></p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uniqueKey</span>&gt;</span>id<span class="tag">&lt;/<span class="name">uniqueKey</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 指定一个唯一的主键，每一个文档中，都应该有一个唯一的主键，这个值不要随便改</p>
</li>
<li><p><strong>复制域 copeField</strong></p>
 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;copyField <span class="attribute">source</span>=<span class="string">"cat"</span> <span class="attribute">dest</span>=<span class="string">"text"</span>/&gt;    </span><br><span class="line">&lt;field <span class="attribute">name</span>=<span class="string">"text"</span> <span class="attribute">type</span>=<span class="string">"string"</span> <span class="attribute">indexed</span>=<span class="string">"true"</span>  <span class="attribute">stored</span>=<span class="string">"true"</span> <span class="attribute">multiValued</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>source: 源域<br>dest: 目标域</p>
</blockquote>
<p> 复制域，将源域的内容复制到目标域中</p>
<p> <em>注意：目标域必须是允许多值的，如下，multiValued必须为true，因为可能 多个源域对应一个目标域，所以它需要以数组来存储</em></p>
</li>
<li><p><strong>域的类型</strong></p>
<p> 同样的给出一段配置</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_general"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span> <span class="attr">positionIncrementGap</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"solr.StandardTokenizerFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.StopFilterFactory"</span> <span class="attr">ignoreCase</span>=<span class="string">"true"</span> <span class="attr">words</span>=<span class="string">"stopwords.txt"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- in this example, we will only use synonyms at query time</span></span><br><span class="line"><span class="comment">        &lt;filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/&gt;--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"solr.StandardTokenizerFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.StopFilterFactory"</span> <span class="attr">ignoreCase</span>=<span class="string">"true"</span> <span class="attr">words</span>=<span class="string">"stopwords.txt"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.SynonymFilterFactory"</span> <span class="attr">synonyms</span>=<span class="string">"synonyms.txt"</span> <span class="attr">ignoreCase</span>=<span class="string">"true"</span>  <span class="attr">expand</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 介绍一下这些属性</p>
<blockquote>
<p>name: 域的名称<br>class: 指定solr的类型<br>analyzer: 分词器的配置<br>type: index(索引分词器)，query(查询分词器)<br>tokenizer: 配置分词器<br>filter: 过滤器</p>
</blockquote>
<p> 所有上述域，都可以在<code>solrHome/core1/conf/managed-schema</code>文件里找到。</p>
</li>
</ol>
<h2 id="字段的实际配置"><a href="#字段的实际配置" class="headerlink" title="字段的实际配置"></a><strong>字段的实际配置</strong></h2><p>首先，打开<code>solrHome/core1/conf/managed-schema</code>文件 </p>
<p><img src="/2017/08/24/solr的配置和简单应用/8.png" alt=""></p>
<p><strong>我们用field来配置实际的业务字段</strong></p>
<p>上边我们配置了中文分词器，已经配置了一个fieldType的中文分词，所 以我们现在一律用中文分词的域类型</p>
<p><img src="/2017/08/24/solr的配置和简单应用/9.png" alt=""></p>
<p>主键的id就不需要配置了，默认已经把id配置为主键了</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;field <span class="attribute">name</span>=<span class="string">"id"</span> <span class="attribute">type</span>=<span class="string">"string"</span> <span class="attribute">indexed</span>=<span class="string">"true"</span> <span class="attribute">stored</span>=<span class="string">"true"</span> <span class="attribute">required</span>=<span class="string">"true"</span> <span class="attribute">multiValued</span>=<span class="string">"false"</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>商品名称(需要分词，需要存储)</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;field <span class="attribute">name</span>=<span class="string">"product_name"</span> <span class="attribute">type</span>=<span class="string">"text_ik"</span> <span class="attribute">indexed</span>=<span class="string">"true"</span> <span class="attribute">stored</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>商品图片(不需要分词，需要存储)</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;field <span class="attribute">name</span>=<span class="string">"product_url"</span> <span class="attribute">type</span>=<span class="string">"string"</span> <span class="attribute">indexed</span>=<span class="string">"false"</span> <span class="attribute">stored</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>商品价格(不需要分词，需要存储)</p>
 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;field <span class="attribute">name</span>=<span class="string">"product_price"</span> <span class="attribute">type</span>=<span class="string">"double"</span> <span class="attribute">indexed</span>=<span class="string">"false"</span> <span class="attribute">stored</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>商品分类(不需要分词，需要存储)</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;field <span class="attribute">name</span>=<span class="string">"product_type"</span> <span class="attribute">type</span>=<span class="string">"int"</span> <span class="attribute">indexed</span>=<span class="string">"false"</span> <span class="attribute">stored</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>商品描述(需要分词，需要存储)</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;field <span class="attribute">name</span>=<span class="string">"product_description"</span> <span class="attribute">type</span>=<span class="string">"text_ik"</span> <span class="attribute">indexed</span>=<span class="string">"true"</span> <span class="attribute">stored</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2017/08/24/solr的配置和简单应用/16.png" alt=""></p>
<p><strong>复制域的应用</strong></p>
<p>用户在搜索框搜索的时候，有可能输入的是商品名称，也有可能输入的是商品描述，也有可能输入的是一个商品类型，那么这些值的搜索，肯定在后台是对应一个域的，那么既然如此，我们就可以把这些域合并成一个，这样在后台只需要单独的对这一个域进行搜索就可以了。</p>
<p>先定义一个目标域：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;field <span class="attribute">name</span>=<span class="string">"aim"</span> <span class="attribute">type</span>=<span class="string">"text_ik"</span> <span class="attribute">indexed</span>=<span class="string">"true"</span>  <span class="attribute">stored</span>=<span class="string">"false"</span>  <span class="attribute">multiValued</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2017/08/24/solr的配置和简单应用/10.png" alt=""></p>
<p>复制域，把商品名称，商品描述，商品类型名称复制到上面的这个域中 </p>
<p><img src="/2017/08/24/solr的配置和简单应用/11.png" alt="">  </p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;copyField <span class="attribute">source</span>=<span class="string">"product_name"</span> <span class="attribute">dest</span>=<span class="string">"aim"</span>/&gt;</span><br><span class="line">&lt;copyField <span class="attribute">source</span>=<span class="string">"product_type"</span> <span class="attribute">dest</span>=<span class="string">"aim"</span>/&gt;</span><br><span class="line">&lt;copyField <span class="attribute">source</span>=<span class="string">"product_description"</span> <span class="attribute">dest</span>=<span class="string">"aim"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="dataimport-导入数据库数据"><a href="#dataimport-导入数据库数据" class="headerlink" title="dataimport 导入数据库数据"></a><strong>dataimport 导入数据库数据</strong></h2><p>solr默认是没有开启dataimport这个功能的，所以我们要经过一点配置来开启它</p>
<ol>
<li><p>首先找到<code>solr/dist/solr-dataimporthandler-6.6.0.jar</code>，把这个文件复制到<code>tomcat/webapp/solr/WEB-INF/lib/</code>下(前面拷贝过的忽略此操作)。并且找到相应数据库的驱动包，也同样放到该目录。我这里用的是mysql 的驱动</p>
</li>
<li><p>找到<code>solrHome/core1/conf/solrconfig.xml</code>，并打开，在里面添加一段内容</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;requestHandler name=<span class="string">"/dataimport"</span>  <span class="class"><span class="keyword">class</span></span>=<span class="string">"solr.DataImportHandler"</span>&gt;</span><br><span class="line">    &lt;lst name=<span class="string">"defaults"</span>&gt;</span><br><span class="line">        &lt;str name=<span class="string">"config"</span>&gt;data-config.xml&lt;<span class="regexp">/str&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>lst&gt;</span><br><span class="line">&lt;<span class="regexp">/requestHandler&gt;</span></span><br></pre></td></tr></table></figure>
<p> <img src="/2017/08/24/solr的配置和简单应用/12.png" alt=""></p>
</li>
<li><p>找到<code>solr/example/example-DIH/solr/db/conf/db-dataconfig.xml</code>，把其复制到<code>solrHome/core1/conf/</code>下，并改名为<code>data-config.xml</code>, 打开并编辑，修改如下</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataConfig</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这是mmysql的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">driver</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">url</span>=<span class="string">"jdbc:mysql://localhost:3306/solr"</span> <span class="attr">user</span>=<span class="string">"你的账号"</span> <span class="attr">password</span>=<span class="string">"你的密码"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">document</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name属性，就代表着一个文档，可以随便命名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- query是一条sql，代表在数据库查找出来的数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entity</span> <span class="attr">name</span>=<span class="string">"product"</span> <span class="attr">query</span>=<span class="string">"select * from product"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 每一个field映射着数据库中列与文档中的域，column是数据库列，name是solr的域(必须是在managed-schema文件中配置过的域才行) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">name</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"product_name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">"product_url"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">name</span>=<span class="string">"product_price"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"type"</span> <span class="attr">name</span>=<span class="string">"product_type"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"description"</span> <span class="attr">name</span>=<span class="string">"product_description"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataConfig</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> <img src="/2017/08/24/solr的配置和简单应用/13.png" alt=""></p>
</li>
<li><p>重启tomcat， 会看到如下页面</p>
<p> <img src="/2017/08/24/solr的配置和简单应用/14.png" alt=""></p>
</li>
<li><p>点击蓝色的按钮，则开始导入，导入过程依据数量量的大小，需要的时间也不同，可以点击右边的<code>Refresh status</code>来刷新状态，可以查看当前导入了多少条</p>
</li>
</ol>
<h2 id="solrJ的使用"><a href="#solrJ的使用" class="headerlink" title="solrJ的使用"></a><strong>solrJ的使用</strong></h2><p>现在说一下使用solrj来维护solr的索引及操作，solrj就是一个java的客户端，是一个jar包的使用，首先引入MAVEN的依赖，solrj的版本号要对应solr的版本号</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.solr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>solr-solrj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>增加及修改</strong></p>
<p>在solr中，增加与修改都是一回事，当这个id不存在时，则是添加，当这个id存在时，则是修改</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> String serverUrl = <span class="string">"http://10.60.20.152:8080/solr/core1"</span>;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> SolrServerException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    HttpSolrClient client = <span class="keyword">new</span>  HttpSolrClient(serverUrl);</span><br><span class="line">    SolrInputDocument doc = <span class="keyword">new</span> SolrInputDocument();</span><br><span class="line">    </span><br><span class="line">    doc.addField(<span class="string">"id"</span>, <span class="string">"5008"</span>);</span><br><span class="line">    doc.addField(<span class="string">"product_name"</span>, <span class="string">"姓名"</span>);</span><br><span class="line">    doc.addField(<span class="string">"product_type"</span>, <span class="string">"1"</span>);</span><br><span class="line">    doc.addField(<span class="string">"product_url"</span>, <span class="string">"图片"</span>);</span><br><span class="line">    doc.addField(<span class="string">"product_price"</span>, <span class="string">"11"</span>);</span><br><span class="line">    doc.addField(<span class="string">"product_description"</span>, <span class="string">"这是一个测试例子"</span>);</span><br><span class="line">    </span><br><span class="line">    client.add(doc);</span><br><span class="line">    client.commit();</span><br><span class="line">    client.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>删除索引</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String serverUrl = <span class="string">"http://10.60.20.152:8080/solr/core1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    HttpSolrClient client = <span class="keyword">new</span>  HttpSolrClient(serverUrl);</span><br><span class="line">    <span class="comment">//1.删除一个</span></span><br><span class="line">    client.deleteById(<span class="string">"5008"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.删除多个</span></span><br><span class="line">    List&lt;String&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ids.add(<span class="string">"1"</span>);</span><br><span class="line">    ids.add(<span class="string">"2"</span>);</span><br><span class="line">    client.deleteById(ids);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.根据查询条件删除数据,这里的条件只能有一个，不能以逗号相隔</span></span><br><span class="line">    client.deleteByQuery(<span class="string">"id:5008"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.删除全部，删除不可恢复</span></span><br><span class="line">    client.deleteByQuery(<span class="string">"*:*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一定要记得提交，否则不起作用</span></span><br><span class="line">    client.commit();</span><br><span class="line">    client.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>查询</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String serverUrl = <span class="string">"http://10.60.20.152:8080/solr/core1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    HttpSolrClient client = <span class="keyword">new</span>  HttpSolrClient(serverUrl);</span><br><span class="line">    <span class="comment">//创建查询对象</span></span><br><span class="line">    SolrQuery query = <span class="keyword">new</span> SolrQuery();</span><br><span class="line">    <span class="comment">//q 查询字符串，如果查询所有*:*</span></span><br><span class="line">    query.set(<span class="string">"q"</span>, <span class="string">"product_name:潇洒"</span>);</span><br><span class="line">    <span class="comment">//fq 过滤条件，过滤是基于查询结果中的过滤</span></span><br><span class="line">    query.set(<span class="string">"fq"</span>, <span class="string">"product_type:1"</span>);</span><br><span class="line">    <span class="comment">//sort 排序，请注意，如果一个字段没有被索引，那么它是无法排序的</span></span><br><span class="line">    <span class="comment">//query.set("sort", "product_price desc");</span></span><br><span class="line">    <span class="comment">//start row 分页信息，与mysql的limit的两个参数一致效果</span></span><br><span class="line">    query.setStart(<span class="number">0</span>);</span><br><span class="line">    query.setRows(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//fl 查询哪些结果出来，不写的话，就查询全部、</span></span><br><span class="line">    <span class="comment">// query.set("fl", "");</span></span><br><span class="line">    <span class="comment">//df 默认搜索的域</span></span><br><span class="line">    query.set(<span class="string">"df"</span>, <span class="string">"product_keywords"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//高亮设置</span></span><br><span class="line">    <span class="comment">//开启高亮</span></span><br><span class="line">    query.setHighlight(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//高亮域</span></span><br><span class="line">    query.addHighlightField(<span class="string">"product_name"</span>);</span><br><span class="line">    <span class="comment">//前缀</span></span><br><span class="line">    query.setHighlightSimplePre(<span class="string">"&lt;span style='color:red'&gt;"</span>);</span><br><span class="line">    <span class="comment">//后缀</span></span><br><span class="line">    query.setHighlightSimplePost(<span class="string">"&lt;/span&gt;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行搜索</span></span><br><span class="line">    QueryResponse queryResponse = client.query(query);</span><br><span class="line">    <span class="comment">//搜索结果</span></span><br><span class="line">    SolrDocumentList results = queryResponse.getResults();</span><br><span class="line">    <span class="comment">//查询出来的数量</span></span><br><span class="line">    <span class="keyword">long</span> numFound = results.getNumFound();</span><br><span class="line">    System.out.println(<span class="string">"总查询出:"</span> + numFound + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历搜索记录</span></span><br><span class="line">    <span class="comment">//获取高亮信息</span></span><br><span class="line">    Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt; highlighting = queryResponse.getHighlighting();</span><br><span class="line">    <span class="keyword">for</span> (SolrDocument solrDocument : results) &#123;</span><br><span class="line">        System.out.println(<span class="string">"商品id:"</span> + solrDocument.get(<span class="string">"id"</span>));</span><br><span class="line">        System.out.println(<span class="string">"商品名称 :"</span> + solrDocument.get(<span class="string">"product_name"</span>));</span><br><span class="line">        System.out.println(<span class="string">"商品分类:"</span> + solrDocument.get(<span class="string">"product_type"</span>));</span><br><span class="line">        System.out.println(<span class="string">"商品价格:"</span> + solrDocument.get(<span class="string">"product_price"</span>));</span><br><span class="line">        System.out.println(<span class="string">"商品描述:"</span> + solrDocument.get(<span class="string">"product_description"</span>));</span><br><span class="line">        System.out.println(<span class="string">"商品图片:"</span> + solrDocument.get(<span class="string">"product_url"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出高亮</span></span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map = highlighting.get(solrDocument.get(<span class="string">"id"</span>));</span><br><span class="line">        List&lt;String&gt; list = map.get(<span class="string">"product_name"</span>);</span><br><span class="line">        <span class="keyword">if</span>(list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(list.get(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a><strong>补充</strong></h2><blockquote>
<p>q - 查询字符串，如果查询所有: (id:1)<br>fq - （filter query）过虑查询，过滤条件，基于查询出来的结果<br>fl - 指定返回那些字段内容，用逗号或空格分隔多个<br>start - 分页开始<br>rows - 分页查询数据<br>sort - 排序，格式：sort=+[,+]… 。示例：（score desc, price asc）表示先 “score” 降序, 再 “price” 升序，默认是相关性降序。<br>fl表示索引显示那些field(表示所有field,如果想查询指定字段用逗号或空格隔开（如：Name,SKU,ShortDescription或Name SKU &gt;ShortDescription【注：字段是严格区分大小写的】）)<br>hl 是否高亮 ,如hl=true<br>hl.fl 高亮field ,hl.fl=Name,SKU<br>hl.simple.pre 高亮前面的格式<br>hl.simple.post 高亮后面的格式</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> solr </category>
            
        </categories>
        
        
        <tags>
            
            <tag> solr </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浮生若梦]]></title>
      <url>/2017/07/17/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/</url>
      <content type="html"><![CDATA[<p><img src="/2017/07/17/浮生若梦/梦.jpg" alt=""></p>
<blockquote>
<p>浮生若梦,若梦非梦,浮生何如,如梦之梦 ——— 庄子《如梦之梦》</p>
</blockquote>
<p>你现在二十五六岁，大学毕业两三年，或者差不多研究生刚毕业。你有着一份还算凑合的工作，天天宅在冷气十足的办公室里，每个月拿到手的钱，交了房租吃了饭，所剩无几。</p>
<a id="more"></a>
<p>每天晚上六点半，当时钟跳过员工手册上写着的下班时间，你从来不会有任何的反应。</p>
<p>离开校园上班不过两三年，你已经写成了一套属于自己的作息节奏：</p>
<p>你每天晚上七点下楼，去楼下的小餐馆来一碗重庆小面吸嗦满嘴是油；七点半你上楼继续坐在办公桌前干活；你心里想着，妈蛋怎么都没有人下班，真是一群神经病；殊不知你也可能一不留神成为另一个人心中的神经病；九点半，你终于收拾东西，回到你的出租房。</p>
<p>你躺在床上，辗转反侧，寂寞难眠，你总觉的你一天什么事情都没干，青春不是应该释放激情与梦想吗？怎么看起来那么颓废。你盘算着明天就辞职，然后去自驾游，去看海，去隐居，但想到银行卡的余额，你呵呵呵呵呵笑起来，还是算了吧！</p>
<p>那些曾经的同学们都开始结婚了。你在微信里收到了一条条设计华丽带着动画和音乐的婚礼邀请函。你一边用没时间婉拒着他们的婚礼邀请，一边感叹，卧槽这么早就结婚了。</p>
<p>你想找个人谈恋爱，可是你还没准备好，在你的生命中出现另外一个人是多么的累。你根本就忘记了如何去爱。</p>
<p>你说你满怀理想，你文艺青年，你从来觉得在农家菜馆聚餐点一桌子毛血旺是一件很low的事情，你从来都厌恶一群人的娱乐生活只有去洗脚、按摩、打麻将、去KTV唱爱情买卖。</p>
<p>你觉得你想要的生活绝不是这样。</p>
<p>你穷，你却喜欢健身，喜欢吉他、喜欢巴洛克音乐与延时摄影，你坚持去健身，你坚持去听独立歌手的演出，你坚持读书。你就是这么的逼格甚高，但你每天都过得好不快乐。</p>
<p>你一直还是认为爱情是件很美好的事情，你一定要找到那个对的人，你没有主动去追逐某些人，你相信缘分。然而现在，你已经失去了好多的机会，你身边的异性们，一个个脱离单身，而你，却只能假装用”不讲究“的理由默默承受着焦虑。</p>
<p>当然，更悲剧的是，每天的枯燥的工作，和虚无缥缈的理想追求，占据了你大量的思考的时间，你已经习惯了你现在的状态。单身，对你来说是一个安全的保护区，你根本不敢去突破你的保护区，你觉得你根本没经济接受你的生命中多出来的那个人。</p>
<p>你一无所有，在大城市里你没有房子和车子，你没有时间，没有喜欢的人，没有理想；你离家千里，你忘了自己当时为什么路途遥遥来到这里，住在这租来的小房子里，却每天只是为了在这里睡上一觉。</p>
<p>其实你一直觉得自己还很年轻。你才毕业两三年，你在任何的职业发展中都只是一个初级的小白。可是你却发现，一切都变得和以前完全不一样了，见到好久不见老朋友，你不会再和他互骂傻逼，不会再和他深夜饮酒不醉不归，不会再和他骑行百公里，只为去想去的地方看一看大海。如今的你，和他一壶清茶，聊起的话题，都是关于工作、婚姻和财富自由。你终于变成了你以前所讨厌的那个能在众人面前谈笑风生好几个小时，讲着一个丑的不行的PPT自嗨的不行的那个人。</p>
<p>你从未想过，这一切，居然变得那么快。</p>
<p>你身边的朋友，买车了、买房了、辞职了、环游世界了、家里拆迁了、创业了融资了、结婚了。每一天，你的内心都在经受着来自他人的波澜。你无奈，你沮丧，你迷失了自己。在你的出租房的公用卫生间里，刷牙洗脸，你看着墙壁上镜子中的自己：又丑又穷；一口漱口水吐掉之后，你终于自言自语对自己说：“难怪没有人喜欢我”。</p>
<p>那么，然后呢？</p>
<p>就这样随波逐流，还是做出改变，还是坚持自我呢？</p>
<p>人生如戏，或者是孤独地像条狗，或者是假装合群扮小丑，都是你自己的选择。</p>
]]></content>
      
        <categories>
            
            <category> 不知所云 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 不知所云，摘抄 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[风景旧曾谙]]></title>
      <url>/2017/06/30/%E9%A3%8E%E6%99%AF%E6%97%A7%E6%9B%BE%E8%B0%99/</url>
      <content type="html"><![CDATA[<p><img src="/2017/06/30/风景旧曾谙/江南.png" alt=""></p>
<p>七月将至， 天气慢慢炎热而躁动。来杭州已九月有余。</p>
<p>初来杭州，怀着美好的憧憬一心想去走走，看许仙和白娘子相遇的断桥，看充满神话色彩的雷峰塔。看济公修行之地灵隐寺等等。</p>
<p>然而始终未曾迈出一步。一来公司996累成狗，二来无人同行，感觉会少很多乐趣。</p>
<a id="more"></a>
<p>上班、吃饭、下班、睡觉的机械日子就这样慢慢过去了。</p>
<p>人嘛，总会厌烦浑浑噩噩的生活，我开始买了很多书，东野圭吾的，三毛的，韩寒的，余华的等等。开始充实自己，除了代码外，我开始享受这些，不说提高什么，觉得比下班打游戏看电视有意义些。</p>
<p>说起健身，还是合租的一个姑娘带我去的。她说要去减肥，我说，走，我也去，我要去增肥。她鄙视我说等我真的增肥成功了，想减肥就难了。然而，一个月过去了，我体重一毛没增加。但是胳膊和胸部的肌肉稍微有一丢丢凸显了。这也是成果。不能急，我相信胸肌会有的，腹肌也会有的。</p>
<p>换了公司，自由时间也多了。慢慢培养起来的爱好和习惯，更有时间和理由去坚持了，决定出去走走，把刚来杭州的憧憬，一点点实现。 不为别的，我只是不想满足于现状。</p>
<p>和朋友扯淡的时间慢慢少了，有时偶尔聊起天来，他们会说，最近跟灭绝了似的。“哈哈。是的，我在努力提高自己，寻找我的意中人 ”我笑。</p>
<p>可能是代码写多了，感觉世界的逻辑有时很简单。</p>
<p>事情无非是let，变化历历</p>
<p>或者是const，永恒安息</p>
<p>如果一开始就想清楚，留不住的就随风去，不会变的就钉到骨子里。那你说多轻松。</p>
<p>打雷了，杭州的天总是这样，大太阳说下雨就下雨，也凉快了不少。</p>
<p>偌大的杭州，一个人独来独往。不过每一天过的也很充实。江南好， 风景旧曾谙。我喜欢。</p>
<p><img src="/2017/06/30/风景旧曾谙/鸟.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 不知所云 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 不知所云 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MAC下配置环境变量]]></title>
      <url>/2017/06/25/MAC%E4%B8%8B%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h2 id="配置JAVA环境变量"><a href="#配置JAVA环境变量" class="headerlink" title="配置JAVA环境变量"></a><strong>配置JAVA环境变量</strong></h2><p>大家在windows里面配置JDK环境变量很容易，但是如果要在mac里面配置JDK环境变量和windows里面有所不同,虽然Mac自带有jdk,但是版本比较低。我们讲的是自己下载的jdk。</p>
<p>jdk的下载路径， Library:就是资源库</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>打开配置文件 <code>.bash_profile</code></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span> .bash_profile</span><br></pre></td></tr></table></figure>
<p>如果没有 <code>.bash_profile</code> 创建文件后打开</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">touch</span> <span class="selector-class">.bash_profile</span></span><br></pre></td></tr></table></figure>
<p>把下面的代码复制进去, <strong>注意替换成你的jdk版本</strong></p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=<span class="regexp">/Library/</span>Java/JavaVirtualMachines/jdk1.<span class="number">8.0_131</span>.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/<span class="class"><span class="keyword">lib</span>/<span class="title">dt</span>.<span class="title">jar</span>:$<span class="title">JAVA_HOME</span>/<span class="title">lib</span>/<span class="title">tools</span>.<span class="title">jar</span></span></span><br><span class="line"></span><br><span class="line">export $JAVA_HOME/<span class="symbol">bin:</span>$<span class="symbol">PATH:</span></span><br></pre></td></tr></table></figure>
<p>然后保存并退出 <code>.bash_profile</code></p>
<p>输入下面的命令使修改生效</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure>
<p>使用如下命令查看环境变量是否已经配置成功：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure>
<p>如果出现下图，说明配置成功了</p>
<p><img src="/2017/06/25/MAC下配置环境变量/1.png" alt=""></p>
<h2 id="配置maven环境变量"><a href="#配置maven环境变量" class="headerlink" title="配置maven环境变量"></a><strong>配置maven环境变量</strong></h2><p>打开终端,输入</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span> .bash_profile</span><br></pre></td></tr></table></figure>
<p>输入Maven安装包路径, 注意替换成你的解压路径</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">M2_HOME</span>=/Library/apache-maven-3.5.0</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$M2_HOME/bin</span><br></pre></td></tr></table></figure>
<p>保存修改并关闭 <code>.bash_profile</code> </p>
<p>输入 <code>source .bash_profile</code> 使修改生效</p>
<p>输入 <code>mvn -v</code> 验证Maven是否配置成功，如果显示Maven版本信息则配置成功。 </p>
<p><img src="/2017/06/25/MAC下配置环境变量/2.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 环境变量 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 环境变量 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo绑定域名]]></title>
      <url>/2017/06/24/hexo%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>因为Hexo个人博客是托管在github之上，每次访问都要使用githubyourname.github.io这么一个长串的域名来访问，会显得非常繁琐。这个时候我们可以购买一个域名，设置DNS跳转，以达到通过域名即可访问我们的个人博客。通过查阅文档发现，github pages是支持域名绑定的。</p>
<a id="more"></a>
<h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a><strong>购买域名</strong></h2><p>国内国外有很多的域名供应商，选择一个好的机构购买域名，我是在阿里的万网购买的。通过搜索找到自己喜欢的域名，然后加入清单，然后去付款就好了。</p>
<p>现在你的域名还处于sever状态，你需要去实名认证，上传你的身份证正面照就好了，官方说3～5个工作日，不过我的一天就认证好了。</p>
<p>然后你需要进行域名解析。进入<a href="https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fhome.console.aliyun.com%2Fnew#/" target="_blank" rel="noopener">阿里云控制台</a></p>
<p><img src="/2017/06/24/hexo绑定域名/1.png" alt=""></p>
<p>点击域名，进入下图页面</p>
<p><img src="/2017/06/24/hexo绑定域名/2.png" alt=""></p>
<p>点击解析</p>
<p><img src="/2017/06/24/hexo绑定域名/3.png" alt=""></p>
<blockquote>
<p>记录类型选择:CNAME<br>主机记录选择：*<br>记录值： 你的github博客网址 ,我的是litxiaosa.github.io</p>
</blockquote>
<h2 id="hexo-添加CNAME文件"><a href="#hexo-添加CNAME文件" class="headerlink" title="hexo 添加CNAME文件"></a><strong>hexo 添加CNAME文件</strong></h2><p>这些全部设置完成后，此时你并不能要申请的域名访问你的博客，接着你需要做的是在blog根目录的source文件夹里创建CNAME文件，不带任何后缀，里面添加你的域名信息，如：litxiaosa.me</p>
<p>然后等几分钟访问一下吧。</p>
<h2 id="安装畅言评论系统"><a href="#安装畅言评论系统" class="headerlink" title="安装畅言评论系统"></a><strong>安装畅言评论系统</strong></h2><p>现在你已经有了域名和备案了，那么我们就可以安装畅言评论系统了，这里是<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言官方网站</a>。注册账号，去认证，备案，这里默认这一系列步骤都操作完成了。</p>
<p>然后我们登陆账号，进入后台，下面有个畅言秘钥。</p>
<p><img src="/2017/06/24/hexo绑定域名/4.png" alt=""></p>
<p><img src="/2017/06/24/hexo绑定域名/5.png" alt=""></p>
<p>由于该主题没有集成畅言评论，所以我们得自己配置,在<code>_yelee/layout/_partial/comments</code> 文件夹中新建一个 <code>changyan.ejs</code> 的文件，把上边那个代码拷贝进去，然后appid替换成你的appid， conf替换成你的appKey。添加 红色框住的代码。保存。</p>
<p><img src="/2017/06/24/hexo绑定域名/6.png" alt=""></p>
<p>进入 <code>layout/_partial/article.ejs</code> 文件， 添加一下代码</p>
<figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theme.changyan.on) &#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'comments/changyan'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><img src="/2017/06/24/hexo绑定域名/7.png" alt=""></p>
<p>进入 <code>_config.yml</code> 根目录 添加下面的配置。</p>
<p><img src="/2017/06/24/hexo绑定域名/8.png" alt=""></p>
<p>部署线上，就看到添加的评论系统了。</p>
<p><img src="/2017/06/24/hexo绑定域名/9.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安装和配置主题]]></title>
      <url>/2017/06/24/%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a><strong>安装主题</strong></h2><p>hexo 自带的主题略显简单了，这里我们介绍安装yelee主题，你也可以选择<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">其他主题</a>，只是把路径改成你想安装主题的路径就好了，进入你之前创建的文件夹下，执行下面的命令</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</span><br></pre></td></tr></table></figure>
<p>等它克隆好了以后，你就会看到你的文件夹下<code>/themes</code>多了一个<code>yelee</code>文件夹</p>
<a id="more"></a>
<p><img src="/2017/06/24/安装和配置主题/1.png" alt=""></p>
<h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a><strong>切换主题</strong></h2><p>修改根目blog根目录下的 <code>_config.yml</code></p>
<p><img src="/2017/06/24/安装和配置主题/2.png" alt=""></p>
<h2 id="修改主题设置"><a href="#修改主题设置" class="headerlink" title="修改主题设置"></a><strong>修改主题设置</strong></h2><p>接下来，让我们看看主题的配置文件吧。进入<code>yelee</code>目录，打开该目录的  <code>_config.yml</code> ,这里是我配置的。都有中文注释，应该可以看懂的。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Theme Version | 当前版本</span></span><br><span class="line"><span class="attr">Yelee:</span> <span class="string">"3.5"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;" Basic Setup | 基础设置 &lt;&lt;&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Header | 主菜单</span></span><br><span class="line"><span class="comment">## About Page: `hexo new page about`</span></span><br><span class="line"><span class="comment">## Tags Cloud Page: `hexo new page tags`</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">所有文章:</span> <span class="string">/archives/</span></span><br><span class="line">  <span class="comment">#随笔: /tags/随笔</span></span><br><span class="line">  <span class="string">标签云:</span> <span class="string">/tags/</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/about/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Link to your avatar | 填写头像地址</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/img/头像.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Small icon of Your site | 站点小图标地址</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/站点小图标.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Internationalization | 主题语言</span></span><br><span class="line"><span class="comment">## Change Language in SITE's _config.yml | 在站点配置中切换语言</span></span><br><span class="line"><span class="comment">## https://hexo.io/docs/internationalization.html</span></span><br><span class="line"><span class="comment">## Available Languages: en, zh-Hans, zh-Hant-TW, zh-Hant-HK</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subdirectory | 子目录</span></span><br><span class="line"><span class="comment">## If your site' url is 'http://yoursite.com/blog', set root_url as '/blog/'</span></span><br><span class="line"><span class="comment">## 网站若存放在子目录，请按上面格式填写</span></span><br><span class="line"><span class="comment">## https://hexo.io/docs/configuration.html#URL</span></span><br><span class="line"><span class="attr">root_url:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Year of Site Creation | 网站成立年份</span></span><br><span class="line"><span class="attr">since:</span> <span class="number">2017</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Social info. Bar | 社交信息展示</span></span><br><span class="line"><span class="comment">## Keep "mailto:" in Email | 设置 Email 时保留 "mailto:"</span></span><br><span class="line"><span class="comment">## Encrypt email 加密邮件地址 http://ctrlq.org/encode/</span></span><br><span class="line"><span class="comment">## RSS requires a plugin to take effect | 使用 RSS 需先安装对应插件</span></span><br><span class="line"><span class="comment">## https://github.com/hexojs/hexo-generator-feed</span></span><br><span class="line"></span><br><span class="line"><span class="attr">subnav:</span></span><br><span class="line">  <span class="comment">#Email: "mailto:123@123.com"</span></span><br><span class="line">  <span class="string">新浪微博:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="string">""</span></span><br><span class="line">  <span class="comment">#V2EX: "#"</span></span><br><span class="line">  <span class="comment">#RSS: "/atom.xml"</span></span><br><span class="line">  <span class="string">知乎:</span> <span class="string">""</span></span><br><span class="line">  <span class="comment">#豆瓣: "douban"</span></span><br><span class="line">  <span class="comment">#简书: "jianshu"</span></span><br><span class="line">  <span class="comment">#SegmentFault: ""</span></span><br><span class="line">  <span class="comment">#博客园: "cnblogs"</span></span><br><span class="line">  <span class="comment">#CSDN: ""</span></span><br><span class="line">  <span class="comment">#Coding: ""</span></span><br><span class="line">  <span class="comment">#网易云音乐: "netease"</span></span><br><span class="line">  <span class="comment">#虾米音乐: "xiami"</span></span><br><span class="line">  <span class="comment">#bilibili: ""</span></span><br><span class="line">  <span class="comment">#AcFun: ""</span></span><br><span class="line">  <span class="comment">#niconico: ""</span></span><br><span class="line">  <span class="comment">#Quora: ""</span></span><br><span class="line">  <span class="comment">#Facebook: "#"</span></span><br><span class="line">  <span class="comment">#Google: "#"</span></span><br><span class="line">  <span class="comment">#Twitter: "#"</span></span><br><span class="line">  <span class="comment">#LinkedIn: "#"</span></span><br><span class="line">  <span class="comment">#QQ: "#"</span></span><br><span class="line">  <span class="comment">#微信: "Wechat"</span></span><br><span class="line">  <span class="comment">#PayPal: "#"</span></span><br><span class="line">  <span class="comment">#StackOverflow: "#"</span></span><br><span class="line">  <span class="comment">#CodePen: ""</span></span><br><span class="line">  <span class="comment">#Plunker: ""</span></span><br><span class="line">  <span class="comment">#Instagram: "#"</span></span><br><span class="line">  <span class="comment">#LOFTER: ""</span></span><br><span class="line">  <span class="comment">#Flickr: "#"</span></span><br><span class="line">  <span class="comment">#reddit: ""</span></span><br><span class="line">  <span class="comment">#Medium: ""</span></span><br><span class="line">  <span class="comment">#TiddlyWiki: ""</span></span><br><span class="line">  <span class="comment">#Tumblr: ""</span></span><br><span class="line">  <span class="comment">#_500px: ""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Conments 评论系统 &lt;&lt;&lt;</span></span><br><span class="line"><span class="comment"># Chose ONE as your comment system and keep others disable.</span></span><br><span class="line"><span class="comment"># 选一个作为网站评论系统，其他保持禁用。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">preload_comment:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">## false: 当点击评论条等区域时再加载评论模块</span></span><br><span class="line"><span class="comment">## false: load comment's section until u click/hover on the bar/icon</span></span><br><span class="line"></span><br><span class="line"><span class="attr">show_count:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">## 是否在主页文章标题旁显示评论数（多说、Disqus）</span></span><br><span class="line"><span class="comment">## Add comment count after article title</span></span><br><span class="line"></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="comment">#on: true</span></span><br><span class="line"><span class="attr">  shortname:</span></span><br><span class="line">  <span class="comment"># https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-</span></span><br><span class="line">  <span class="comment"># It is unnecessary to enable disqus here if</span></span><br><span class="line">  <span class="comment"># you have set "disqus_shortname" in your site's "_config.yml"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">duoshuo:</span></span><br><span class="line">  <span class="comment">#on: true</span></span><br><span class="line"><span class="attr">  domain:</span></span><br><span class="line">  <span class="comment"># 是否开启多说评论，http://duoshuo.com/create-site/</span></span><br><span class="line">  <span class="comment"># 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名前半部分</span></span><br><span class="line">  <span class="comment"># http://&lt;要填的部分&gt;.duoshuo.com (domain只填上&lt;&gt;里的内容，不要填整个网址)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">youyan:</span></span><br><span class="line">  <span class="comment">#on: true</span></span><br><span class="line"><span class="attr">  id:</span></span><br><span class="line">  <span class="comment"># 是否开启友言评论，http://www.uyan.cc/index.php</span></span><br><span class="line">  <span class="comment"># id 中填写你的友言用户数字ID，注册后进入后台管理即可查看</span></span><br><span class="line">  <span class="comment"># 友言服务在 Web 环境下运行，普通本地环境无法查看，请部署后在线上测试。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Style Customisation 样式自定义 &lt;&lt;&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Background | 背景</span></span><br><span class="line"><span class="comment">## "5": show images form bg-1.jpg to bg-5.jpg in `/yelee/source/background/`</span></span><br><span class="line"><span class="comment">## "5": 显示`/yelee/source/background/`文件夹中 bg-1.jpg 到 bg-5.jpg 这5张图片</span></span><br><span class="line"><span class="comment">## "0": white-gray background | 淳朴灰白背景</span></span><br><span class="line"><span class="attr">background_image:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Base Font Size | 字号调节</span></span><br><span class="line"><span class="attr">base_font_size:</span> <span class="number">16</span>  <span class="comment">#px, 16 - 24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## General Color Scheme | 主题配色方案</span></span><br><span class="line"><span class="comment">## 可用值 Value: yilia</span></span><br><span class="line"><span class="attr">color_scheme:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">highlight_style:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  inline_code:</span> <span class="number">2</span>  <span class="comment"># Value: 0 - 9 可选</span></span><br><span class="line"><span class="attr">  code_block:</span> <span class="number">0</span>  <span class="comment"># Value: 0 - 4</span></span><br><span class="line">  <span class="comment"># Set inline_code to style highlight text</span></span><br><span class="line">  <span class="comment"># Chose a highlight theme for code block</span></span><br><span class="line">  <span class="comment"># 通过 inline_code 切换内置文本高亮样式</span></span><br><span class="line">  <span class="comment"># 通过 code_block 切换内置代码高亮配色主题</span></span><br><span class="line"></span><br><span class="line"><span class="attr">blockquote_style:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  blockquote:</span> <span class="number">3</span>  <span class="comment"># Value: 0 - 7 可选</span></span><br><span class="line">  <span class="comment"># 自定义文章「引用部分」的样式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Headings Style | 标题风格</span></span><br><span class="line"><span class="comment">## 0-Yelee, 1-Yilia, 2-GitHub</span></span><br><span class="line"><span class="attr">heading_style:</span> <span class="number">0</span> <span class="comment"># Value: 0 - 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## List style type (ul) | 无序列表项标记样式</span></span><br><span class="line"><span class="attr">list_style:</span> <span class="number">0</span>  <span class="comment"># value: 0 - 12 可选</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 左边栏宽度 px</span></span><br><span class="line"><span class="attr">left_col_width:</span> <span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copyright info. of post | 文末版权信息</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Table of contents | 文章目录</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  list_number:</span> <span class="literal">true</span> <span class="comment"># 目录序号</span></span><br><span class="line"><span class="attr">  max_depth:</span> <span class="number">5</span>  <span class="comment"># 1 - 6 (h1-h6) 目录最大级数</span></span><br><span class="line"><span class="attr">  nowrap:</span> <span class="literal">false</span> <span class="comment"># Keep title on same line | 目录标题不换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启主页及加载头像时的动画效果</span></span><br><span class="line"><span class="comment"># Animation in Homepage and Loading avatar</span></span><br><span class="line"><span class="attr">animate:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load jQuery UI to style tooltips</span></span><br><span class="line"><span class="comment"># 工具提示框样式美化</span></span><br><span class="line"><span class="attr">jquery_ui:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Max width of right cloumn | 限制右侧内容的宽带</span></span><br><span class="line"><span class="attr">limit_article_width:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  max_width:</span> <span class="number">60</span> <span class="comment"># em</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Small features | 小功能设置 &lt;&lt;&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启边栏多标签切换</span></span><br><span class="line"><span class="comment"># Birdhouse button in left column</span></span><br><span class="line"><span class="attr">tagcloud:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Blogroll, Link exchange | 友情链接</span></span><br><span class="line"><span class="comment">#friends:</span></span><br><span class="line">  <span class="comment">#Hexo: https://hexo.io</span></span><br><span class="line">  <span class="comment">#GitHub: https://pages.github.com/</span></span><br><span class="line">  <span class="comment">#MOxFIVE: http://moxfive.xyz/</span></span><br><span class="line"><span class="attr">friends:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启“关于我”。</span></span><br><span class="line"><span class="attr">aboutme:</span> </span><br><span class="line"><span class="comment">#aboutme: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Open link in a new tab | 是否在新窗口打开链接</span></span><br><span class="line"><span class="comment">## `global` 0: Set separately, 1: Open all in new 2: Open all in current</span></span><br><span class="line"><span class="comment">## `global` 0: 分开设置, 1: 全部在新标签打开, 2: 全部在"当前"标签打开</span></span><br><span class="line"><span class="attr">open_in_new:</span></span><br><span class="line"><span class="attr">  global:</span> <span class="number">0</span> <span class="comment"># 0-2</span></span><br><span class="line"><span class="attr">  title:</span> <span class="literal">false</span> <span class="comment"># article title in homepage 主页文章标题</span></span><br><span class="line"><span class="attr">  post:</span> <span class="literal">true</span> <span class="comment"># link within post/page 正文中的链接</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="literal">false</span> <span class="comment"># 标签</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="literal">false</span> <span class="comment"># 分类</span></span><br><span class="line"><span class="attr">  article_nav:</span> <span class="literal">false</span> <span class="comment"># 导航</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="literal">false</span> <span class="comment"># 归档</span></span><br><span class="line"><span class="attr">  mini_archives:</span> <span class="literal">false</span> <span class="comment"># 迷你归档</span></span><br><span class="line"><span class="attr">  menu:</span> <span class="literal">false</span> <span class="comment"># 边栏菜单</span></span><br><span class="line"><span class="attr">  friends:</span> <span class="literal">true</span>  <span class="comment"># 友情链接</span></span><br><span class="line"><span class="attr">  socail:</span> <span class="literal">false</span> <span class="comment"># 社交图标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Customize feed link 自定义订阅地址</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update Reminder for IE6/7/8</span></span><br><span class="line"><span class="comment"># 针对 IE6/7/8 的升级浏览器提示</span></span><br><span class="line"><span class="attr">ie_updater:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  link:</span> <span class="string">//outdatedbrowser.com/</span></span><br><span class="line">  <span class="comment">## http://browsehappy.com/</span></span><br><span class="line">  <span class="comment">## http://outdatedbrowser.com/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tab Title Change | 标签页标题切换</span></span><br><span class="line"><span class="attr">tab_title_change:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  left_tab_title:</span> <span class="string">'(つェ⊂) 我藏好了哦~ '</span></span><br><span class="line"><span class="attr">  return_tab_title:</span> <span class="string">'(*´∇｀*) 被你发现啦~ '</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Vendors | 第三方工具 &amp; 服务 &lt;&lt;&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Site Search | 本地站内搜索</span></span><br><span class="line"><span class="comment">## Insatall below plugin to take effect | 使用搜索需先安装对应插件</span></span><br><span class="line"><span class="comment">## https://github.com/PaicHyperionDev/hexo-generator-search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  onload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">## true: get search.xml file when the page has loaded</span></span><br><span class="line">  <span class="comment">## false: get the file when search box gets focus</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># images viewer | 图片浏览器</span></span><br><span class="line"><span class="comment">## http://www.fancyapps.com/fancybox/</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Display Math(LaTeX, MathML...) | 数学公式支持</span></span><br><span class="line"><span class="comment">## https://www.mathjax.org/</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Socail Share | 是否开启分享</span></span><br><span class="line"><span class="attr">share:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  baidu:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  addthis:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  addthis_pubid:</span> </span><br><span class="line">  <span class="comment">## Go to www.addthis.com/dashboard to get your pubid (in src of Code)</span></span><br><span class="line">  <span class="comment">## and customize AddThis share buttons</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度、谷歌站长验证。填写 HTML 标签 content</span></span><br><span class="line"><span class="comment"># Site Verification for Google and Baidu. HTML label content.</span></span><br><span class="line"><span class="attr">baidu_site:</span></span><br><span class="line"><span class="attr">google_site:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fill in Google Analytics tracking ID, #e.g. UA-XXXXX-X</span></span><br><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度统计 http://sitecenter.baidu.com/sc-web/</span></span><br><span class="line"><span class="comment"># 查看代码，填入 //hm.baidu.com/hm.js? 之后的内容</span></span><br><span class="line"><span class="attr">baidu_tongji:</span>  <span class="comment">#填入 //hm.baidu.com/hm.js? 之后的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不蒜子网站计数设置</span></span><br><span class="line"><span class="comment"># http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">visit_counter:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_visit:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  page_visit:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub Repo Widget</span></span><br><span class="line"><span class="comment"># https://github.com/hustcc/GitHub-Repo-Widget.js</span></span><br><span class="line"><span class="attr">github_widget:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Progress Bar | 页面加载进度条</span></span><br><span class="line"><span class="comment"># Demo: http://github.hubspot.com/pace/docs/welcome/</span></span><br><span class="line"><span class="comment"># type: barber-shop|big-counter|bounce|center-atom|center-circle|</span></span><br><span class="line"><span class="comment">#       center-radar|center-simple|corner-indicator|flash|flat-top|</span></span><br><span class="line"><span class="comment">#       loading-bar|mac-osx|minimal</span></span><br><span class="line"><span class="comment"># color: black|blue|green|orange|pink|purple|red|silver|white|yellow|</span></span><br><span class="line"><span class="attr">progressBar:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">"minimal"</span>  <span class="comment"># Keep Quotes | 保留引号避免出错</span></span><br><span class="line"><span class="attr">  color:</span> <span class="string">blue</span></span><br><span class="line"></span><br><span class="line"><span class="attr">CDN:</span></span><br><span class="line"><span class="attr">  jquery:</span> <span class="string">//cdn.bootcss.com/jquery/2.2.4/jquery.min.js</span></span><br><span class="line"><span class="attr">  require:</span> <span class="string">//cdn.bootcss.com/require.js/2.2.0/require.min.js</span></span><br><span class="line"><span class="attr">  fontawesome:</span> <span class="string">//cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css</span></span><br><span class="line"><span class="attr">  fancybox_js:</span> <span class="string">//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js</span></span><br><span class="line"><span class="attr">  fancybox_css:</span> <span class="string">//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css</span></span><br><span class="line"><span class="attr">  animate_css:</span> <span class="string">//cdn.bootcss.com/animate.css/3.5.1/animate.min.css</span></span><br><span class="line"><span class="attr">  jquery_ui_js:</span> <span class="string">//cdn.bootcss.com/jqueryui/1.10.4/jquery-ui.min.js</span></span><br><span class="line"><span class="attr">  jquery_ui_css:</span> <span class="string">//cdn.bootcss.com/jqueryui/1.10.4/css/jquery-ui.min.css</span></span><br><span class="line"><span class="attr">  pace_js:</span> <span class="string">//cdn.bootcss.com/pace/1.0.2/pace.min.js</span></span><br><span class="line"><span class="attr">  clipboard:</span> <span class="string">//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js</span></span><br><span class="line"><span class="attr">  mathjax:</span> <span class="string">//cdn.bootcss.com/mathjax/2.6.1/MathJax.js</span></span><br><span class="line"><span class="attr">  scrollreveal:</span> <span class="string">//cdn.bootcss.com/scrollReveal.js/3.1.4/scrollreveal.min.js</span></span><br></pre></td></tr></table></figure>
<h3 id="blog根目录下的-config-yml"><a href="#blog根目录下的-config-yml" class="headerlink" title="blog根目录下的 _config.yml"></a><strong>blog根目录下的 _config.yml</strong></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">潇洒的博客</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">隔岸无旧情，姑苏有钟声。</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">喜欢看书，对吉他有点小兴趣，专注JAVA。</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">潇洒</span></span><br><span class="line"><span class="attr">language:</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="comment">#网站时区。Hexo 默认使用您电脑的时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://litxiaosa.me</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span> <span class="comment">#源文件夹，这个文件夹用来存放内容。</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span> <span class="comment">#公共文件夹，这个文件夹用于存放生成的站点文件。</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span> <span class="comment">#标签文件夹</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span> <span class="comment">#归档文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span> <span class="comment">#分类文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span> <span class="comment">#nclude code 文件夹</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span> <span class="comment">#国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="comment">#跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts # 新建文章默认文件名</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span>   <span class="comment">#默认布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab # 在新标签中打开一个外部链接，默认为true</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span>  <span class="comment">#转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">true</span> <span class="comment">#是否渲染_drafts目录下的文章，默认为false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span> <span class="comment">#启动 Asset 文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span> <span class="comment">#把链接改为与根目录的相对位址，默认false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span> <span class="comment">#显示未来的文章</span></span><br><span class="line"><span class="attr">highlight:</span>  <span class="comment">#代码块的设置</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  order_by:</span> <span class="bullet">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag 分类和标签的设置</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment">#默认分类</span></span><br><span class="line"><span class="attr">category_map:</span> <span class="comment">#分类别名</span></span><br><span class="line"><span class="attr">tag_map:</span>  <span class="comment">#标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span> <span class="comment">#每页显示的文章量 (0 = 关闭分页功能)</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span> <span class="comment">#分页目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">yelee</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">      github:</span> <span class="string">git@github.com:Litxiaosa/Litxiaosa.github.io.git</span></span><br><span class="line"><span class="attr">      branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<h2 id="个人头像"><a href="#个人头像" class="headerlink" title="个人头像"></a><strong>个人头像</strong></h2><p>默认头像存储于 <code>yelee/source/img/avatar.png</code>，你可以替换你想要的图片，也可以上网上的图片链接.</p>
<h2 id="HTTPS事项"><a href="#HTTPS事项" class="headerlink" title="HTTPS事项"></a><strong>HTTPS事项</strong></h2><p>如果你的站点通过 HTTPS 访问，那下列的服务可能 无法正常使用：</p>
<blockquote>
<p>多说评论<br>友言评论<br>百度分享<br>百度统计</p>
</blockquote>
<h2 id="可使用下列支持-HTTPS-的服务替代"><a href="#可使用下列支持-HTTPS-的服务替代" class="headerlink" title="可使用下列支持 HTTPS 的服务替代"></a><strong>可使用下列支持 HTTPS 的服务替代</strong></h2><blockquote>
<p>Disqus 评论<br>AddThis<br>谷歌分析</p>
</blockquote>
<h2 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a><strong>文章摘要</strong></h2><p>如果你写的文章过长，全部展示是很难看的，所以在文章里你想折叠的地方可以写</p>
<pre><code>&lt;!-- more --&gt;   
</code></pre><h2 id="标签云页面"><a href="#标签云页面" class="headerlink" title="标签云页面"></a><strong>标签云页面</strong></h2><p>如果你想开启标签云，在 <code>blog/source</code> 文件夹下新建一个 <code>tags</code> 文件夹 ，里面新建一个 <code>index.md</code> 的文件，然后把下面的内容拷进去</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">layout</span>: tags</span><br><span class="line"><span class="attribute">title</span>: tags </span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h2 id="本地站内搜索"><a href="#本地站内搜索" class="headerlink" title="本地站内搜索"></a><strong>本地站内搜索</strong></h2><p>使用搜索需先安装对应插件，用于生成索引数据,执行下面的命令</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">search</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>然后，在你的主题 <code>_config.ymd</code> 文件里, 改为 on: true即为启用搜索</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span> </span><br><span class="line"><span class="attr">    on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    onload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p> onload: true : 索引数据 search.xml 随页面一起加载 [效率优先]<br> onload: false : 当激活搜索框时再下载索引数据 [按需加载]</p>
<h2 id="站点小图标"><a href="#站点小图标" class="headerlink" title="站点小图标"></a><strong>站点小图标</strong></h2><p>若将图标存储 <code>yelee/source/favicon.png</code>,则配置中对应填写 <code>/favicon.png</code>，另外填网络图片的地址也可</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">favicon:</span> /favicon.png</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="/2017/06/24/安装和配置主题/3.png" alt=""></p>
<h2 id="网页背景图"><a href="#网页背景图" class="headerlink" title="网页背景图"></a><strong>网页背景图</strong></h2><p>背景图文件所在路径:</p>
<blockquote>
<p><code>/yelee/source/background/</code></p>
<p><code>themes/yelee/_config.yml</code> 背景参数:<br><code>background_image</code>: 5<br>默认值为5，可按需修改<br>“5”: 设置<code>/yelee/source/background/</code>文件夹中 bg-1.jpg 到 bg-5.jpg 这5张图片为背景<br>“0”: 取消网页背景图，使用淳朴的灰白主题</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo+github搭建自己的个人博客]]></title>
      <url>/2017/06/24/hexo-github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>由于个人电脑是Mac, 所以这里就以Mac OS为参考，其实Mac跟windows搭建博客差别不大，如果用windows的朋友觉得不适，请移步之<a href="http://tengj.top/2016/02/20/hexoTotal/" target="_blank" rel="noopener">嘟嘟MD的独立博客</a>，有详细的windows平台下的教程。嗯，那我们开始吧。</p>
<a id="more"></a>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a><strong>安装Git</strong></h2><p>点击进入<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a>，下载安装包，然后按步骤安装就好。可以输入下面的命令查看git是否安装成功。</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
<h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a><strong>安装 Node.js</strong></h2><p>点击进入 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js官网</a>，一个是通用版，一个是最新版，选择一个下载，然后按步骤安装。</p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a><strong>安装hexo</strong></h2><ul>
<li><p><strong>下载安装hexo</strong></p>
  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g hexo</span><br></pre></td></tr></table></figure>
<p>  安装好以后，在终端输入：</p>
  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span></span><br></pre></td></tr></table></figure>
<p>  如果出现下图，则说明安装成功：</p>
<p>  <img src="/2017/06/24/hexo-github搭建自己的个人博客/1.png" alt=""></p>
</li>
<li><p><strong>初始化博客</strong></p>
<p>  建立一个博客的文件夹,blog是文件夹名字，可以根据自己的喜好定义</p>
  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo init blog</span></span><br></pre></td></tr></table></figure>
<p>  然后进入该文件夹  </p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>
<p>  运行node.js 命令，根据博客默认的配置安装必要的依赖包</p>
  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>  初始化完成后，我们可以看到博客的文件夹</p>
<p>  <img src="/2017/06/24/hexo-github搭建自己的个人博客/2.png" alt=""></p>
</li>
<li><p>那么基本的搭建过程就完成了，让我们看看效果吧，这里介绍几个命令。</p>
  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> clean  <span class="comment">#清理缓存，如果你改动了东西，没有效果，试试这个命吧。</span></span><br><span class="line">hexo g   <span class="comment">#完整命令为hexo generate,用于生成静态文件</span></span><br><span class="line">hexo s   <span class="comment">#完整命令为hexo server,用于启动服务器，主要用来本地预览</span></span><br><span class="line">hexo d   <span class="comment">#完整命令为hexo deploy,用于将本地文件发布到github上</span></span><br><span class="line">hexo n   <span class="comment">#完整命令为hexo new,用于新建一篇文章</span></span><br></pre></td></tr></table></figure>
<p>  在你的终端 hexo目录下执行下面的命令</p>
  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span>  </span><br><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure>
<p>  然后浏览器访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>, 此时，你应该看到你的博客了。当然了，这个博客只是本地的，别人是看不到了，你需要把它放到github上。</p>
</li>
</ul>
<h2 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a><strong>注册github账号</strong></h2><p>如果您已有github账号，请跳过，进入github进行注册，邮箱和密码请记好。</p>
<ul>
<li><p><strong>创建repository</strong></p>
<p>  repository就相当于一个仓库，存放你代码的地方，点击 new repository</p>
<p>  <img src="/2017/06/24/hexo-github搭建自己的个人博客/3.png" alt=""></p>
<p>  填写你的项目名字repository name, 这个名字格式要为youname.github.io, 例如我的xiaosa.github.io, 填写完以后点击下面的 creat创建。</p>
</li>
</ul>
<h2 id="部署本地项目到github上"><a href="#部署本地项目到github上" class="headerlink" title="部署本地项目到github上"></a><strong>部署本地项目到github上</strong></h2><p><img src="/2017/06/24/hexo-github搭建自己的个人博客/4.png" alt=""></p>
<p>编辑它，在<code>_config.yml</code>最下方，添加如下配置(记得改成自己的。另外记得一点，<strong>hexo的配置文件中任何’:’后面都是带一个空格的</strong>)</p>
<p><img src="/2017/06/24/hexo-github搭建自己的个人博客/5.png" alt=""></p>
<p>github是你之前创建仓库的地址，可以通过下图获得</p>
<p><img src="/2017/06/24/hexo-github搭建自己的个人博客/6.png" alt=""></p>
<p>然后保存它，如果你是第一次使用github或者使用过但是没有配置过SSH,可能你需要配置一下，可以检查一下是否已经存在SSH Keys</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/.ssh/</span></span><br></pre></td></tr></table></figure>
<p><code>.ssh</code>文件为隐藏文件，需要先设置隐藏文件可见才可以看到。 如果不存在，输入下面的命令创建。</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"你注册github的邮箱"</span></span><br></pre></td></tr></table></figure>
<p>一路回车就好，这个不需要设置密码，因为这个Key仅仅用于简单的服务，完成后输入命令打开 <code>id_rsa.pub</code> </p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure>
<p>然后你就会得到最后面含有你邮箱的公钥，复制它。去你的github下。</p>
<p><img src="/2017/06/24/hexo-github搭建自己的个人博客/7.png" alt=""></p>
<p>title随便写，把复制的公钥粘贴到key里。点下面的add SSH key。好了。基本配置就完了。下面我们把我们的代码传到 github上，在终端输入</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure>
<p>如果执行hexo d 报下面的错误</p>
<p><img src="/2017/06/24/hexo-github搭建自己的个人博客/8.png" alt=""></p>
<p>就先安装一下<code>hexo-deployer-git</code>,再执行 <code>hexo d</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>至此，我们的项目就部署到github上了。</p>
<p>那么，访问博客的链接是什么呢？ 点击标注的Settings,往下拉，如果你看到的是这样的。那么点击那个 None，选择第一个，点save. 访问你博客的链接就出来了，去访问试试吧！</p>
<p><img src="/2017/06/24/hexo-github搭建自己的个人博客/9.png" alt=""></p>
<h2 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a><strong>发表文章</strong></h2><p>既然博客搭建好了，就发表一下文章看看效果吧。hexo中写文章使用的是Markdown，语法不难，看一下就会了。然后去下载一个Markdown的编辑器，很多，看个人喜好。</p>
<p>在终端的blog路径下输入</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type"></span>"my <span class="keyword">new</span> <span class="type">post</span>"</span><br></pre></td></tr></table></figure>
<p>然后就会在你 <code>blog/source/_posts</code> 下生成一个 <code>.md</code> 的文件，以后你的文章就存放到这里，你也可以直接在这里新建一个 <code>.md</code> 的文件。写完文章后，你可以使用 <code>hexo g</code> 命令生成静态文件， 然后<code>hexo s</code> 进行本地预览。感觉没问题了，<code>hexo d</code> 上传到github上吧。</p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/06/24/HelloWorld/</url>
      <content type="html"><![CDATA[<p>在<a href="http://tengj.top/" target="_blank" rel="noopener">嘟嘟MD</a>技术博客的帮助下，属于我自己的博客终于搭建起来了！</p>
<p>折腾了好几天，在github page上看到自己的博客加载下来时，油然而生的成就感，兴奋了半上午。期间也踩了不少的坑，再一次感谢嘟嘟MD的指导。是的，它不是QQ空间，不是微博，也不是贴吧，它是属于自己的一个块小小的领地，所以我满足于这种归属感。</p>
<p>学编程时输入的第一个词语就是hello world！它更是一种象征。那第一篇文章就献给你吧。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
