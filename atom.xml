<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>潇洒的博客</title>
  
  <subtitle>一个Java码农，喜欢看书，对吉他有点小兴趣。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://litxiaosa.cn/"/>
  <updated>2018-03-21T09:43:44.678Z</updated>
  <id>http://litxiaosa.cn/</id>
  
  <author>
    <name>潇洒</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo静态博客部署到腾讯云</title>
    <link href="http://litxiaosa.cn/2018/03/08/hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    <id>http://litxiaosa.cn/2018/03/08/hexo静态博客部署到腾讯云/</id>
    <published>2018-03-08T07:33:34.000Z</published>
    <updated>2018-03-21T09:43:44.678Z</updated>
    
    <content type="html"><![CDATA[<p>年后的第一篇博客，又回到了说hexo上，去年申请的阿里云服务器快要到期了，对于我这种赤贫的人来说，买一个感觉老贵了。正好最近腾讯云在搞活动，就买了一年的，虽然是最低配置，对于我个人用足够了。</p><p>既然要弃用阿里云，那么我去年部署到阿里云的静态博客就要重新部署到腾讯云了，正好借着这个机会，写一个部署的大致流程，以防自己以后又换云服务器的时候忘了怎么部署。哈哈。</p><p> 这里我们默认你有台云服务器，并能正常使用。</p> <a id="more"></a><h2 id="云服务器端的配置"><a href="#云服务器端的配置" class="headerlink" title="云服务器端的配置"></a>云服务器端的配置</h2><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><ul><li><p>ssh连接服务器 </p></li><li><p>下载Nginx以及依赖库</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a. yum <span class="keyword">install</span> pcre -y</span><br><span class="line">   yum <span class="keyword">install</span> pcre-devel</span><br><span class="line">b. yum <span class="keyword">install</span> zlib-devel</span><br><span class="line">c. yum <span class="keyword">install</span> gd-devel openssl-devel -y</span><br><span class="line">d. yum <span class="keyword">install</span> gcc</span><br><span class="line">e. wget <span class="keyword">http</span>://nginx.org/download/nginx<span class="number">-1.12</span><span class="number">.2</span>.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压Nginx</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">nginx-1</span><span class="selector-class">.12</span><span class="selector-class">.2</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>校验需要的模块,如果你想添加更多模块，在后边加上即可。这里我也没有设置用户，用的默认的root用户</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./configure</span> <span class="params">--prefix=/usr/local/nginx</span> <span class="params">--with-http_stub_status_module</span>  <span class="params">--with-http_ssl_module</span>  <span class="params">--with-http_stub_status_module</span> <span class="params">--with-http_gzip_static_module</span></span><br></pre></td></tr></table></figure></li><li><p>预编译以及正式安装</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure></li></ul><p>  这样我们就把Nginx安装完成了，前面的步骤我们可以看出，我安装在了 <code>/usr/local</code> 目录下。</p><ul><li><p>启动并验证是否安装成功</p><p>那怎么确定，我的Nginx安装成功了呢？我们可以启动Nginx访问一下。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin/nginx</span><br><span class="line">wget <span class="string">http:</span><span class="comment">//127.0.0.1</span></span><br></pre></td></tr></table></figure><p>如果出现如下，则说明安装配置成功。</p><p><img src="/2018/03/08/hexo静态博客部署到腾讯云/1.png" alt=""> </p><p>也可以在浏览器中输入你的服务器的公网IP</p><p><img src="/2018/03/08/hexo静态博客部署到腾讯云/2.png" alt=""></p></li></ul><h3 id="建立仓库"><a href="#建立仓库" class="headerlink" title="建立仓库"></a>建立仓库</h3><p> 我们要把本机的静态化页面提交到服务器的Git仓库里。这里我们创建一个仓库。</p><ul><li><p>建立代码仓库, 这里我在home目录下创建一个git文件夹</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir git</span><br><span class="line"><span class="keyword">cd</span> <span class="string">/home/git</span> </span><br><span class="line"><span class="string">//nginx</span>网站要指向<span class="string">/home/git</span>中</span><br><span class="line">mkdir hexo.git</span><br><span class="line">git init <span class="params">--bare</span> hexo.git <span class="string">//</span>这一步是建立裸仓库，如果你的这一步报没有git，请安装git。</span><br><span class="line">chown -R 755 <span class="string">/home/git</span> <span class="string">//</span>给权限  755表示赋予权限访问，-R：递归，就是在这个文件夹下的所有文件夹以及文件全部修改。</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>将本地机器的ssh公钥传到 <code>home/git/.ssh目录下</code>, <code>ls -a</code>可以查看隐藏目录。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/home/git</span></span><br><span class="line">mkdir <span class="string">.ssh</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>打开你本机的终端， 输入如下命令</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /Users/xiaosa/.ssh/id_rsa.pub root<span class="variable">@118</span>.<span class="number">25.7</span>.<span class="number">207</span><span class="symbol">:/home/git/</span>.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li></ul><p>  <code>/Users/xiaosa/.ssh/id_rsa.pub</code>: 我本机的公钥地址路径， <code>/home/git/.ssh/</code>：放到的服务器的地址路径。 <code>authorized_keys</code>： 文件名。</p><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><ul><li><p>查找Nginx配置文件, 并打开该配置文件。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nginx -t</span></span><br></pre></td></tr></table></figure><p>我的配置文件位在： <code>/usr/local/nginx/conf/nginx.conf</code></p><p>打开后如下图：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"> <span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">     <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改http下的server， <code>root</code> 改为：<code>/home/git</code>, 并把 <code>server_name</code>改为你的域名。</p>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">      <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">      <span class="attribute">server_name</span>  litxiaosa.cn;</span><br><span class="line">      <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">      <span class="attribute">location</span> / &#123;</span><br><span class="line">          <span class="attribute">root</span>   /home/git;</span><br><span class="line">          <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li><p>按一下 esc 然后 shift+两下字母z 就是 shift+zz  保存并退出。</p></li><li><p>重启Nginx服务器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin<span class="regexp">/nginx -s reload</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="实现自动部署"><a href="#实现自动部署" class="headerlink" title="实现自动部署"></a>实现自动部署</h3><p>自动部署是通过Git钩子实现的<br>接下来，在服务器上的裸仓库 hexo.git 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /home/git。</p><p>在第二步建立的裸仓中（即hexo.git文件夹中），找到hooks目录新建一个<code>post-update</code>文件</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="keyword">post</span>-<span class="keyword">update</span></span><br></pre></td></tr></table></figure><p>把下面的一段添加进去，然后保存并退出</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="attribute">--work-tree</span>=/home/git <span class="attribute">--git-dir</span>=/home/git/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>修改权限让其可执行</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x <span class="keyword">post</span>-<span class="keyword">update</span></span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>hexo本地站点配置文件中修改：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: root<span class="variable">@118</span>.<span class="number">25.7</span>.<span class="number">207</span>:/home/git/hexo.git</span><br></pre></td></tr></table></figure><p>最后，就可以成功地把你的博客迁移到腾讯云啦～ </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年后的第一篇博客，又回到了说hexo上，去年申请的阿里云服务器快要到期了，对于我这种赤贫的人来说，买一个感觉老贵了。正好最近腾讯云在搞活动，就买了一年的，虽然是最低配置，对于我个人用足够了。&lt;/p&gt;
&lt;p&gt;既然要弃用阿里云，那么我去年部署到阿里云的静态博客就要重新部署到腾讯云了，正好借着这个机会，写一个部署的大致流程，以防自己以后又换云服务器的时候忘了怎么部署。哈哈。&lt;/p&gt;
&lt;p&gt; 这里我们默认你有台云服务器，并能正常使用。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://litxiaosa.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://litxiaosa.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成ElasticSearch</title>
    <link href="http://litxiaosa.cn/2018/01/10/SpringBoot%E9%9B%86%E6%88%90ElasticSearch/"/>
    <id>http://litxiaosa.cn/2018/01/10/SpringBoot集成ElasticSearch/</id>
    <published>2018-01-10T05:34:43.000Z</published>
    <updated>2018-01-11T01:32:05.401Z</updated>
    
    <content type="html"><![CDATA[<p>前面的几篇都是简单的配合和操作，没有在项目中使用，本文我们来介绍 SpringBoot如何集成ElasticSearch，把ElasticSearch应用到实际的项目中去。</p><ul><li>我们新建一个SpringBoot项目，这里SpringBoot的一些知识我就不介绍了。</li><li><p>引入elasticsearch的依赖</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>创建config类</p><p>可以利用postman 测试， 输入：localhost:端口号/elasticSearch/方法名</p></li></ul>  <figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 搜索引擎ES的config</span></span><br><span class="line"><span class="comment">  * @author xiaosa</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">@Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> TransportClient <span class="keyword">client</span>() throws UnknownHostException &#123;</span><br><span class="line">        <span class="comment">////tcp端口，默认9300</span></span><br><span class="line">        <span class="comment">//当时我们配置了三个节点，我们可以new 三个InetSocketTransportAddress，然后都addTransportAddress到里面</span></span><br><span class="line">        InetSocketTransportAddress node = <span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"localhost"</span>),<span class="number">9300</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化一个自定义的配置</span></span><br><span class="line">        Settings settings = Settings.builder()</span><br><span class="line">                <span class="comment">//集群名字，当时我配置的叫xiaosa</span></span><br><span class="line">                .put(<span class="string">"cluster.name"</span>, <span class="string">"xiaosa"</span>).build();</span><br><span class="line">        TransportClient <span class="keyword">client</span> = <span class="keyword">new</span> PreBuiltTransportClient(settings);</span><br><span class="line">        <span class="keyword">client</span>.addTransportAddress(node);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">client</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>controller层  增删改查</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 搜索</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span> xiaosa</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"elasticSearch"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransportClient client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/get/people/man"</span>)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity getPeople(<span class="meta">@RequestParam(name = <span class="meta-string">"id"</span>, defaultValue = <span class="meta-string">""</span>)</span> String id)&#123;</span><br><span class="line">        <span class="keyword">if</span> (id.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> new ResponseEntity( HttpStatus.NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">        GetResponse response = <span class="keyword">this</span>.client.prepareGet(<span class="string">"people"</span>, <span class="string">"man"</span>, id).<span class="keyword">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(response.isExists())&#123;</span><br><span class="line">            <span class="keyword">return</span> new ResponseEntity(response.getSource(), HttpStatus.OK);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> new ResponseEntity(response.getSource(), HttpStatus.NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> country</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(<span class="meta-string">"/add/people/man"</span>)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity addPeople(<span class="meta">@RequestParam(name = <span class="meta-string">"name"</span>)</span> String name,</span><br><span class="line">                                    <span class="meta">@RequestParam(name = <span class="meta-string">"country"</span>)</span> String country,</span><br><span class="line">                                    <span class="meta">@RequestParam(name = <span class="meta-string">"age"</span>)</span> int age,</span><br><span class="line">                                    <span class="meta">@RequestParam(name = <span class="meta-string">"date"</span>)</span> <span class="meta">@DateTimeFormat(pattern = <span class="meta-string">"yyyy-MM-dd"</span>)</span> Date date)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           XContentBuilder content =  XContentFactory.jsonBuilder()</span><br><span class="line">                    .startObject()</span><br><span class="line">                    .field(<span class="string">"name"</span>, name)</span><br><span class="line">                    .field(<span class="string">"country"</span>, country)</span><br><span class="line">                    .field(<span class="string">"age"</span>, age)</span><br><span class="line">                    .field(<span class="string">"date"</span>, date.getTime())</span><br><span class="line">                    .endObject();</span><br><span class="line">            IndexResponse result = <span class="keyword">this</span>.client.prepareIndex(<span class="string">"people"</span>, <span class="string">"man"</span>).setSource(content).<span class="keyword">get</span>();</span><br><span class="line">            <span class="keyword">return</span> new ResponseEntity(result.getId(), HttpStatus.OK);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>  new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(<span class="meta-string">"/remove/people/man"</span>)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity removePeople(<span class="meta">@RequestParam(name = <span class="meta-string">"id"</span>)</span> String id)&#123;</span><br><span class="line">        DeleteResponse result = <span class="keyword">this</span>.client.prepareDelete(<span class="string">"people"</span>, <span class="string">"man"</span>, id).<span class="keyword">get</span>();</span><br><span class="line">        <span class="keyword">return</span> new ResponseEntity(result.toString(), HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID更新名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(<span class="meta-string">"/update/people/man"</span>)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity updatePeople(<span class="meta">@RequestParam(name = <span class="meta-string">"id"</span>)</span> String id,</span><br><span class="line">                                       <span class="meta">@RequestParam(name = <span class="meta-string">"name"</span>)</span> String name)&#123;</span><br><span class="line">        UpdateRequest update = new UpdateRequest(<span class="string">"people"</span>, <span class="string">"man"</span>, id);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XContentBuilder build =  XContentFactory.jsonBuilder().startObject();</span><br><span class="line">                <span class="keyword">if</span>(name !=<span class="literal">null</span>)&#123;</span><br><span class="line">                    build.field(<span class="string">"name"</span>, name);</span><br><span class="line">                &#125;</span><br><span class="line">            build.endObject();</span><br><span class="line">            update.doc(build);</span><br><span class="line">            UpdateResponse result = <span class="keyword">this</span>.client.update(update).<span class="keyword">get</span>();</span><br><span class="line">            <span class="keyword">return</span> new ResponseEntity(result.toString(), HttpStatus.OK);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>  new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复合查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> country</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gtDate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ltDate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">    <span class="doctag">@PostMapping</span>("/query/people/man")</span></span><br><span class="line"><span class="comment">    <span class="doctag">@ResponseBody</span></span></span><br><span class="line"><span class="comment">    public ResponseEntity queryPeople(<span class="doctag">@RequestParam</span>(name = "name") String name,</span></span><br><span class="line"><span class="comment">                                      <span class="doctag">@RequestParam</span>(name = "country") String country,</span></span><br><span class="line"><span class="comment">                                      <span class="doctag">@RequestParam</span>(name = "gtDate") String gtDate,</span></span><br><span class="line"><span class="comment">                                      <span class="doctag">@RequestParam</span>(name = "ltDate") String ltDate)&#123;</span></span><br><span class="line"><span class="comment">        BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span></span><br><span class="line"><span class="comment">        if(name !=null)&#123;</span></span><br><span class="line"><span class="comment">            boolQuery.must(QueryBuilders.matchQuery("name", name));</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(country !=null)&#123;</span></span><br><span class="line"><span class="comment">            boolQuery.must(QueryBuilders.matchQuery("country", country));</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //范围查询</span></span><br><span class="line"><span class="comment">        RangeQueryBuilder rangeQuery = QueryBuilders.rangeQuery("date").from(gtDate);</span></span><br><span class="line"><span class="comment">        if(ltDate !=null )&#123;</span></span><br><span class="line"><span class="comment">            rangeQuery.to(ltDate);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        boolQuery.filter(rangeQuery);</span></span><br><span class="line"><span class="comment">        SearchRequestBuilder builder = this.client.prepareSearch("people")</span></span><br><span class="line"><span class="comment">                .setTypes("man")</span></span><br><span class="line"><span class="comment">                .setSearchType(SearchType.QUERY_THEN_FETCH)</span></span><br><span class="line"><span class="comment">                .setQuery(boolQuery)</span></span><br><span class="line"><span class="comment">                .setFrom(0)</span></span><br><span class="line"><span class="comment">                .setSize(10);</span></span><br><span class="line"><span class="comment">        System.out.println(builder);</span></span><br><span class="line"><span class="comment">        SearchResponse response = builder.get();</span></span><br><span class="line"><span class="comment">        List&lt;Map&lt;String, Object&gt;&gt; result = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span></span><br><span class="line"><span class="comment">        for (SearchHit hit: response.getHits()) &#123;</span></span><br><span class="line"><span class="comment">            result.add(hit.getSource());</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return  new ResponseEntity(result, HttpStatus.OK);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面的几篇都是简单的配合和操作，没有在项目中使用，本文我们来介绍 SpringBoot如何集成ElasticSearch，把ElasticSearch应用到实际的项目中去。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们新建一个SpringBoot项目，这里SpringBoot的一些知识我就不介绍了。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引入elasticsearch的依赖&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="搜索引擎" scheme="http://litxiaosa.cn/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="ElasticSearch" scheme="http://litxiaosa.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticsSearch 之 高级查询</title>
    <link href="http://litxiaosa.cn/2018/01/10/ElasticsSearch-%E4%B9%8B-%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2/"/>
    <id>http://litxiaosa.cn/2018/01/10/ElasticsSearch-之-高级查询/</id>
    <published>2018-01-10T02:10:14.000Z</published>
    <updated>2018-01-10T04:53:37.230Z</updated>
    
    <content type="html"><![CDATA[<p><strong>工具用的PostMan</strong></p><p>本文我们来介绍ElasticsSearch的高级查询。 在ES中查询分为子条件查询和复合条件查询</p><ul><li><p>子条件查询：特定字段查询所指特定值</p><ul><li>Query context: 在查询过程中，除了判断文档是否满足查询条件外，ES还会计算一个 _score来标示匹配的程度，旨在判断目标文档和查询条件的匹配度。他常用的查询有<pre><code>- 全文本查询：针对文本类型数据- 字段级别查询： 针对结构化数据， 如：数字、日期等</code></pre></li><li>Filter context: 在查询过程中，只判断该文档是否满足条件，只有Yes 或者 No，没有匹配度。</li></ul></li><li><p>复合条件查询：一一定的逻辑组合子条件查询</p></li></ul><a id="more"></a><h3 id="全文本查询"><a href="#全文本查询" class="headerlink" title="全文本查询"></a>全文本查询</h3><p>  它包括：模糊匹配、习语匹配、多个字段的匹配查询、语法的查询。</p><ul><li><p><strong>模糊匹配</strong></p><p>  地址栏：localhost:9200/people/man/_search 用post方法，搜索以后你会看到，美国队长也出现在搜索结果里。他是匹配了美国和大兵，所有name有美国的就会搜索出来。 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"美国大兵"</span></span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>习语匹配</strong></p><p>如果我们想匹配美国大兵整个词语呢？ 用match_phrase即可。这样就只会搜索出来 美国大兵的信息。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"query"</span>: &#123;</span><br><span class="line">       <span class="attr">"match_phrase"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"美国大兵"</span></span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>多个字段的匹配查询</strong></p><p>你会看到，name 和 country只要包含美国的都会搜索出来。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"query"</span>: &#123;</span><br><span class="line">      <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">          <span class="attr">"query"</span>: <span class="string">"美国"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: [<span class="string">"name"</span>, <span class="string">"country"</span>]</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>语法查询</strong> </p><p>我们查询包含中国和美国的数据， OR：关键词 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"query"</span>: &#123;</span><br><span class="line">       <span class="attr">"query_string"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"美国 OR 中国"</span></span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  还可以添加更多条件：查询name 和 country包含美国或者中国的数据</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"query"</span>: &#123;</span><br><span class="line">       <span class="attr">"query_string"</span>: &#123;</span><br><span class="line">             <span class="attr">"query"</span>: <span class="string">"美国 OR 中国"</span>,</span><br><span class="line">             <span class="attr">"fields"</span>: [<span class="string">"name"</span>, <span class="string">"country"</span>]</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段级别查询"><a href="#字段级别查询" class="headerlink" title="字段级别查询"></a>字段级别查询</h3><ul><li><p>查询出生日期在某个范围内的数据。</p><p>gte 和 lte 的意思是包含的意思，如果去掉e 大家可以试一下。我们也可以用 “now” 关键词表示当前时间 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"query"</span>: &#123;</span><br><span class="line">       <span class="attr">"range"</span>: &#123;</span><br><span class="line">       <span class="attr">"date"</span>: &#123;</span><br><span class="line">           <span class="attr">"gte"</span>: <span class="string">"1487-01-01"</span>,</span><br><span class="line">           <span class="attr">"lte"</span>: <span class="string">"1998-01-01"</span></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Filter查询"><a href="#Filter查询" class="headerlink" title="Filter查询"></a>Filter查询</h3><p> 我们查询国家为英国的数据，主要作用是条件过滤。</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"query"</span>: &#123;</span><br><span class="line">       <span class="attr">"bool"</span>: &#123;</span><br><span class="line">          <span class="attr">"filter"</span>: &#123;</span><br><span class="line">              <span class="attr">"term"</span>: &#123;</span><br><span class="line">                  <span class="attr">"country"</span>: <span class="string">"英国"</span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复合条件查询"><a href="#复合条件查询" class="headerlink" title="复合条件查询"></a>复合条件查询</h2><ul><li><p>固定分数查询</p><p>我们平常的查询，ES都会给我们一个匹配度 _score字段， 并且基本每个都不一样。我们可以看到_score变成了1</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"query"</span>: &#123;</span><br><span class="line">       <span class="attr">"constant_score"</span>: &#123;</span><br><span class="line">            <span class="attr">"filter"</span>: &#123;</span><br><span class="line">                <span class="attr">"match"</span>: &#123;</span><br><span class="line">                   <span class="attr">"name"</span>: <span class="string">"潇洒"</span></span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>  我们也可以自定义_score ,这里就全部变成2了。</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"query"</span>: &#123;</span><br><span class="line">       <span class="attr">"constant_score"</span>: &#123;</span><br><span class="line">            <span class="attr">"filter"</span>: &#123;</span><br><span class="line">                 <span class="attr">"match"</span>: &#123;</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"潇洒"</span></span><br><span class="line">                 &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">"boost"</span>: <span class="number">2</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>Booble查询</p><p> 满足这两个条件其中一个的都会查询出来。关键词：should, 是OR的逻辑。如果把should换成must 再搜一下看看，must是必须满足的意思，AND的逻辑。</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"bool"</span>: &#123;</span><br><span class="line">            <span class="attr">"should"</span>: [&#123;</span><br><span class="line">                 <span class="attr">"match"</span>: &#123;</span><br><span class="line">                     <span class="attr">"name"</span>: <span class="string">"潇洒"</span></span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="attr">"match"</span>: &#123;</span><br><span class="line">                   <span class="attr">"country"</span>: <span class="string">"英国"</span></span><br><span class="line">                      &#125;</span><br><span class="line">                 &#125;        </span><br><span class="line">            ]</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>  还有一个关键词：must_not 意思我搜谁都可以，就是不能搜你！哼</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">     <span class="attr">"query"</span>: &#123;</span><br><span class="line">         <span class="attr">"bool"</span>: &#123;</span><br><span class="line">             <span class="attr">"must_not"</span>: &#123;</span><br><span class="line">                   <span class="attr">"term"</span>: &#123;</span><br><span class="line">                       <span class="attr">"name"</span>: <span class="string">"袋鼠"</span></span><br><span class="line">                    &#125;</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到ES的查询非常灵活，下一节我们介绍与SpringBoot项目的结合。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;工具用的PostMan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文我们来介绍ElasticsSearch的高级查询。 在ES中查询分为子条件查询和复合条件查询&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;子条件查询：特定字段查询所指特定值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Query context: 在查询过程中，除了判断文档是否满足查询条件外，ES还会计算一个 _score来标示匹配的程度，旨在判断目标文档和查询条件的匹配度。他常用的查询有&lt;pre&gt;&lt;code&gt;- 全文本查询：针对文本类型数据
- 字段级别查询： 针对结构化数据， 如：数字、日期等
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Filter context: 在查询过程中，只判断该文档是否满足条件，只有Yes 或者 No，没有匹配度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;复合条件查询：一一定的逻辑组合子条件查询&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="搜索引擎" scheme="http://litxiaosa.cn/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="ElasticsSearch" scheme="http://litxiaosa.cn/tags/ElasticsSearch/"/>
    
  </entry>
  
  <entry>
    <title>学习ElasticSearch 之 简单的增删改查</title>
    <link href="http://litxiaosa.cn/2018/01/09/%E5%AD%A6%E4%B9%A0Elasticsearch%20%E4%B9%8B%20%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://litxiaosa.cn/2018/01/09/学习Elasticsearch 之 增删改查/</id>
    <published>2018-01-09T12:36:53.000Z</published>
    <updated>2018-03-21T10:26:31.994Z</updated>
    
    <content type="html"><![CDATA[<p>本文我们介绍ES的简单的增删改查操作。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>我们同样使用postman 工具，以下操作都是postman </p><ul><li><p>地址栏：localhost:9200/people/man/1 用post方法 这里的1是索引，我们可以自定义，这是唯一的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"潇洒"</span>,</span><br><span class="line">   <span class="attr">"country"</span>: <span class="string">"中国"</span>,</span><br><span class="line">   <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line">   <span class="attr">"date"</span>: <span class="string">"2018-01-01"</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a>    <ul><li><p>点击send 发送，会出现,表明插入成功</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"_index"</span>: <span class="string">"people"</span>,</span><br><span class="line">   <span class="attr">"_type"</span>: <span class="string">"man"</span>,</span><br><span class="line">   <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">   <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">   <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">       <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">       <span class="attr">"successful"</span>: <span class="number">2</span>,</span><br><span class="line">       <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">   <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>刷新之前，我们看在people 下边有个 <code>docs: 0 (0)</code>, 刷新以后就变成了 <code>docs: 1 (2)</code><br>我们点数据浏览，刚刚插入的数据就出现在里面了。 <strong>注意：这里data拼错了，拼成了dat了。</strong></p><p><img src="/2018/01/09/学习Elasticsearch 之 增删改查/1.jpg" alt=""></p></li><li><p>我们也可以让ES自己生成ID, 地址栏把代表ID的数字去掉，该用POST提交，其他格式不变，就可以了。</p></li></ul><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>例如，我们修改ID为1的数据</p><ul><li><p>地址栏输入：localhost:9200/people/man/1/_update 加上 _update 代表是更新操作。指定post方法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"doc"</span>:&#123;</span><br><span class="line">       <span class="attr">"name"</span>: <span class="string">"隔岸"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>提交以后，刷新head插件就会看到ID为1的数据，被修改了。</li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>例如，我们删除ID为1的数据，<strong>删除索引是非常危险的事情，建议不要轻易删除</strong></p><ul><li>地址栏：localhost:9200/people/man/1 选择DELETE方法 发送以后，数据就删除了。</li><li>我们也可以利用head 插件进行删除，比如我们删除之前创建的book, 点击book下面的动作，选择删除。确认一下即可删除。</li></ul><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>在查询操作之前，我事先插入了几条数据，大家也可以按上述插入方法插入数据。</p><ul><li>根据ID查询。地址栏：localhost：9200/people/man/你插入的id   用get方法，执行以后数据就被查出来了。</li><li><p>我们还可以用 _search 关键字查询, 用post方法， 所有的条件查询都是用 query 关键字。<br> match_all：代表查询全部</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"query"</span>: &#123;</span><br><span class="line">       <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>我们也可以增加查询条件, from:代表从哪里返回，size：代表几条数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">      <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>关键词查询 ，查询国籍为中国的数据, 数据是根据 _score 倒叙排列的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">      <span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"country"</span>: <span class="string">"中国"</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>我们也可以自定义排序, 按出生日期进行降序排列，你会发现 _score 的值变成null 了，因为我们自定义了排序规则</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"query"</span>: &#123;</span><br><span class="line">       <span class="attr">"match"</span>: &#123;</span><br><span class="line">           <span class="attr">"country"</span>: <span class="string">"中国"</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"sort"</span>: [</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="attr">"date"</span>: &#123;</span><br><span class="line">               <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><ul><li><p>地址栏：localhost:9200/people/man/_search  依然用post请求， _search 是搜索关键字。<br> 我们根据age 年龄进行聚合查询</p><ul><li>aggs: 聚合查询关键字</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">      <span class="attr">"group_by_age"</span>: &#123;</span><br><span class="line">          <span class="attr">"terms"</span>: &#123;</span><br><span class="line">              <span class="attr">"field"</span>: <span class="string">"age"</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>同样的，我们可以多条件聚合查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">      <span class="attr">"group_by_age"</span>: &#123;</span><br><span class="line">          <span class="attr">"terms"</span>: &#123;</span><br><span class="line">              <span class="attr">"field"</span>: <span class="string">"age"</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"group_by_country"</span>: &#123;</span><br><span class="line">          <span class="attr">"terms"</span>: &#123;</span><br><span class="line">              <span class="attr">"field"</span>: <span class="string">"country"</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>ES简单的增删改查就介绍到这里，下一节我们说一说高级查询。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文我们介绍ES的简单的增删改查操作。&lt;/p&gt;
&lt;h3 id=&quot;插入&quot;&gt;&lt;a href=&quot;#插入&quot; class=&quot;headerlink&quot; title=&quot;插入&quot;&gt;&lt;/a&gt;插入&lt;/h3&gt;&lt;p&gt;我们同样使用postman 工具，以下操作都是postman &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;地址栏：localhost:9200/people/man/1 用post方法 这里的1是索引，我们可以自定义，这是唯一的。&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;潇洒&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;country&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;中国&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;age&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;date&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;2018-01-01&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="搜索引擎" scheme="http://litxiaosa.cn/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="ElasticSearch" scheme="http://litxiaosa.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>学习ElasticSearch 之 配置</title>
    <link href="http://litxiaosa.cn/2018/01/09/%E5%AD%A6%E4%B9%A0Elasticsearch/"/>
    <id>http://litxiaosa.cn/2018/01/09/学习Elasticsearch/</id>
    <published>2018-01-09T04:28:39.000Z</published>
    <updated>2018-01-10T02:13:24.927Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文基于Mac</strong></p><h2 id="认识-ElasticSearch-搜索引擎"><a href="#认识-ElasticSearch-搜索引擎" class="headerlink" title="认识 ElasticSearch 搜索引擎"></a>认识 ElasticSearch 搜索引擎</h2><p>ElasticSearch是一个基于Lucene的搜索服务器。是一个高度可扩展的开源全文搜索和分析引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便，它使您能够快速，实时地存储，搜索和分析大量数据。</p><a id="more"></a><h2 id="相比于solr"><a href="#相比于solr" class="headerlink" title="相比于solr"></a>相比于solr</h2><ul><li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能;</li><li>Solr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；</li><li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供；</li><li>Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch。</li><li>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用</li></ul><h2 id="ElasticSearch的基本概念"><a href="#ElasticSearch的基本概念" class="headerlink" title="ElasticSearch的基本概念"></a>ElasticSearch的基本概念</h2><ul><li><strong>Cluster和Node：</strong> ES可以以单点或者集群方式运行，以一个整体对外提供search服务的所有节点 组成cluster，组成这个cluster的各个节点叫做node。</li><li><strong>shard：</strong> 通常叫分片，这是ES提供分布式搜索的基础，其含义为将一个完整的index分成若干部分存储在相同或不同的节点上，这些组成index的部分就叫做shard。</li><li><strong>Index：</strong> 这是ES存储数据的地方，类似于关系数据库的database。</li><li><strong>Document type：</strong> 类似关系数据库的表，主要功能是将完全不同schema的数据分开，一个index里面可以有若干个Document type。</li><li><strong>Document：</strong> 这个类似关系数据库的一行，在同一个Document type下面，每一Document都有一个唯一的ID作为区分。</li><li><strong>Filed：</strong> 类似关系数据库的某一列，这是ES数据存储的最小单位。</li><li><strong>Replica：</strong> 和replication通常指的都是一回事，即index的冗余备份，可以用于防止数据丢失，或者用来做负载分担。</li></ul><h2 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h2><p>去<a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">官网下载</a>，这里我选择的是ZIP,然后解压即可。</p><h3 id="启动ElasticSearch"><a href="#启动ElasticSearch" class="headerlink" title="启动ElasticSearch"></a>启动ElasticSearch</h3><ul><li><p>进入到你下载的Elasticsearch文件夹</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh .<span class="regexp">/bin/</span>elasticsearch</span><br></pre></td></tr></table></figure></li></ul><p>  <img src="/2018/01/09/学习Elasticsearch/1.jpg" alt=""></p><ul><li><p>当你看到<code>started</code>说明启动成功了，然后访问 <a href="localhost:9200" target="_blank" rel="noopener">localhost:9200</a></p><p><img src="/2018/01/09/学习Elasticsearch/2.jpg" alt=""></p></li></ul><h3 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h3><p>看到这个json格式的数据是不是感觉有点不友好，我们可以下载插件。 </p><ul><li><p>下载 <a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">elasticsearch-head</a></p></li><li><p>下载完成以后解压，终端 cd 到 elasticsearch-head-master 目录下，执行以下命令</p> <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>等他加载完以后，执行启动命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> start</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>然后我们访问 <a href="localhost:9100" target="_blank" rel="noopener">localhost:9100</a></p><p><img src="/2018/01/09/学习Elasticsearch/3.png" alt=""></p></li></ul><ul><li><p>但是，我们发现未连接，所以，我们需要在cd 到 <code>Elasticsearch/config</code>目录下找到 <code>elasticsearch.yml</code>，在最下面增加以下配置，我们可以先停掉两个服务。添加完以后，我们保存并退出，</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http<span class="selector-class">.cors</span><span class="selector-class">.enabled</span>: true</span><br><span class="line">http<span class="selector-class">.cors</span><span class="selector-class">.allow-origin</span>: <span class="string">"*"</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>这个时候，我们可以后台启动，终端cd 到 Elasticsearch目录下。 -d 表示后台启动。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sh</span> <span class="keyword">cd</span> ./bin/elasticsearch -<span class="built_in">d</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>我们再去开启head 插件，cd 到 elasticsearch-head-master,开启</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> start</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>我们再次访问 <a href="localhost:9100" target="_blank" rel="noopener">localhost:9100</a>, 可以看到连接上了。</p><p><img src="/2018/01/09/学习Elasticsearch/4.png" alt=""></p></li><li><p>我们看到了集群健康值显示的是：green 绿色 ，它还有两个状态：</p><ul><li>yellow 黄色：它的意思是，集群健康值已经出现问题，但是不影响使用。</li><li>red 红色： 它的意思是，集群的健康值已经很差了，虽然会搜索出来数据，但是已经出现丢失数据现象。</li></ul></li></ul><h2 id="分布式安装"><a href="#分布式安装" class="headerlink" title="分布式安装"></a>分布式安装</h2><p>上边的安装我们介绍的是单台的安装，在实际使用过程中肯定是集群化，那么，我们就尝试搭建集群化的Elasticsearch。我们会搭建三个节点，一个master，就类似于指挥官，两个slave节点 ，就类似于随从。为了操作方便，我们把刚刚搭建的指定为master</p><ul><li><p>我们找到<code>elasticsearch/config</code> 下的 <code>elasticsearch.yml</code> 做一下修改，在之前的配置下面加上这些 个配置，然后我们保存并退出。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#集群的名字</span></span><br><span class="line">cluster.name: xiaosa</span><br><span class="line"><span class="comment">#master的名字</span></span><br><span class="line"><span class="keyword">node</span>.name:<span class="title"> master</span></span><br><span class="line"><span class="comment">#告诉它，它就是master</span></span><br><span class="line"><span class="keyword">node</span>.master:<span class="title"> true</span></span><br><span class="line"><span class="comment">#绑定IP</span></span><br><span class="line">network.host: <span class="number">127.0</span>.<span class="number">0.1</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>我们之前 -d 后台启动了一个elasticsearch了，我们这里要把它重启，首先找到它, 杀掉这个进程。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | <span class="keyword">grep</span> elastic</span><br><span class="line"><span class="keyword">kill</span> -<span class="number">9</span> 进程号</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>然后我们再后台启动，如果你关掉了head 插件的进程的话，请重启插件的进程。</p> <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sh</span> ./bin/elasticsearch -<span class="built_in">d</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>去浏览器访问 <a href="localhost:9100" target="_blank" rel="noopener">localhost:9100</a> ,我们就看到了一个节点 master</p><p><img src="/2018/01/09/学习Elasticsearch/5.png" alt=""></p></li><li><p>我们还可以访问 <a href="localhost:9200" target="_blank" rel="noopener">localhost:9200</a>  去确认我们的配置</p><p><img src="/2018/01/09/学习Elasticsearch/6.png" alt=""></p></li><li><p>下边我们配置两个随从节点，我们在elasticsearch同级目录下，新建一个文件夹叫 el_slave 把我们之前下载的elasticsearch压缩包解压两份到这个文件夹下，一个叫el_slave1 一个叫el_slave2 ,然后各自修改配置。<strong>千万不要为了省事，复制你之前配置好的master，会出错。</strong></p><ul><li><p>slave1 我们做如下配置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#集群的名字，这歌要和<span class="selector-tag">master</span>的配置一样 </span><br><span class="line"><span class="selector-tag">cluster</span><span class="selector-class">.name</span>: <span class="selector-tag">xiaosa</span></span><br><span class="line"><span class="selector-id">#slave1</span>的名字</span><br><span class="line"><span class="selector-tag">node</span><span class="selector-class">.name</span>: <span class="selector-tag">slave1</span></span><br><span class="line">#绑定<span class="selector-tag">IP</span></span><br><span class="line"><span class="selector-tag">network</span><span class="selector-class">.host</span>: 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span></span><br><span class="line">#意思是找到<span class="selector-tag">master</span>,否则会找不到他的领导<span class="selector-tag">master</span></span><br><span class="line"><span class="selector-tag">discovery</span><span class="selector-class">.zen</span><span class="selector-class">.ping</span><span class="selector-class">.unicast</span><span class="selector-class">.hosts</span>: <span class="selector-attr">["127.0.0.1"]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>slave2 我们做如下配置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#集群的名字，这歌要和<span class="selector-tag">master</span>的配置一样 </span><br><span class="line"><span class="selector-tag">cluster</span><span class="selector-class">.name</span>: <span class="selector-tag">xiaosa</span></span><br><span class="line"><span class="selector-id">#slave2</span>的名字</span><br><span class="line"><span class="selector-tag">node</span><span class="selector-class">.name</span>: <span class="selector-tag">slave2</span></span><br><span class="line">#绑定<span class="selector-tag">IP</span></span><br><span class="line"><span class="selector-tag">network</span><span class="selector-class">.host</span>: 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span></span><br><span class="line">#意思是找到<span class="selector-tag">master</span>,否则会找不到他的领导<span class="selector-tag">master</span></span><br><span class="line"><span class="selector-tag">discovery</span><span class="selector-class">.zen</span><span class="selector-class">.ping</span><span class="selector-class">.unicast</span><span class="selector-class">.hosts</span>: <span class="selector-attr">["127.0.0.1"]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>然后我们保存并退出，各自启动服务。可以看到我们的三个节点都在了。如果你想增加多台，按上述步骤即可。</p><p><img src="/2018/01/09/学习Elasticsearch/7.png" alt=""></p></li></ul><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><ul><li><p>我们可以在 插件的图形化界面中创建索引，点击索引 ——&gt; 创建索引 </p><p><strong>注意：索引名字必须小写并且不能有下划线</strong></p></li><li><p>我们在点回概览，你会看到很多数字框框，粗线框的那些是主分片，旁边的那些是分片的备份。</p><p><img src="/2018/01/09/学习Elasticsearch/8.png" alt=""></p></li><li><p>我们可以点击book 下方的信息-索引信息，我们可以看到 <code>mappings</code>里面的内容是空的，这就是非结构话的索引。</p><p><img src="/2018/01/09/学习Elasticsearch/9.png" alt=""></p></li><li><p>那么我们如何创建结构话的索引呢？我们可以点复合查询。写好以后，点击已读，验证JSON,没问题后，点击提交请求。</p><p><img src="/2018/01/09/学习Elasticsearch/10.png" alt=""></p></li><li><p>刷新一下，再点击索引信息，就可以在mappings 里看到你写的结构，这叫结构化索引。</p></li><li><p>我们也可以用工具进行操作，比如 Postman, 下面我们用postman创建一个people 索引  用put方法 </p><p>  在地址栏里输入 <code>localhost:9200/people</code>, people就是你的索引名字 </p><ul><li><p>number_of_shards: 分片数</p></li><li><p>number_of_replicas 备份数</p></li><li><p>多种格式请用 ||</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"number_of_replicas"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">        <span class="attr">"man"</span>: &#123;</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">                <span class="attr">"name"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"country"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"age"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">                    <span class="attr">"format"</span>: <span class="string">"yyy-MM-dd HH:mm:ss || yyyy-MM-dd || epoch_millis"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>点击发送之后，下边会出来，表明创建成功。我们可以刷新一下head插件查看</p><pre><code>{  &quot;acknowledged&quot;: true,  &quot;shards_acknowledged&quot;: true,  &quot;index&quot;: &quot;people&quot;}</code></pre></li></ul><p>入门就先说到这里，下一节我们说简单的增删改查操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文基于Mac&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;认识-ElasticSearch-搜索引擎&quot;&gt;&lt;a href=&quot;#认识-ElasticSearch-搜索引擎&quot; class=&quot;headerlink&quot; title=&quot;认识 ElasticSearch 搜索引擎&quot;&gt;&lt;/a&gt;认识 ElasticSearch 搜索引擎&lt;/h2&gt;&lt;p&gt;ElasticSearch是一个基于Lucene的搜索服务器。是一个高度可扩展的开源全文搜索和分析引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便，它使您能够快速，实时地存储，搜索和分析大量数据。&lt;/p&gt;
    
    </summary>
    
      <category term="搜索引擎" scheme="http://litxiaosa.cn/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="ElasticSearch" scheme="http://litxiaosa.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>如何使用RedisTemplate访问Redis数据结构</title>
    <link href="http://litxiaosa.cn/2018/01/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8RedisTemplate%E8%AE%BF%E9%97%AERedis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://litxiaosa.cn/2018/01/05/如何使用RedisTemplate访问Redis数据结构/</id>
    <published>2018-01-05T02:56:31.000Z</published>
    <updated>2018-01-05T12:11:31.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis-数据结构简介"><a href="#Redis-数据结构简介" class="headerlink" title="Redis 数据结构简介"></a>Redis 数据结构简介</h2><p>Redis 可以存储键与5种不同数据结构类型之间的映射，这5种数据结构类型分别为String（字符串）、List（列表）、Set（集合）、Hash（散列）和 Zset（有序集合）</p><p>下面来对这5种数据结构类型作简单的介绍：</p><a id="more"></a><table><thead><tr><th>结构类型</th><th style="text-align:center">结构存储的值</th><th style="text-align:right">结构的读写能力</th></tr></thead><tbody><tr><td>String</td><td style="text-align:center">可以是字符串、整数或者浮点数</td><td style="text-align:right">对整个字符串或者字符串的其中一部分执行操作；对象和浮点数执行自增(increment)或者自减(decrement)</td></tr><tr><td>List</td><td style="text-align:center">一个链表，链表上的每个节点都包含了一个字符串</td><td style="text-align:right">从链表的两端推入或者弹出元素；根据偏移量对链表进行修剪(trim)；读取单个或者多个元素；根据值来查找或者移除元素</td></tr><tr><td>Set</td><td style="text-align:center">包含字符串的无序收集器(unorderedcollection)，并且被包含的每个字符串都是独一无二的、各不相同</td><td style="text-align:right">添加、获取、移除单个元素；检查一个元素是否存在于某个集合中；计算交集、并集、差集；从集合里卖弄随机获取元素</td></tr><tr><td>Hash</td><td style="text-align:center">包含键值对的无序散列表</td><td style="text-align:right">添加、获取、移除单个键值对；获取所有键值对</td></tr><tr><td>Zset</td><td style="text-align:center">字符串成员(member)与浮点数分值(score)之间的有序映射，元素的排列顺序由分值的大小决定</td><td style="text-align:right">添加、获取、删除单个元素；根据分值范围(range)或者成员来获取元素</td></tr></tbody></table><p>Redis 5种数据结构的概念大致介绍到这边，下面将结合Spring封装的RedisTemplate来对这5种数据结构的运用进行演示</p><h2 id="RedisTemplate介绍"><a href="#RedisTemplate介绍" class="headerlink" title="RedisTemplate介绍"></a>RedisTemplate介绍</h2><p>spring 封装了 <code>RedisTemplate</code> 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api</p><h3 id="RedisTemplate在spring代码中的结构如下："><a href="#RedisTemplate在spring代码中的结构如下：" class="headerlink" title="RedisTemplate在spring代码中的结构如下："></a>RedisTemplate在spring代码中的结构如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.data.redis.core</span><br><span class="line">Class RedisTemplate&lt;K,V&gt;</span><br><span class="line">java.lang.Object</span><br><span class="line">    org.springframework.data.redis.core.RedisAccessor</span><br><span class="line">        org.springframework.data.redis.core.RedisTemplate&lt;K,V&gt;</span><br></pre></td></tr></table></figure><p><strong>Type Parameters:</strong></p><p><strong>K:</strong> 模板中的Redis key的类型（通常为String）如：RedisTemplate<string, object=""><br>注意：如果没特殊情况，切勿定义成RedisTemplate<object, object="">，否则根据里氏替换原则，使用的时候会造成类型错误 。</object,></string,></p><p><strong>V:</strong> 模板中的Redis value的类型</p><h3 id="RedisTemplate中定义了对5种数据结构操作"><a href="#RedisTemplate中定义了对5种数据结构操作" class="headerlink" title="RedisTemplate中定义了对5种数据结构操作"></a>RedisTemplate中定义了对5种数据结构操作</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue<span class="comment">()</span>;<span class="comment">//操作字符串</span></span><br><span class="line">redisTemplate.opsForHash<span class="comment">()</span>;<span class="comment">//操作hash</span></span><br><span class="line">redisTemplate.opsForList<span class="comment">()</span>;<span class="comment">//操作list</span></span><br><span class="line">redisTemplate.opsForSet<span class="comment">()</span>;<span class="comment">//操作set</span></span><br><span class="line">redisTemplate.opsForZSet<span class="comment">()</span>;<span class="comment">//操作有序set</span></span><br></pre></td></tr></table></figure><h2 id="StringRedisTemplate与RedisTemplate"><a href="#StringRedisTemplate与RedisTemplate" class="headerlink" title="StringRedisTemplate与RedisTemplate"></a>StringRedisTemplate与RedisTemplate</h2><ul><li>两者的关系是StringRedisTemplate继承RedisTemplate。</li></ul><ul><li><p>两者的数据是不共通的；也就是说StringRedisTemplate只能管理StringRedisTemplate里面的数据，RedisTemplate只能管理RedisTemplate中的数据</p></li><li><p>SDR默认采用的序列化策略有两种，一种是String的序列化策略，一种是JDK的序列化策略。</p><p>  StringRedisTemplate默认采用的是String的序列化策略，保存的key和value都是采用此策略序列化保存的。</p><p>  RedisTemplate默认采用的是JDK的序列化策略，保存的key和value都是采用此策略序列化保存的。</p></li></ul><h3 id="RedisTemplate配置如下："><a href="#RedisTemplate配置如下：" class="headerlink" title="RedisTemplate配置如下："></a>RedisTemplate配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        template.setKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Redis的String数据结构-（推荐使用StringRedisTemplate）"><a href="#Redis的String数据结构-（推荐使用StringRedisTemplate）" class="headerlink" title="Redis的String数据结构 （推荐使用StringRedisTemplate）"></a>Redis的String数据结构 （推荐使用StringRedisTemplate）</h2><p><strong>注意：如果使用RedisTemplate需要更改序列化方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RedisSerializer&lt;String&gt; stringSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        template.setKeySerializer(stringSerializer );</span><br><span class="line">        template.setValueSerializer(stringSerializer );</span><br><span class="line">        template.setHashKeySerializer(stringSerializer );</span><br><span class="line">        template.setHashValueSerializer(stringSerializer );</span><br></pre></td></tr></table></figure><h4 id="ValueOperations可以对String数据结构进行操作"><a href="#ValueOperations可以对String数据结构进行操作" class="headerlink" title="ValueOperations可以对String数据结构进行操作"></a><strong>ValueOperations可以对String数据结构进行操作</strong></h4><ul><li><p><strong>set void set(K key, V value);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：redisTemplate.opsForValue().set(<span class="string">"name"</span>,<span class="string">"tom"</span>);</span><br><span class="line">结果：redisTemplate.opsForValue().get(<span class="string">"name"</span>)  输出结果为tom</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>set void set(K key, V value, long timeout, TimeUnit unit);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：redisTemplate.opsForValue().set(<span class="string">"name"</span>,<span class="string">"tom"</span>,<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">结果：redisTemplate.opsForValue().get(<span class="string">"name"</span>)由于设置的是<span class="number">10</span>秒失效，十秒之内查询有结果，十秒之后返回为<span class="keyword">null</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>set void set(K key, V value, long offset);</strong></p><p>该方法是用 value 参数覆写(overwrite)给定 key 所储存的字符串值，从偏移量 offset 开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set(<span class="string">"key"</span>,<span class="string">"hello world"</span>);</span><br><span class="line">     template.opsForValue().set(<span class="string">"key"</span>,<span class="string">"redis"</span>, <span class="number">6</span>);</span><br><span class="line">     System.out.println(<span class="string">"***************"</span>+template.opsForValue().get(<span class="string">"key"</span>));</span><br><span class="line">结果：***************hello redis</span><br></pre></td></tr></table></figure></li><li><p><strong>setIfAbsent Boolean setIfAbsent(K key, V value);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用:   System.out.println(template.opsForValue().setIfAbsent(<span class="string">"multi1"</span>,<span class="string">"multi1"</span>));<span class="comment">// false  multi1之前已经存在</span></span><br><span class="line">       System.out.println(template.opsForValue().setIfAbsent(<span class="string">"multi111"</span>,<span class="string">"multi111"</span>)); <span class="comment">//true  multi111之前不存在</span></span><br><span class="line">结果：<span class="keyword">false</span></span><br><span class="line">     <span class="keyword">true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>multiSet void multiSet(Map&lt;? extends K, ? extends V&gt; m);</strong></p><p>为多个键分别设置它们的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用：Map&lt;String,String&gt; maps = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">      maps.put(<span class="string">"multi1"</span>,<span class="string">"multi1"</span>);</span><br><span class="line">      maps.put(<span class="string">"multi2"</span>,<span class="string">"multi2"</span>);</span><br><span class="line">      maps.put(<span class="string">"multi3"</span>,<span class="string">"multi3"</span>);</span><br><span class="line">      template.opsForValue().multiSet(maps);</span><br><span class="line">      List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">      keys.add(<span class="string">"multi1"</span>);</span><br><span class="line">      keys.add(<span class="string">"multi2"</span>);</span><br><span class="line">      keys.add(<span class="string">"multi3"</span>);</span><br><span class="line">      System.out.println(template.opsForValue().multiGet(keys));</span><br><span class="line"> 结果：[multi1, multi2, multi3]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>multiSetIfAbsent Boolean multiSetIfAbsent(Map&lt;? extends K, ? extends V&gt; m);</strong></p><p>为多个键分别设置它们的值，如果存在则返回false，不存在返回true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">使用：Map&lt;String,String&gt; maps = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">      maps.put(<span class="string">"multi11"</span>,<span class="string">"multi11"</span>);</span><br><span class="line">      maps.put(<span class="string">"multi22"</span>,<span class="string">"multi22"</span>);</span><br><span class="line">      maps.put(<span class="string">"multi33"</span>,<span class="string">"multi33"</span>);</span><br><span class="line">      Map&lt;String,String&gt; maps2 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">      maps2.put(<span class="string">"multi1"</span>,<span class="string">"multi1"</span>);</span><br><span class="line">      maps2.put(<span class="string">"multi2"</span>,<span class="string">"multi2"</span>);</span><br><span class="line">      maps2.put(<span class="string">"multi3"</span>,<span class="string">"multi3"</span>);</span><br><span class="line">      System.out.println(template.opsForValue().multiSetIfAbsent(maps));</span><br><span class="line">      System.out.println(template.opsForValue().multiSetIfAbsent(maps2));</span><br><span class="line">结果：<span class="keyword">true</span></span><br><span class="line">     <span class="keyword">false</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>get V get(Object key);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set(<span class="string">"key"</span>,<span class="string">"hello world"</span>);</span><br><span class="line">     System.out.println(<span class="string">"***************"</span>+template.opsForValue().get(<span class="string">"key"</span>));</span><br><span class="line">结果：***************hello world</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>getAndSet V getAndSet(K key, V value);</strong></p><p>设置键的字符串值并返回其旧值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set(<span class="string">"getSetTest"</span>,<span class="string">"test"</span>);</span><br><span class="line">     System.out.println(template.opsForValue().getAndSet(<span class="string">"getSetTest"</span>,<span class="string">"test2"</span>));</span><br><span class="line">结果：test</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>multiGet List<v> multiGet(Collection<k> keys);</k></v></strong></p><p>为多个键分别取出它们的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用：Map&lt;String,String&gt; maps = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">      maps.put(<span class="string">"multi1"</span>,<span class="string">"multi1"</span>);</span><br><span class="line">      maps.put(<span class="string">"multi2"</span>,<span class="string">"multi2"</span>);</span><br><span class="line">      maps.put(<span class="string">"multi3"</span>,<span class="string">"multi3"</span>);</span><br><span class="line">      template.opsForValue().multiSet(maps);</span><br><span class="line">      List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">      keys.add(<span class="string">"multi1"</span>);</span><br><span class="line">      keys.add(<span class="string">"multi2"</span>);</span><br><span class="line">      keys.add(<span class="string">"multi3"</span>);</span><br><span class="line">      System.out.println(template.opsForValue().multiGet(keys));</span><br><span class="line">结果：[multi1, multi2, multi3]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>increment Long increment(K key, long delta);</strong></p><p>支持整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().increment(<span class="string">"increlong"</span>,<span class="number">1</span>);</span><br><span class="line">     System.out.println(<span class="string">"***************"</span>+template.opsForValue().get(<span class="string">"increlong"</span>));</span><br><span class="line">结果：***************<span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>increment Double increment(K key, double delta);</strong></p><p>支持浮点数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().increment(<span class="string">"increlong"</span>,<span class="number">1.2</span>);</span><br><span class="line">     System.out.println(<span class="string">"***************"</span>+template.opsForValue().get(<span class="string">"increlong"</span>));</span><br><span class="line">结果：***************<span class="number">2.2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>append Integer append(K key, String value);</strong></p><p>如果key已经存在并且是一个字符串，则该命令将该值追加到字符串的末尾。如果键不存在，则它被创建并设置为空字符串，因此APPEND在这种特殊情况下将类似于SET。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().append(<span class="string">"appendTest"</span>,<span class="string">"Hello"</span>);</span><br><span class="line">     System.out.println(template.opsForValue().get(<span class="string">"appendTest"</span>));</span><br><span class="line">     template.opsForValue().append(<span class="string">"appendTest"</span>,<span class="string">"world"</span>);</span><br><span class="line">     System.out.println(template.opsForValue().get(<span class="string">"appendTest"</span>));</span><br><span class="line">结果：Hello</span><br><span class="line">     Helloworld</span><br></pre></td></tr></table></figure></li><li><p><strong>get String get(K key, long start, long end);</strong></p><p>截取key所对应的value字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用：appendTest对应的value为Helloworld</span><br><span class="line">     System.out.println(<span class="string">"*********"</span>+template.opsForValue().get(<span class="string">"appendTest"</span>,<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">结果：*********Hellow</span><br><span class="line"></span><br><span class="line">使用：System.out.println(<span class="string">"*********"</span>+template.opsForValue().get(<span class="string">"appendTest"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果：*********Helloworld</span><br><span class="line"></span><br><span class="line">使用： System.out.println(<span class="string">"*********"</span>+template.opsForValue().get(<span class="string">"appendTest"</span>,-<span class="number">3</span>,-<span class="number">1</span>));</span><br><span class="line">结果：*********rld</span><br></pre></td></tr></table></figure></li><li><p><strong>size Long size(K key);</strong></p><p>返回key所对应的value值得长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set(<span class="string">"key"</span>,<span class="string">"hello world"</span>);</span><br><span class="line">     System.out.println(<span class="string">"***************"</span>+template.opsForValue().size(<span class="string">"key"</span>));</span><br><span class="line">结果：***************<span class="number">11</span></span><br></pre></td></tr></table></figure></li><li><p><strong>setBit Boolean setBit(K key, long offset, boolean value);</strong></p><p>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)<br>key键对应的值value对应的ascii码,在offset的位置(从左向右数)变为value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set(<span class="string">"bitTest"</span>,<span class="string">"a"</span>);</span><br><span class="line">      <span class="comment">// 'a' 的ASCII码是 97。转换为二进制是：01100001</span></span><br><span class="line">      <span class="comment">// 'b' 的ASCII码是 98  转换为二进制是：01100010</span></span><br><span class="line">      <span class="comment">// 'c' 的ASCII码是 99  转换为二进制是：01100011</span></span><br><span class="line">      <span class="comment">//因为二进制只有0和1，在setbit中true为1，false为0，因此我 要变为'b'的话第六位设置为1，第七位设置为0</span></span><br><span class="line">      template.opsForValue().setBit(<span class="string">"bitTest"</span>,<span class="number">6</span>, <span class="keyword">true</span>);</span><br><span class="line">      template.opsForValue().setBit(<span class="string">"bitTest"</span>,<span class="number">7</span>, <span class="keyword">false</span>);</span><br><span class="line">      System.out.println(template.opsForValue().get(<span class="string">"bitTest"</span>));</span><br><span class="line"> 结果：b</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>getBit Boolean getBit(K key, long offset);</strong></p><p>获取键对应值的ascii码的在offset处位值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForValue().getBit(<span class="string">"bitTest"</span>,<span class="number">7</span>));</span><br><span class="line">结果：<span class="keyword">false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Redis的List数据结构"><a href="#Redis的List数据结构" class="headerlink" title="Redis的List数据结构"></a>Redis的List数据结构</h2><p><strong>这边我们把RedisTemplate序列化方式改回之前的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</span><br><span class="line">       ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">       om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">       jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">       RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">       template.setKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">       template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">       template.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">       template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br></pre></td></tr></table></figure><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）</p><p><strong>ListOperations专门操作list列表:</strong></p><ul><li><p><strong>List<v> range(K key, long start, long end);</v></strong></p><p>返回存储在键中的列表的指定元素。偏移开始和停止是基于零的索引，其中0是列表的第一个元素（列表的头部），1是下一个元素</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range(<span class="string">"list"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果:[c#, c++, python, java, c#, c#]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>void trim(K key, long start, long end);</strong></p><p>修剪现有列表，使其只包含指定的指定范围的元素，起始和停止都是基于0的索引</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range(<span class="string">"list"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">     template.opsForList().trim(<span class="string">"list"</span>,<span class="number">1</span>,-<span class="number">1</span>);<span class="comment">//裁剪第一个元素</span></span><br><span class="line">     System.out.println(template.opsForList().range(<span class="string">"list"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果: [c#, c++, python, java, c#, c#]</span><br><span class="line">     [c++, python, java, c#, c#]</span><br></pre></td></tr></table></figure></li><li><p><strong>Long size(K key);</strong></p><p>返回存储在键中的列表的长度。如果键不存在，则将其解释为空列表，并返回0。当key存储的值不是列表时返回错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().size(<span class="string">"list"</span>));</span><br><span class="line">结果:<span class="number">6</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Long leftPush(K key, V value);</strong></p><p>将所有指定的值插入存储在键的列表的头部。如果键不存在，则在执行推送操作之前将其创建为空列表。（从左边插入）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForList().leftPush(<span class="string">"list"</span>,<span class="string">"java"</span>);</span><br><span class="line">     template.opsForList().leftPush(<span class="string">"list"</span>,<span class="string">"python"</span>);</span><br><span class="line">     template.opsForList().leftPush(<span class="string">"list"</span>,<span class="string">"c++"</span>);</span><br><span class="line">结果: 返回的结果为推送操作后的列表的长度</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Long leftPushAll(K key, V… values);</strong></p><p>批量把一个数组插入到列表中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：String[] stringarrays = <span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>&#125;;</span><br><span class="line">     template.opsForList().leftPushAll(<span class="string">"listarray"</span>,stringarrays);</span><br><span class="line">     System.out.println(template.opsForList().range(<span class="string">"listarray"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果: [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p><strong>Long leftPushAll(K key, Collection<v> values);</v></strong></p><p>批量把一个集合插入到列表中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：List&lt;Object&gt; strings = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">      strings.add(<span class="string">"1"</span>);</span><br><span class="line">      strings.add(<span class="string">"2"</span>);</span><br><span class="line">      strings.add(<span class="string">"3"</span>);</span><br><span class="line">     template.opsForList().leftPushAll(<span class="string">"listcollection4"</span>, strings);</span><br><span class="line">     System.out.println(template.opsForList().range(<span class="string">"listcollection4"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果: [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p><strong>Long leftPushIfPresent(K key, V value);</strong></p><p>只有存在key对应的列表才能将这个value值插入到key所对应的列表中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 使用： System.out.println(template.opsForList().leftPushIfPresent(<span class="string">"leftPushIfPresent"</span>,<span class="string">"aa"</span>));</span><br><span class="line">       System.out.println(template.opsForList().leftPushIfPresent(<span class="string">"leftPushIfPresent"</span>,<span class="string">"bb"</span>));</span><br><span class="line">==========分割线===========</span><br><span class="line">truetrue System.out.println(template.opsForList().leftPush(<span class="string">"leftPushIfPresent"</span>,<span class="string">"aa"</span>));</span><br><span class="line">       System.out.println(template.opsForList().leftPushIfPresent(<span class="string">"leftPushIfPresent"</span>,<span class="string">"bb"</span>));</span><br><span class="line">结果:</span><br><span class="line"> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span></span><br><span class="line"> ==========分割线===========</span><br><span class="line"> <span class="number">1</span></span><br><span class="line"> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Long leftPush(K key, V pivot, V value);</strong></p><p>把value值放到key对应列表中pivot值的左面，如果pivot值存在的话</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForList().leftPush(<span class="string">"list"</span>,<span class="string">"java"</span>,<span class="string">"oc"</span>);</span><br><span class="line">     System.out.print(template.opsForList().range(<span class="string">"list"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果：[c++, python, oc, java, c#, c#]</span><br></pre></td></tr></table></figure></li><li><p><strong>Long rightPush(K key, V value);</strong></p><p>将所有指定的值插入存储在键的列表的头部。如果键不存在，则在执行推送操作之前将其创建为空列表。（从右边插入）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForList().rightPush(<span class="string">"listRight"</span>,<span class="string">"java"</span>);</span><br><span class="line">     template.opsForList().rightPush(<span class="string">"listRight"</span>,<span class="string">"python"</span>);</span><br><span class="line">     template.opsForList().rightPush(<span class="string">"listRight"</span>,<span class="string">"c++"</span>);</span><br><span class="line">结果:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Long rightPushAll(K key, V… values);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：String[] stringarrays = <span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>&#125;;</span><br><span class="line">     template.opsForList().rightPushAll(<span class="string">"listarrayright"</span>,stringarrays);</span><br><span class="line">     System.out.println(template.opsForList().range(<span class="string">"listarrayright"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p><strong>Long rightPushAll(K key, Collection<v> values);</v></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：List&lt;Object&gt; strings = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">     strings.add(<span class="string">"1"</span>);</span><br><span class="line">     strings.add(<span class="string">"2"</span>);</span><br><span class="line">     strings.add(<span class="string">"3"</span>);</span><br><span class="line">     template.opsForList().rightPushAll(<span class="string">"listcollectionright"</span>, strings);</span><br><span class="line">     System.out.println(template.opsForList().range(<span class="string">"listcollectionright"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p><strong>Long rightPushIfPresent(K key, V value);</strong></p><p>只有存在key对应的列表才能将这个value值插入到key所对应的列表中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用： System.out.println(template.opsForList().rightPushIfPresent(<span class="string">"rightPushIfPresent"</span>,<span class="string">"aa"</span>));</span><br><span class="line">      System.out.println(template.opsForList().rightPushIfPresent(<span class="string">"rightPushIfPresent"</span>,<span class="string">"bb"</span>));</span><br><span class="line">      System.out.println(<span class="string">"==========分割线==========="</span>);</span><br><span class="line">      System.out.println(template.opsForList().rightPush(<span class="string">"rightPushIfPresent"</span>,<span class="string">"aa"</span>));</span><br><span class="line">      System.out.println(template.opsForList().rightPushIfPresent(<span class="string">"rightPushIfPresent"</span>,<span class="string">"bb"</span>));</span><br><span class="line">结果: </span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">==========分割线===========</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Long rightPush(K key, V pivot, V value);</strong></p><p>把value值放到key对应列表中pivot值的右面，如果pivot值存在的话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range(<span class="string">"listRight"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">     template.opsForList().rightPush(<span class="string">"listRight"</span>,<span class="string">"python"</span>,<span class="string">"oc"</span>);</span><br><span class="line">     System.out.println(template.opsForList().range(<span class="string">"listRight"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果: [java, python, c++]</span><br><span class="line">[java, python, oc, c++]</span><br></pre></td></tr></table></figure></li><li><p><strong>void set(K key, long index, V value);</strong></p><p>在列表中index的位置设置value值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range(<span class="string">"listRight"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">     template.opsForList().set(<span class="string">"listRight"</span>,<span class="number">1</span>,<span class="string">"setValue"</span>);</span><br><span class="line">     System.out.println(template.opsForList().range(<span class="string">"listRight"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果:[java, python, oc, c++]</span><br><span class="line">     [java, setValue, oc, c++]</span><br></pre></td></tr></table></figure></li><li><p><strong>Long remove(K key, long count, Object value);</strong></p><p>从存储在键中的列表中删除等于值的元素的第一个计数事件。<br>计数参数以下列方式影响操作：</p><p>count&gt; 0：删除等于从头到尾移动的值的元素。</p><p>count &lt;0：删除等于从尾到头移动的值的元素。</p><p>count = 0：删除等于value的所有元素。 </p></li></ul>  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForList().range(<span class="string">"listRight"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">     <span class="keyword">template</span>.opsForList().<span class="built_in">remove</span>(<span class="string">"listRight"</span>,<span class="number">1</span>,<span class="string">"setValue"</span>);<span class="comment">//将删除列表中存储的列表中第一次次出现的“setValue”。</span></span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForList().range(<span class="string">"listRight"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">结果: [java, setValue, oc, c++]</span><br><span class="line">     [java, oc, c++]</span><br></pre></td></tr></table></figure><ul><li><p><strong>V index(K key, long index);</strong></p><p>根据下表获取列表中的值，下标是从0开始的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">listRight</span>",0,<span class="selector-tag">-1</span>));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.index</span>("<span class="selector-tag">listRight</span>",2));</span><br><span class="line">结果: <span class="selector-attr">[java, oc, c++]</span></span><br><span class="line">     <span class="selector-tag">c</span>++</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>V leftPop(K key);</strong></p><p>弹出最左边的元素，弹出之后该值在列表中将不复存在</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">list</span>",0,<span class="selector-tag">-1</span>));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.leftPop</span>("<span class="selector-tag">list</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">list</span>",0,<span class="selector-tag">-1</span>));</span><br><span class="line">结果:</span><br><span class="line"><span class="selector-attr">[c++, python, oc, java, c#, c#]</span></span><br><span class="line"><span class="selector-tag">c</span>++</span><br><span class="line"><span class="selector-attr">[python, oc, java, c#, c#]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>V leftPop(K key, long timeout, TimeUnit unit);</strong></p><p>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用：用法与 leftPop(K key)<span class="comment">;一样</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>V rightPop(K key);</strong></p><p>弹出最右边的元素，弹出之后该值在列表中将不复存在</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用： <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">list</span>",0,<span class="selector-tag">-1</span>));</span><br><span class="line">      <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.rightPop</span>("<span class="selector-tag">list</span>"));</span><br><span class="line">      <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">list</span>",0,<span class="selector-tag">-1</span>));</span><br><span class="line">结果: <span class="selector-attr">[python, oc, java, c#, c#]</span></span><br><span class="line">      <span class="selector-tag">c</span>#</span><br><span class="line">      <span class="selector-attr">[python, oc, java, c#]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>V rightPop(K key, long timeout, TimeUnit unit)</strong></p><p>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用：用法与 rightPop(K key)<span class="comment">;一样</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>V rightPopAndLeftPush(K sourceKey, K destinationKey);</strong></p><p>用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用： <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">list</span>",0,<span class="selector-tag">-1</span>)); <span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.rightPopAndLeftPush</span>("<span class="selector-tag">list</span>","<span class="selector-tag">rightPopAndLeftPush</span>");</span><br><span class="line">    <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">list</span>",0,<span class="selector-tag">-1</span>));</span><br><span class="line">    <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForList</span>()<span class="selector-class">.range</span>("<span class="selector-tag">rightPopAndLeftPush</span>",0,<span class="selector-tag">-1</span>));</span><br><span class="line">结果: <span class="selector-attr">[oc, java,c#]</span></span><br><span class="line">      <span class="selector-attr">[oc, java]</span></span><br><span class="line">      <span class="selector-attr">[c#]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>V rightPopAndLeftPush(K sourceKey, K destinationKey, long timeout, TimeUnit unit);</strong> </p><p>用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用：用法与rightPopAndLeftPush(<span class="keyword">K</span> sourceKey, <span class="keyword">K</span> destinationKey)一样</span><br></pre></td></tr></table></figure></li></ul><h2 id="Redis的Hash数据机构"><a href="#Redis的Hash数据机构" class="headerlink" title="Redis的Hash数据机构"></a>Redis的Hash数据机构</h2><p> Redis的散列可以让用户将多个键值对存储到一个Redis键里面。</p><p> public interface HashOperations<h,hk,hv></h,hk,hv></p><p> HashOperations提供一系列方法操作hash：</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">初始数据:</span><br><span class="line"><span class="regexp">//</span>template.opsForHash().put(<span class="string">"redisHash"</span>,<span class="string">"name"</span>,<span class="string">"tom"</span>);</span><br><span class="line"><span class="regexp">//</span>template.opsForHash().put(<span class="string">"redisHash"</span>,<span class="string">"age"</span>,<span class="number">26</span>);</span><br><span class="line"><span class="regexp">//</span>template.opsForHash().put(<span class="string">"redisHash"</span>,<span class="string">"class"</span>,<span class="string">"6"</span>);</span><br><span class="line"><span class="regexp">//</span>Map&lt;String,Object&gt; testMap = new HashMap();</span><br><span class="line">       <span class="regexp">//</span>testMap.put(<span class="string">"name"</span>,<span class="string">"jack"</span>);</span><br><span class="line">       <span class="regexp">//</span>testMap.put(<span class="string">"age"</span>,<span class="number">27</span>);</span><br><span class="line">       <span class="regexp">//</span>testMap.put(<span class="string">"class"</span>,<span class="string">"1"</span>);</span><br><span class="line">       <span class="regexp">//</span>template.opsForHash().putAll(<span class="string">"redisHash1"</span>,testMap);</span><br></pre></td></tr></table></figure><ul><li><p><strong>Long delete(H key, Object… hashKeys);</strong> </p><p>删除给定的哈希hashKeys</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForHash().<span class="keyword">delete</span>(<span class="string">"redisHash"</span>,<span class="string">"name"</span>));</span><br><span class="line">      System.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForHash().entries(<span class="string">"redisHash"</span>));</span><br><span class="line">结果: <span class="number">1</span></span><br><span class="line">&#123;<span class="keyword">class</span>=<span class="number">6</span>, age=<span class="number">28.1</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Boolean hasKey(H key, Object hashKey);</strong></p><p>确定哈希hashKey是否存在</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForHash().hasKey(<span class="string">"redisHash"</span>,<span class="string">"age"</span>));</span><br><span class="line">     System.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForHash().hasKey(<span class="string">"redisHash"</span>,<span class="string">"ttt"</span>));</span><br><span class="line">结果：<span class="literal">true</span></span><br><span class="line">     <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>HV get(H key, Object hashKey);</strong></p><p>从键中的哈希获取给定hashKey的值</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForHash().<span class="built_in">get</span>(<span class="string">"redisHash"</span>,<span class="string">"age"</span>));</span><br><span class="line">结果：<span class="number">26</span></span><br></pre></td></tr></table></figure></li><li><p><strong>List<hv> multiGet(H key, Collection<hk> hashKeys);</hk></hv></strong></p><p>从哈希中获取给定hashKey的值</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：List&lt;<span class="keyword">Object</span>&gt; kes = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">Object</span>&gt;();</span><br><span class="line">       kes.<span class="built_in">add</span>(<span class="string">"name"</span>);</span><br><span class="line">       kes.<span class="built_in">add</span>(<span class="string">"age"</span>);</span><br><span class="line">       System.out.<span class="built_in">println</span>(template.opsForHash().multiGet(<span class="string">"redisHash"</span>,kes));</span><br><span class="line">结果：[jack, <span class="number">28.1</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long increment(H key, HK hashKey, long delta);</strong></p><p>通过给定的delta增加散列hashKey的值（整型）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForHash().<span class="built_in">get</span>(<span class="string">"redisHash"</span>,<span class="string">"age"</span>));</span><br><span class="line">      System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForHash().increment(<span class="string">"redisHash"</span>,<span class="string">"age"</span>,<span class="number">1</span>));</span><br><span class="line">结果：<span class="number">26</span></span><br><span class="line">     <span class="number">27</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Double increment(H key, HK hashKey, double delta);</strong></p><p>通过给定的delta增加散列hashKey的值（浮点数）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForHash</span>()<span class="selector-class">.get</span>("<span class="selector-tag">redisHash</span>","<span class="selector-tag">age</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForHash</span>()<span class="selector-class">.increment</span>("<span class="selector-tag">redisHash</span>","<span class="selector-tag">age</span>",1<span class="selector-class">.1</span>));</span><br><span class="line">结果：27</span><br><span class="line">     28<span class="selector-class">.1</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<hk> keys(H key);</hk></strong></p><p>获取key所对应的散列表的key</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：System.<span class="keyword">out</span>.println(template.opsForHash().keys(<span class="string">"redisHash1"</span>));</span><br><span class="line">     <span class="comment">//redisHash1所对应的散列表为&#123;class=1, name=jack, age=27&#125;</span></span><br><span class="line">结果：[name, <span class="class"><span class="keyword">class</span>, <span class="type">age]</span></span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long size(H key);</strong>  </p><p>获取key所对应的散列表的大小个数</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForHash().<span class="built_in">size</span>(<span class="string">"redisHash1"</span>));</span><br><span class="line">      <span class="comment">//redisHash1所对应的散列表为&#123;class=1, name=jack, age=27&#125;</span></span><br><span class="line">结果：<span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>void putAll(H key, Map&lt;? extends HK, ? extends HV&gt; m);</strong> </p><p>使用m中提供的多个散列字段设置到key对应的散列表中</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：Map&lt;<span class="keyword">String</span>,Object&gt; testMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">       testMap.<span class="built_in">put</span>(<span class="string">"name"</span>,<span class="string">"jack"</span>);</span><br><span class="line">       testMap.<span class="built_in">put</span>(<span class="string">"age"</span>,<span class="number">27</span>);</span><br><span class="line">       testMap.<span class="built_in">put</span>(<span class="string">"class"</span>,<span class="string">"1"</span>);</span><br><span class="line">     <span class="keyword">template</span>.opsForHash().putAll(<span class="string">"redisHash1"</span>,testMap);</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForHash().entries(<span class="string">"redisHash1"</span>));</span><br><span class="line">结果：&#123;class=<span class="number">1</span>, name=jack, age=<span class="number">27</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>void put(H key, HK hashKey, HV value);</strong></p><p>设置散列hashKey的值</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="keyword">template</span>.opsForHash().<span class="built_in">put</span>(<span class="string">"redisHash"</span>,<span class="string">"name"</span>,<span class="string">"tom"</span>);</span><br><span class="line">     <span class="keyword">template</span>.opsForHash().<span class="built_in">put</span>(<span class="string">"redisHash"</span>,<span class="string">"age"</span>,<span class="number">26</span>);</span><br><span class="line">     <span class="keyword">template</span>.opsForHash().<span class="built_in">put</span>(<span class="string">"redisHash"</span>,<span class="string">"class"</span>,<span class="string">"6"</span>);</span><br><span class="line">  System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForHash().entries(<span class="string">"redisHash"</span>));</span><br><span class="line">结果：&#123;age=<span class="number">26</span>, class=<span class="number">6</span>, name=tom&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Boolean putIfAbsent(H key, HK hashKey, HV value);</strong></p><p>仅当hashKey不存在时才设置散列hashKey的值</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForHash().putIfAbsent(<span class="string">"redisHash"</span>,<span class="string">"age"</span>,<span class="number">30</span>));</span><br><span class="line">truetrueSystem.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForHash().putIfAbsent(<span class="string">"redisHash"</span>,<span class="string">"kkk"</span>,<span class="string">"kkk"</span>));</span><br><span class="line">结果：<span class="literal">false</span></span><br><span class="line">     <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>List<hv> values(H key);</hv></strong> </p><p>获取整个哈希存储的值根据密钥</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForHash</span>()<span class="selector-class">.values</span>("<span class="selector-tag">redisHash</span>"));</span><br><span class="line">结果：<span class="selector-attr">[tom, 26, 6]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Map<hk, hv=""> entries(H key);</hk,></strong></p><p>获取整个哈希存储根据密钥</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForHash().entries(<span class="string">"redisHash"</span>));</span><br><span class="line">结果：&#123;<span class="attribute">age</span>=26, <span class="attribute">class</span>=6, <span class="attribute">name</span>=tom&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Cursor<map.entry<hk, hv="">&gt; scan(H key, ScanOptions options);</map.entry<hk,></strong>  </p><p>使用Cursor在key的hash中迭代，相当于迭代器。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用：Cursor&lt;<span class="built_in">Map</span>.Entry&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt;&gt; curosr = template.opsForHash().scan(<span class="string">"redisHash"</span>, ScanOptions.ScanOptions.NONE);</span><br><span class="line">       <span class="keyword">while</span>(curosr.hasNext())&#123;</span><br><span class="line">          <span class="built_in">Map</span>.Entry&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt; entry = curosr.next();</span><br><span class="line">          System.out.println(entry.getKey()+<span class="string">":"</span>+entry.getValue());</span><br><span class="line">      &#125;</span><br><span class="line">结果：age:<span class="number">28.1</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span>:6</span></span><br><span class="line"><span class="class"> <span class="title">kkk</span>:<span class="title">kkk</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Redis的Set数据结构"><a href="#Redis的Set数据结构" class="headerlink" title="Redis的Set数据结构"></a>Redis的Set数据结构</h2><p>Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据 </p><p>Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。<br>public interface SetOperations<k,v><br>SetOperations提供了对无序集合的一系列操作：</k,v></p><ul><li><p><strong>Long add(K key, V… values);</strong></p><p>无序集合中添加元素，返回添加个数<br>也可以直接在add里面添加多个值 如：<code>template.opsForSet().add(&quot;setTest&quot;,&quot;aaa&quot;,&quot;bbb&quot;)</code></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="keyword">String</span>[] strarrays = <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"strarr1"</span>,<span class="string">"sgtarr2"</span>&#125;;</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForSet().add(<span class="string">"setTest"</span>, strarrays));</span><br><span class="line">结果：<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long remove(K key, Object… values);</strong></p><p>移除集合中一个或多个成员</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="keyword">String</span>[] strarrays = <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"strarr1"</span>,<span class="string">"sgtarr2"</span>&#125;;    </span><br><span class="line">truetrueSystem.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForSet().<span class="built_in">remove</span>(<span class="string">"setTest"</span>,strarrays));</span><br><span class="line">结果：<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>V pop(K key);</strong> </p><p>移除并返回集合中的一个随机元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.pop</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">结果：<span class="selector-tag">bbb</span></span><br><span class="line"><span class="selector-attr">[aaa, ccc]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Boolean move(K key, V value, K destKey);</strong></p><p>将 member 元素从 source 集合移动到 destination 集合  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用： <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.move</span>("<span class="selector-tag">setTest</span>","<span class="selector-tag">aaa</span>","<span class="selector-tag">setTest2</span>");</span><br><span class="line">      <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">      <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest2</span>"));</span><br><span class="line">结果： <span class="selector-attr">[ccc]</span></span><br><span class="line">      <span class="selector-attr">[aaa]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long size(K key);</strong></p><p>无序集合的大小长度</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForSet().<span class="built_in">size</span>(<span class="string">"setTest"</span>));</span><br><span class="line">结果：<span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Boolean isMember(K key, Object o);</strong> </p><p>判断 member 元素是否是集合 key 的成员</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForSet().isMember(<span class="string">"setTest"</span>,<span class="string">"ccc"</span>));</span><br><span class="line">     System.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForSet().isMember(<span class="string">"setTest"</span>,<span class="string">"asd"</span>));</span><br><span class="line">结果：<span class="literal">true</span></span><br><span class="line">     <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<v> intersect(K key, K otherKey);</v></strong></p><p>key对应的无序集合与otherKey对应的无序集合求交集</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用： <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">      <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest2</span>"));</span><br><span class="line">      <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.intersect</span>("<span class="selector-tag">setTest</span>","<span class="selector-tag">setTest2</span>"));</span><br><span class="line">结果：<span class="selector-attr">[aaa, ccc]</span></span><br><span class="line"><span class="selector-attr">[aaa]</span></span><br><span class="line"><span class="selector-attr">[aaa]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<v> intersect(K key, Collection<k> otherKeys);</k></v></strong> </p><p>key对应的无序集合与多个otherKey对应的无序集合求交集</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用： System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest"</span>));</span><br><span class="line">      System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest2"</span>));</span><br><span class="line">      System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest3"</span>));</span><br><span class="line">      List&lt;<span class="keyword">String</span>&gt; strlist = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">      strlist.add(<span class="string">"setTest2"</span>);</span><br><span class="line">      strlist.add(<span class="string">"setTest3"</span>);</span><br><span class="line">      System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForSet().intersect(<span class="string">"setTest"</span>,strlist));</span><br><span class="line">结果： [aaa, ccc]</span><br><span class="line">      [aaa]</span><br><span class="line">      [ccc, aaa]</span><br><span class="line">      [aaa]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long intersectAndStore(K key, K otherKey, K destKey);</strong></p><p>key无序集合与otherkey无序集合的交集存储到destKey无序集合中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTest</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line"><span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTest2</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest2</span>"));</span><br><span class="line">  <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.intersectAndStore</span>("<span class="selector-tag">setTest</span>","<span class="selector-tag">setTest2</span>","<span class="selector-tag">destKey1</span>"));</span><br><span class="line">   <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">destKey1</span>"));</span><br><span class="line">结果：<span class="selector-tag">setTest</span>:<span class="selector-attr">[ddd, bbb, aaa, ccc]</span></span><br><span class="line"><span class="selector-tag">setTest2</span>:<span class="selector-attr">[ccc, aaa]</span></span><br><span class="line">2</span><br><span class="line"><span class="selector-attr">[aaa, ccc]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long intersectAndStore(K key, Collection<k> otherKeys, K destKey);</k></strong></p><p>key对应的无序集合与多个otherKey对应的无序集合求交集存储到destKey无序集合中</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.<span class="built_in">println</span>(<span class="string">"setTest:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest"</span>));</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="string">"setTest2:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest2"</span>));</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="string">"setTest3:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest3"</span>));</span><br><span class="line">     List&lt;<span class="keyword">String</span>&gt; strlist = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">       strlist.add(<span class="string">"setTest2"</span>);</span><br><span class="line">       strlist.add(<span class="string">"setTest3"</span>);</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForSet().intersectAndStore(<span class="string">"setTest"</span>,strlist,<span class="string">"destKey2"</span>));</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForSet().members(<span class="string">"destKey2"</span>));</span><br><span class="line">结果：setTest:[ddd, bbb, aaa, ccc]</span><br><span class="line">setTest2:[ccc, aaa]</span><br><span class="line">setTest3:[ccc, aaa]</span><br><span class="line"><span class="number">2</span></span><br><span class="line">[aaa, ccc]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<v> union(K key, K otherKey);</v></strong></p><p>key无序集合与otherKey无序集合的并集</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTest</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTest2</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest2</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.union</span>("<span class="selector-tag">setTest</span>","<span class="selector-tag">setTest2</span>"));</span><br><span class="line">结果：<span class="selector-tag">setTest</span>:<span class="selector-attr">[ddd, bbb, aaa, ccc]</span></span><br><span class="line"><span class="selector-tag">setTest2</span>:<span class="selector-attr">[ccc, aaa]</span></span><br><span class="line"><span class="selector-attr">[ccc, aaa, ddd, bbb]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<v> union(K key, Collection<k> otherKeys);</k></v></strong></p><p>key无序集合与多个otherKey无序集合的并集</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.<span class="built_in">println</span>(<span class="string">"setTest:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest"</span>));</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="string">"setTest2:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest2"</span>));</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="string">"setTest3:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest3"</span>));</span><br><span class="line">     List&lt;<span class="keyword">String</span>&gt; strlist = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">      strlist.add(<span class="string">"setTest2"</span>);</span><br><span class="line">      strlist.add(<span class="string">"setTest3"</span>);</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForSet().<span class="keyword">union</span>(<span class="string">"setTest"</span>,strlist));</span><br><span class="line">结果：setTest:[ddd, bbb, aaa, ccc]</span><br><span class="line">setTest2:[ccc, aaa]</span><br><span class="line">setTest3:[xxx, ccc, aaa]</span><br><span class="line">[ddd, xxx, bbb, aaa, ccc]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long unionAndStore(K key, K otherKey, K destKey);</strong> </p><p>key无序集合与otherkey无序集合的并集存储到destKey无序集合中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTest</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTest2</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest2</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.unionAndStore</span>("<span class="selector-tag">setTest</span>","<span class="selector-tag">setTest2</span>","<span class="selector-tag">unionAndStoreTest1</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">unionAndStoreTest1</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">unionAndStoreTest1</span>"));</span><br><span class="line">结果：<span class="selector-tag">setTest</span>:<span class="selector-attr">[ddd, bbb, aaa, ccc]</span></span><br><span class="line"><span class="selector-tag">setTest2</span>:<span class="selector-attr">[ccc, aaa]</span></span><br><span class="line">4</span><br><span class="line"><span class="selector-tag">unionAndStoreTest1</span>:<span class="selector-attr">[ccc, aaa, ddd, bbb]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long unionAndStore(K key, Collection<k> otherKeys, K destKey);</k></strong></p><p>key无序集合与多个otherkey无序集合的并集存储到destKey无序集合中</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">使用： System.out.<span class="built_in">println</span>(<span class="string">"setTest:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest"</span>));</span><br><span class="line">      System.out.<span class="built_in">println</span>(<span class="string">"setTest2:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest2"</span>));</span><br><span class="line">      System.out.<span class="built_in">println</span>(<span class="string">"setTest3:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest3"</span>));</span><br><span class="line">      List&lt;<span class="keyword">String</span>&gt; strlist = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">      strlist.add(<span class="string">"setTest2"</span>);</span><br><span class="line">      strlist.add(<span class="string">"setTest3"</span>);</span><br><span class="line">      System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForSet().unionAndStore(<span class="string">"setTest"</span>,strlist,<span class="string">"unionAndStoreTest2"</span>));</span><br><span class="line">      System.out.<span class="built_in">println</span>(<span class="string">"unionAndStoreTest2:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"unionAndStoreTest2"</span>));</span><br><span class="line">结果：setTest:[ddd, bbb, aaa, ccc]</span><br><span class="line">setTest2:[ccc, aaa]</span><br><span class="line">setTest3:[xxx, ccc, aaa]</span><br><span class="line"><span class="number">5</span></span><br><span class="line">unionAndStoreTest2:[ddd, xxx, bbb, aaa, ccc]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<v> difference(K key, K otherKey);</v></strong></p><p>key无序集合与otherKey无序集合的差集</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用： <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTest</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">      <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTest2</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest2</span>"));</span><br><span class="line">      <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.difference</span>("<span class="selector-tag">setTest</span>","<span class="selector-tag">setTest2</span>"));</span><br><span class="line">结果：<span class="selector-tag">setTest</span>:<span class="selector-attr">[ddd, bbb, aaa, ccc]</span></span><br><span class="line"><span class="selector-tag">setTest2</span>:<span class="selector-attr">[ccc, aaa]</span></span><br><span class="line"><span class="selector-attr">[bbb, ddd]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<v> difference(K key, Collection<k> otherKeys);</k></v></strong></p><p>key无序集合与多个otherKey无序集合的差集</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.<span class="built_in">println</span>(<span class="string">"setTest:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest"</span>));</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="string">"setTest2:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest2"</span>));</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="string">"setTest3:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest3"</span>));</span><br><span class="line">     List&lt;<span class="keyword">String</span>&gt; strlist = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">      strlist.add(<span class="string">"setTest2"</span>);</span><br><span class="line">      strlist.add(<span class="string">"setTest3"</span>);</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForSet().difference(<span class="string">"setTest"</span>,strlist));</span><br><span class="line">结果：setTest:[ddd, bbb, aaa, ccc]</span><br><span class="line">setTest2:[ccc, aaa]</span><br><span class="line">setTest3:[xxx, ccc, aaa]</span><br><span class="line">[bbb, ddd]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long differenceAndStore(K key, K otherKey, K destKey);</strong> </p><p>key无序集合与otherkey无序集合的差集存储到destKey无序集合中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTest</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTest2</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest2</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.differenceAndStore</span>("<span class="selector-tag">setTest</span>","<span class="selector-tag">setTest2</span>","<span class="selector-tag">differenceAndStore1</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">differenceAndStore1</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">differenceAndStore1</span>"));</span><br><span class="line">结果：<span class="selector-tag">setTest</span>:<span class="selector-attr">[ddd, bbb, aaa, ccc]</span></span><br><span class="line"><span class="selector-tag">setTest2</span>:<span class="selector-attr">[ccc, aaa]</span></span><br><span class="line">2</span><br><span class="line"><span class="selector-tag">differenceAndStore1</span>:<span class="selector-attr">[bbb, ddd]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Long differenceAndStore(K key, Collection<k> otherKeys, K destKey);</k></strong> </p><p>key无序集合与多个otherkey无序集合的差集存储到destKey无序集合中</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.<span class="built_in">println</span>(<span class="string">"setTest:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest"</span>));</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="string">"setTest2:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest2"</span>));</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="string">"setTest3:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"setTest3"</span>));</span><br><span class="line">     List&lt;<span class="keyword">String</span>&gt; strlist = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">      strlist.add(<span class="string">"setTest2"</span>);</span><br><span class="line">      strlist.add(<span class="string">"setTest3"</span>);</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForSet().differenceAndStore(<span class="string">"setTest"</span>,strlist,<span class="string">"differenceAndStore2"</span>));</span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="string">"differenceAndStore2:"</span> + <span class="keyword">template</span>.opsForSet().members(<span class="string">"differenceAndStore2"</span>));</span><br><span class="line">结果：setTest:[ddd, bbb, aaa, ccc]</span><br><span class="line">setTest2:[ccc, aaa]</span><br><span class="line">setTest3:[xxx, ccc, aaa]</span><br><span class="line"><span class="number">2</span></span><br><span class="line">differenceAndStore2:[bbb, ddd]</span><br></pre></td></tr></table></figure></li><li><p><strong>Set<v> members(K key);</v></strong></p><p>返回集合中的所有成员</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">结果：<span class="selector-attr">[ddd, bbb, aaa, ccc]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>V randomMember(K key);</strong></p><p>随机获取key无序集合中的一个元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTest</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.members</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTestrandomMember</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.randomMember</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTestrandomMember</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.randomMember</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTestrandomMember</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.randomMember</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">     <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">setTestrandomMember</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.randomMember</span>("<span class="selector-tag">setTest</span>"));</span><br><span class="line">结果：<span class="selector-tag">setTest</span>:<span class="selector-attr">[ddd, bbb, aaa, ccc]</span></span><br><span class="line"><span class="selector-tag">setTestrandomMember</span><span class="selector-pseudo">:aaa</span></span><br><span class="line"><span class="selector-tag">setTestrandomMember</span><span class="selector-pseudo">:bbb</span></span><br><span class="line"><span class="selector-tag">setTestrandomMember</span><span class="selector-pseudo">:aaa</span></span><br><span class="line"><span class="selector-tag">setTestrandomMember</span><span class="selector-pseudo">:ddd</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<v> distinctRandomMembers(K key, long count);</v></strong> </p><p>获取多个key无序集合中的元素（去重），count表示个数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">randomMembers</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.distinctRandomMembers</span>("<span class="selector-tag">setTest</span>",5));</span><br><span class="line">结果：<span class="selector-tag">randomMembers</span>:<span class="selector-attr">[aaa, bbb, ddd, ccc]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>List<v> randomMembers(K key, long count);</v></strong></p><p>获取多个key无序集合中的元素，count表示个数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">randomMembers</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">template</span><span class="selector-class">.opsForSet</span>()<span class="selector-class">.randomMembers</span>("<span class="selector-tag">setTest</span>",5));</span><br><span class="line">结果：<span class="selector-tag">randomMembers</span>:<span class="selector-attr">[ccc, ddd, ddd, ddd, aaa]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Cursor<v> scan(K key, ScanOptions options);</v></strong></p><p>遍历set</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用： Cursor&lt;Object&gt; curosr = template.opsForSet().scan(<span class="string">"setTest"</span>, ScanOptions.NONE);</span><br><span class="line">        <span class="keyword">while</span>(curosr.hasNext())&#123;</span><br><span class="line">           System.out.println(curosr.next());</span><br><span class="line">        &#125;</span><br><span class="line">结果：ddd</span><br><span class="line">bbb</span><br><span class="line">aaa</span><br><span class="line">ccc</span><br></pre></td></tr></table></figure></li></ul><h2 id="Redis的ZSet数据结构"><a href="#Redis的ZSet数据结构" class="headerlink" title="Redis的ZSet数据结构"></a>Redis的ZSet数据结构</h2><p> Redis 有序集合和无序集合一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>有序集合的成员是唯一的,但分数(score)却可以重复。<br>public interface ZSetOperations<k,v><br>ZSetOperations提供了一系列方法对有序集合进行操作：</k,v></p><ul><li><p><strong>Boolean add(K key, V value, double score);</strong></p><p>新增一个有序集合，存在的话为false，不存在的话为true</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.<span class="keyword">out</span>.println(template.opsForZSet().<span class="keyword">add</span>(<span class="string">"zset1"</span>,<span class="string">"zset-1"</span>,<span class="number">1.0</span>));</span><br><span class="line">结果：<span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long add(K key, Set<typedtuple<v>&gt; tuples);</typedtuple<v></strong></p><p>新增一个有序集合</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用：ZSetOperations.TypedTuple&lt;<span class="keyword">Object</span>&gt; objectTypedTuple1 = <span class="keyword">new</span> DefaultTypedTuple&lt;<span class="keyword">Object</span>&gt;(<span class="string">"zset-5"</span>,<span class="number">9.6</span>);</span><br><span class="line">     ZSetOperations.TypedTuple&lt;<span class="keyword">Object</span>&gt; objectTypedTuple2 = <span class="keyword">new</span> DefaultTypedTuple&lt;<span class="keyword">Object</span>&gt;(<span class="string">"zset-6"</span>,<span class="number">9.9</span>);</span><br><span class="line">     Set&lt;ZSetOperations.TypedTuple&lt;<span class="keyword">Object</span>&gt;&gt; tuples = <span class="keyword">new</span> HashSet&lt;ZSetOperations.TypedTuple&lt;<span class="keyword">Object</span>&gt;&gt;();</span><br><span class="line">       tuples.<span class="built_in">add</span>(objectTypedTuple1);</span><br><span class="line">       tuples.<span class="built_in">add</span>(objectTypedTuple2);</span><br><span class="line">     System.out.<span class="built_in">println</span>(template.opsForZSet().<span class="built_in">add</span>(<span class="string">"zset1"</span>,tuples));</span><br><span class="line">     System.out.<span class="built_in">println</span>(template.opsForZSet().range(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">结果：[zset<span class="number">-1</span>, zset<span class="number">-2</span>, zset<span class="number">-3</span>, zset<span class="number">-4</span>, zset<span class="number">-5</span>, zset<span class="number">-6</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long remove(K key, Object… values);</strong> </p><p>从有序集合中移除一个或者多个元素</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用： System.out.println(template.opsForZSet().range(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">      System.out.println(template.opsForZSet().remove(<span class="string">"zset1"</span>,<span class="string">"zset-6"</span>));</span><br><span class="line">      System.out.println(template.opsForZSet().range(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">结果：[zset<span class="number">-1</span>, zset<span class="number">-2</span>, zset<span class="number">-3</span>, zset<span class="number">-4</span>, zset<span class="number">-5</span>, zset<span class="number">-6</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line">[zset<span class="number">-1</span>, zset<span class="number">-2</span>, zset<span class="number">-3</span>, zset<span class="number">-4</span>, zset<span class="number">-5</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Double incrementScore(K key, V value, double delta);</strong>  </p><p>增加元素的score值，并返回增加后的值</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForZSet().incrementScore(<span class="string">"zset1"</span>,<span class="string">"zset-1"</span>,<span class="number">1.1</span>));  <span class="comment">//原为1.1</span></span><br><span class="line">结果：<span class="number">2.2</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long rank(K key, Object o);</strong></p><p>返回有序集中指定成员的排名，其中有序集成员按分数值递增(从小到大)顺序排列</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().range(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">     System.out.println(template.opsForZSet().rank(<span class="string">"zset1"</span>,<span class="string">"zset-2"</span>));</span><br><span class="line">结果：[zset<span class="number">-2</span>, zset<span class="number">-1</span>, zset<span class="number">-3</span>, zset<span class="number">-4</span>, zset<span class="number">-5</span>]</span><br><span class="line">    <span class="number">0</span>   <span class="comment">//表明排名第一</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long reverseRank(K key, Object o);</strong> </p><p>返回有序集中指定成员的排名，其中有序集成员按分数值递减(从大到小)顺序排列</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().range(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">      System.out.println(template.opsForZSet().reverseRank(<span class="string">"zset1"</span>,<span class="string">"zset-2"</span>));</span><br><span class="line">结果：[zset<span class="number">-2</span>, zset<span class="number">-1</span>, zset<span class="number">-3</span>, zset<span class="number">-4</span>, zset<span class="number">-5</span>]</span><br><span class="line"><span class="number">4</span> <span class="comment">//递减之后排到第五位去了</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<v> range(K key, long start, long end);</v></strong></p><p>通过索引区间返回有序集合成指定区间内的成员，其中有序集成员按分数值递增(从小到大)顺序排列</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().range(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">结果：[zset<span class="number">-2</span>, zset<span class="number">-1</span>, zset<span class="number">-3</span>, zset<span class="number">-4</span>, zset<span class="number">-5</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<typedtuple<v>&gt; rangeWithScores(K key, long start, long end);</typedtuple<v></strong></p><p>通过索引区间返回有序集合成指定区间内的成员对象，其中有序集成员按分数值递增(从小到大)顺序排列</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">使用：Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples = template.opsForZSet().rangeWithScores(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">      Iterator&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; iterator = tuples.iterator();</span><br><span class="line">      <span class="keyword">while</span> (iterator.hasNext())</span><br><span class="line">      &#123;</span><br><span class="line">          ZSetOperations.TypedTuple&lt;Object&gt; typedTuple = iterator.next();</span><br><span class="line">          System.out.println(<span class="string">"value:"</span> + typedTuple.getValue() + <span class="string">"score:"</span> + typedTuple.getScore());</span><br><span class="line">      &#125;</span><br><span class="line">结果: <span class="string">value:</span>zset<span class="number">-2</span><span class="string">score:</span><span class="number">1.2</span></span><br><span class="line"><span class="string">value:</span>zset<span class="number">-1</span><span class="string">score:</span><span class="number">2.2</span></span><br><span class="line"><span class="string">value:</span>zset<span class="number">-3</span><span class="string">score:</span><span class="number">2.3</span></span><br><span class="line"><span class="string">value:</span>zset<span class="number">-4</span><span class="string">score:</span><span class="number">6.6</span></span><br><span class="line"><span class="string">value:</span>zset<span class="number">-5</span><span class="string">score:</span><span class="number">9.6</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Set<v> rangeByScore(K key, double min, double max);</v></strong></p><p>通过分数返回有序集合指定区间内的成员，其中有序集成员按分数值递增(从小到大)顺序排列</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().rangeByScore(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">结果：[zset<span class="number">-2</span>, zset<span class="number">-1</span>, zset<span class="number">-3</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<typedtuple<v>&gt; rangeByScoreWithScores(K key, double min, double max);</typedtuple<v></strong></p><p>通过分数返回有序集合指定区间内的成员对象，其中有序集成员按分数值递增(从小到大)顺序排列</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用：Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples = template.opsForZSet().rangeByScoreWithScores(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">      Iterator&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; iterator = tuples.iterator();</span><br><span class="line">      <span class="keyword">while</span> (iterator.hasNext())</span><br><span class="line">      &#123;</span><br><span class="line">          ZSetOperations.TypedTuple&lt;Object&gt; typedTuple = iterator.next();</span><br><span class="line">          System.out.println(<span class="string">"value:"</span> + typedTuple.getValue() + <span class="string">"score:"</span> + typedTuple.getScore());</span><br><span class="line">      &#125;</span><br><span class="line">结果：<span class="string">value:</span>zset<span class="number">-2</span><span class="string">score:</span><span class="number">1.2</span></span><br><span class="line"><span class="string">value:</span>zset<span class="number">-1</span><span class="string">score:</span><span class="number">2.2</span></span><br><span class="line"><span class="string">value:</span>zset<span class="number">-3</span><span class="string">score:</span><span class="number">2.3</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<v> rangeByScore(K key, double min, double max, long offset, long count);</v></strong></p><p>通过分数返回有序集合指定区间内的成员，并在索引范围内，其中有序集成员按分数值递增(从小到大)顺序排列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用： <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForZSet</span>()<span class="selector-class">.rangeByScore</span>("<span class="selector-tag">zset1</span>",0,5));</span><br><span class="line">    <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForZSet</span>()<span class="selector-class">.rangeByScore</span>("<span class="selector-tag">zset1</span>",0,5,1,2));</span><br><span class="line">结果: <span class="selector-attr">[zset-2, zset-1, zset-3]</span></span><br><span class="line"><span class="selector-attr">[zset-1, zset-3]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<typedtuple<v>&gt; rangeByScoreWithScores(K key, double min, double max, long offset, long count);</typedtuple<v></strong></p><p>通过分数返回有序集合指定区间内的成员对象，并在索引范围内，其中有序集成员按分数值递增(从小到大)顺序排列</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="type">Set</span>&lt;<span class="type">ZSetOperations</span>.<span class="type">TypedTuple</span>&lt;<span class="type">Object</span>&gt;&gt; tuples = <span class="keyword">template</span>.opsForZSet().rangeByScoreWithScores(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">      <span class="type">Iterator</span>&lt;<span class="type">ZSetOperations</span>.<span class="type">TypedTuple</span>&lt;<span class="type">Object</span>&gt;&gt; <span class="keyword">iterator</span> = tuples.<span class="keyword">iterator</span>();</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">iterator</span>.hasNext())</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="type">ZSetOperations</span>.<span class="type">TypedTuple</span>&lt;<span class="type">Object</span>&gt; typedTuple = <span class="keyword">iterator</span>.next();</span><br><span class="line">          <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"value:"</span> + typedTuple.getValue() + <span class="string">"score:"</span> + typedTuple.getScore());</span><br><span class="line">      &#125;</span><br><span class="line">结果：value:zset-<span class="number">1</span>score:<span class="number">2</span>.<span class="number">2</span></span><br><span class="line">value:zset-<span class="number">3</span>score:<span class="number">2</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<v> reverseRange(K key, long start, long end);</v></strong></p><p>通过索引区间返回有序集合成指定区间内的成员，其中有序集成员按分数值递减(从大到小)顺序排列</p></li></ul>  <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().reverseRange(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">结果：[zset<span class="number">-5</span>, zset<span class="number">-4</span>, zset<span class="number">-3</span>, zset<span class="number">-1</span>, zset<span class="number">-2</span>]</span><br></pre></td></tr></table></figure><ul><li><p><strong>Set<typedtuple<v>&gt; reverseRangeWithScores(K key, long start, long end);</typedtuple<v></strong></p><p>通过索引区间返回有序集合成指定区间内的成员对象，其中有序集成员按分数值递减(从大到小)顺序排列</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">使用：Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples = template.opsForZSet().reverseRangeWithScores(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">      Iterator&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; iterator = tuples.iterator();</span><br><span class="line">      <span class="keyword">while</span> (iterator.hasNext())</span><br><span class="line">      &#123;</span><br><span class="line">          ZSetOperations.TypedTuple&lt;Object&gt; typedTuple = iterator.next();</span><br><span class="line">          System.out.println(<span class="string">"value:"</span> + typedTuple.getValue() + <span class="string">"score:"</span> + typedTuple.getScore());</span><br><span class="line">      &#125;</span><br><span class="line">结果：<span class="string">value:</span>zset<span class="number">-5</span><span class="string">score:</span><span class="number">9.6</span></span><br><span class="line"><span class="string">value:</span>zset<span class="number">-4</span><span class="string">score:</span><span class="number">6.6</span></span><br><span class="line"><span class="string">value:</span>zset<span class="number">-3</span><span class="string">score:</span><span class="number">2.3</span></span><br><span class="line"><span class="string">value:</span>zset<span class="number">-1</span><span class="string">score:</span><span class="number">2.2</span></span><br><span class="line"><span class="string">value:</span>zset<span class="number">-2</span><span class="string">score:</span><span class="number">1.2</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<v> reverseRangeByScore(K key, double min, double max);</v></strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用：与<span class="selector-tag">rangeByScore</span>调用方法一样，其中有序集成员按分数值递减(从大到小)顺序排列</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<typedtuple<v>&gt; reverseRangeByScoreWithScores(K key, double min, double max);</typedtuple<v></strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用：与<span class="selector-tag">rangeByScoreWithScores</span>调用方法一样，其中有序集成员按分数值递减(从大到小)顺序排列</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<v> reverseRangeByScore(K key, double min, double max, long offset, long count);</v></strong>  </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用：与<span class="selector-tag">rangeByScore</span>调用方法一样，其中有序集成员按分数值递减(从大到小)顺序排列</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Set<typedtuple<v>&gt; reverseRangeByScoreWithScores(K key, double min, double max, long offset, long count);</typedtuple<v></strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用：与<span class="selector-tag">rangeByScoreWithScores</span>调用方法一样，其中有序集成员按分数值递减(从大到小)顺序排列</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long count(K key, double min, double max);</strong>  </p><p>通过分数返回有序集合指定区间内的成员个数</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().rangeByScore(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">      System.out.println(template.opsForZSet().count(<span class="string">"zset1"</span>,<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">结果：[zset<span class="number">-2</span>, zset<span class="number">-1</span>, zset<span class="number">-3</span>]</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long size(K key);</strong></p><p>获取有序集合的成员数，内部调用的就是zCard方法</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.<span class="built_in">println</span>(<span class="keyword">template</span>.opsForZSet().<span class="built_in">size</span>(<span class="string">"zset1"</span>));</span><br><span class="line">结果：<span class="number">6</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long zCard(K key);</strong> </p><p>获取有序集合的成员数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForZSet</span>()<span class="selector-class">.zCard</span>("<span class="selector-tag">zset1</span>"));</span><br><span class="line">结果：6</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Double score(K key, Object o);</strong>  </p><p>获取指定成员的score值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">template</span><span class="selector-class">.opsForZSet</span>()<span class="selector-class">.score</span>("<span class="selector-tag">zset1</span>","<span class="selector-tag">zset-1</span>"));</span><br><span class="line">结果：2<span class="selector-class">.2</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long removeRange(K key, long start, long end);</strong></p><p>移除指定索引位置的成员，其中有序集成员按分数值递增(从小到大)顺序排列</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().range(<span class="string">"zset2"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">      System.out.println(template.opsForZSet().removeRange(<span class="string">"zset2"</span>,<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">      System.out.println(template.opsForZSet().range(<span class="string">"zset2"</span>,<span class="number">0</span>,<span class="number">-1</span>));</span><br><span class="line">结果：[zset<span class="number">-1</span>, zset<span class="number">-2</span>, zset<span class="number">-3</span>, zset<span class="number">-4</span>]</span><br><span class="line"><span class="number">2</span></span><br><span class="line">[zset<span class="number">-1</span>, zset<span class="number">-4</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long removeRangeByScore(K key, double min, double max);</strong></p><p>根据指定的score值得范围来移除成员</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  使用：//<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zset2"</span>,<span class="string">"zset-1"</span>,<span class="number">1</span>.<span class="number">1</span>));</span><br><span class="line">       //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zset2"</span>,<span class="string">"zset-2"</span>,<span class="number">1</span>.<span class="number">2</span>));</span><br><span class="line">       //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zset2"</span>,<span class="string">"zset-3"</span>,<span class="number">2</span>.<span class="number">3</span>));</span><br><span class="line">       //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zset2"</span>,<span class="string">"zset-4"</span>,<span class="number">6</span>.<span class="number">6</span>));</span><br><span class="line">       <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().<span class="built_in">range</span>(<span class="string">"zset2"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">       <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().removeRangeByScore(<span class="string">"zset2"</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">    <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().<span class="built_in">range</span>(<span class="string">"zset2"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">结果： [zset-<span class="number">1</span>, zset-<span class="number">2</span>, zset-<span class="number">3</span>,zset-<span class="number">4</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line">[zset-<span class="number">1</span>, zset-<span class="number">2</span>, zset-<span class="number">4</span>]</span><br></pre></td></tr></table></figure></li><li><p><strong>Long unionAndStore(K key, K otherKey, K destKey);</strong> </p><p>计算给定的一个有序集的并集，并存储在新的 destKey中，key相同的话会把score值相加</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">使用： <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset1"</span>,<span class="string">"zset-1"</span>,<span class="number">1</span>.<span class="number">0</span>));</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset1"</span>,<span class="string">"zset-2"</span>,<span class="number">2</span>.<span class="number">0</span>));</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset1"</span>,<span class="string">"zset-3"</span>,<span class="number">3</span>.<span class="number">0</span>));</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset1"</span>,<span class="string">"zset-4"</span>,<span class="number">6</span>.<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset2"</span>,<span class="string">"zset-1"</span>,<span class="number">1</span>.<span class="number">0</span>));</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset2"</span>,<span class="string">"zset-2"</span>,<span class="number">2</span>.<span class="number">0</span>));</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset2"</span>,<span class="string">"zset-3"</span>,<span class="number">3</span>.<span class="number">0</span>));</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset2"</span>,<span class="string">"zset-4"</span>,<span class="number">6</span>.<span class="number">0</span>));</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset2"</span>,<span class="string">"zset-5"</span>,<span class="number">7</span>.<span class="number">0</span>));</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().unionAndStore(<span class="string">"zzset1"</span>,<span class="string">"zzset2"</span>,<span class="string">"destZset11"</span>));</span><br><span class="line"></span><br><span class="line">      <span class="type">Set</span>&lt;<span class="type">ZSetOperations</span>.<span class="type">TypedTuple</span>&lt;<span class="type">Object</span>&gt;&gt; tuples = <span class="keyword">template</span>.opsForZSet().rangeWithScores(<span class="string">"destZset11"</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">      <span class="type">Iterator</span>&lt;<span class="type">ZSetOperations</span>.<span class="type">TypedTuple</span>&lt;<span class="type">Object</span>&gt;&gt; <span class="keyword">iterator</span> = tuples.<span class="keyword">iterator</span>();</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">iterator</span>.hasNext())</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="type">ZSetOperations</span>.<span class="type">TypedTuple</span>&lt;<span class="type">Object</span>&gt; typedTuple = <span class="keyword">iterator</span>.next();</span><br><span class="line">          <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"value:"</span> + typedTuple.getValue() + <span class="string">"score:"</span> + typedTuple.getScore());</span><br><span class="line">      &#125;</span><br><span class="line">结果：value:zset-<span class="number">1</span>score:<span class="number">2</span>.<span class="number">0</span></span><br><span class="line">value:zset-<span class="number">2</span>score:<span class="number">4</span>.<span class="number">0</span></span><br><span class="line">value:zset-<span class="number">3</span>score:<span class="number">6</span>.<span class="number">0</span></span><br><span class="line">value:zset-<span class="number">5</span>score:<span class="number">7</span>.<span class="number">0</span></span><br><span class="line">value:zset-<span class="number">4</span>score:<span class="number">12</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long unionAndStore(K key, Collection<k> otherKeys, K destKey);</k></strong></p><p>计算给定的多个有序集的并集，并存储在新的 destKey中</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">使用： //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset1"</span>,<span class="string">"zset-1"</span>,<span class="number">1</span>.<span class="number">0</span>));</span><br><span class="line">      //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset1"</span>,<span class="string">"zset-2"</span>,<span class="number">2</span>.<span class="number">0</span>));</span><br><span class="line">      //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset1"</span>,<span class="string">"zset-3"</span>,<span class="number">3</span>.<span class="number">0</span>));</span><br><span class="line">      //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset1"</span>,<span class="string">"zset-4"</span>,<span class="number">6</span>.<span class="number">0</span>));</span><br><span class="line">      //</span><br><span class="line">      //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset2"</span>,<span class="string">"zset-1"</span>,<span class="number">1</span>.<span class="number">0</span>));</span><br><span class="line">      //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset2"</span>,<span class="string">"zset-2"</span>,<span class="number">2</span>.<span class="number">0</span>));</span><br><span class="line">      //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset2"</span>,<span class="string">"zset-3"</span>,<span class="number">3</span>.<span class="number">0</span>));</span><br><span class="line">      //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset2"</span>,<span class="string">"zset-4"</span>,<span class="number">6</span>.<span class="number">0</span>));</span><br><span class="line">      //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset2"</span>,<span class="string">"zset-5"</span>,<span class="number">7</span>.<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset3"</span>,<span class="string">"zset-1"</span>,<span class="number">1</span>.<span class="number">0</span>));</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset3"</span>,<span class="string">"zset-2"</span>,<span class="number">2</span>.<span class="number">0</span>));</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset3"</span>,<span class="string">"zset-3"</span>,<span class="number">3</span>.<span class="number">0</span>));</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset3"</span>,<span class="string">"zset-4"</span>,<span class="number">6</span>.<span class="number">0</span>));</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().add(<span class="string">"zzset3"</span>,<span class="string">"zset-5"</span>,<span class="number">7</span>.<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">      <span class="type">List</span>&lt;<span class="type">String</span>&gt; stringList = new <span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt;();</span><br><span class="line">      stringList.add(<span class="string">"zzset2"</span>);</span><br><span class="line">      stringList.add(<span class="string">"zzset3"</span>);</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">template</span>.opsForZSet().unionAndStore(<span class="string">"zzset1"</span>,stringList,<span class="string">"destZset22"</span>));</span><br><span class="line"></span><br><span class="line">      <span class="type">Set</span>&lt;<span class="type">ZSetOperations</span>.<span class="type">TypedTuple</span>&lt;<span class="type">Object</span>&gt;&gt; tuples = <span class="keyword">template</span>.opsForZSet().rangeWithScores(<span class="string">"destZset22"</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">      <span class="type">Iterator</span>&lt;<span class="type">ZSetOperations</span>.<span class="type">TypedTuple</span>&lt;<span class="type">Object</span>&gt;&gt; <span class="keyword">iterator</span> = tuples.<span class="keyword">iterator</span>();</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">iterator</span>.hasNext())</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="type">ZSetOperations</span>.<span class="type">TypedTuple</span>&lt;<span class="type">Object</span>&gt; typedTuple = <span class="keyword">iterator</span>.next();</span><br><span class="line">          <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"value:"</span> + typedTuple.getValue() + <span class="string">"score:"</span> + typedTuple.getScore());</span><br><span class="line">      &#125;</span><br><span class="line">结果： value:zset-<span class="number">1</span>score:<span class="number">3</span>.<span class="number">0</span></span><br><span class="line"> value:zset-<span class="number">2</span>score:<span class="number">6</span>.<span class="number">0</span></span><br><span class="line"> value:zset-<span class="number">3</span>score:<span class="number">9</span>.<span class="number">0</span></span><br><span class="line"> value:zset-<span class="number">5</span>score:<span class="number">14</span>.<span class="number">0</span></span><br><span class="line"> value:zset-<span class="number">4</span>score:<span class="number">18</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long intersectAndStore(K key, K otherKey, K destKey);</strong></p><p>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().intersectAndStore(<span class="string">"zzset1"</span>,<span class="string">"zzset2"</span>,<span class="string">"destZset33"</span>));</span><br><span class="line"></span><br><span class="line">     Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples = template.opsForZSet().rangeWithScores(<span class="string">"destZset33"</span>,<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">     Iterator&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; iterator = tuples.iterator();</span><br><span class="line">      <span class="keyword">while</span> (iterator.hasNext())</span><br><span class="line">      &#123;</span><br><span class="line">          ZSetOperations.TypedTuple&lt;Object&gt; typedTuple = iterator.next();</span><br><span class="line">          System.out.println(<span class="string">"value:"</span> + typedTuple.getValue() + <span class="string">"score:"</span> + typedTuple.getScore());</span><br><span class="line">      &#125;</span><br><span class="line">结果：<span class="string">value:</span>zset<span class="number">-1</span><span class="string">score:</span><span class="number">2.0</span></span><br><span class="line"><span class="string">value:</span>zset<span class="number">-2</span><span class="string">score:</span><span class="number">4.0</span></span><br><span class="line"><span class="string">value:</span>zset<span class="number">-3</span><span class="string">score:</span><span class="number">6.0</span></span><br><span class="line"><span class="string">value:</span>zset<span class="number">-4</span><span class="string">score:</span><span class="number">12.0</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Long intersectAndStore(K key, Collection<k> otherKeys, K destKey);</k></strong>  </p><p>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">使用：List&lt;<span class="keyword">String</span>&gt; stringList = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">     stringList.<span class="built_in">add</span>(<span class="string">"zzset2"</span>);</span><br><span class="line">      stringList.<span class="built_in">add</span>(<span class="string">"zzset3"</span>);</span><br><span class="line">     System.out.<span class="built_in">println</span>(template.opsForZSet().intersectAndStore(<span class="string">"zzset1"</span>,stringList,<span class="string">"destZset44"</span>));</span><br><span class="line"></span><br><span class="line">     Set&lt;ZSetOperations.TypedTuple&lt;<span class="keyword">Object</span>&gt;&gt; tuples = template.opsForZSet().rangeWithScores(<span class="string">"destZset44"</span>,<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">     Iterator&lt;ZSetOperations.TypedTuple&lt;<span class="keyword">Object</span>&gt;&gt; iterator = tuples.iterator();</span><br><span class="line">      <span class="keyword">while</span> (iterator.hasNext())</span><br><span class="line">      &#123;</span><br><span class="line">          ZSetOperations.TypedTuple&lt;<span class="keyword">Object</span>&gt; typedTuple = iterator.next();</span><br><span class="line">          System.out.<span class="built_in">println</span>(<span class="string">"value:"</span> + typedTuple.getValue() + <span class="string">"score:"</span> + typedTuple.getScore());</span><br><span class="line">      &#125;</span><br><span class="line">结果：</span><br><span class="line">value:zset<span class="number">-1</span>score:<span class="number">3.0</span></span><br><span class="line">value:zset<span class="number">-2</span>score:<span class="number">6.0</span></span><br><span class="line">value:zset<span class="number">-3</span>score:<span class="number">9.0</span></span><br><span class="line">value:zset<span class="number">-4</span>score:<span class="number">18.0</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Cursor<typedtuple<v>&gt; scan(K key, ScanOptions options);</typedtuple<v></strong> </p><p>遍历zset</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用： Cursor&lt;ZSetOperations.TypedTuple&lt;<span class="keyword">Object</span>&gt;&gt; <span class="built_in">cursor</span> = template.opsForZSet().scan(<span class="string">"zzset1"</span>, ScanOptions.NONE);</span><br><span class="line">      <span class="keyword">while</span> (<span class="built_in">cursor</span>.hasNext())&#123;</span><br><span class="line">          ZSetOperations.TypedTuple&lt;<span class="keyword">Object</span>&gt; item = <span class="built_in">cursor</span>.next();</span><br><span class="line">          System.out.<span class="built_in">println</span>(item.getValue() + <span class="string">":"</span> + item.getScore());</span><br><span class="line">      &#125;</span><br><span class="line">结果：</span><br><span class="line">zset<span class="number">-1</span>:<span class="number">1.0</span></span><br><span class="line">zset<span class="number">-2</span>:<span class="number">2.0</span></span><br><span class="line">zset<span class="number">-3</span>:<span class="number">3.0</span></span><br><span class="line">zset<span class="number">-4</span>:<span class="number">6.0</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注：TimeUnit是java.util.concurrent包下面的一个类，表示给定单元粒度的时间段<br>常用的颗粒度</p><p>TimeUnit.DAYS //天</p><p>TimeUnit.HOURS //小时</p><p>TimeUnit.MINUTES //分钟</p><p>TimeUnit.SECONDS //秒</p><p>TimeUnit.MILLISECONDS //毫秒</p></blockquote><p><strong>本文转自简书：<a href="https://www.jianshu.com/p/7bf5dc61ca06" target="_blank" rel="noopener">如何使用RedisTemplate访问Redis数据结构</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Redis-数据结构简介&quot;&gt;&lt;a href=&quot;#Redis-数据结构简介&quot; class=&quot;headerlink&quot; title=&quot;Redis 数据结构简介&quot;&gt;&lt;/a&gt;Redis 数据结构简介&lt;/h2&gt;&lt;p&gt;Redis 可以存储键与5种不同数据结构类型之间的映射，这5种数据结构类型分别为String（字符串）、List（列表）、Set（集合）、Hash（散列）和 Zset（有序集合）&lt;/p&gt;
&lt;p&gt;下面来对这5种数据结构类型作简单的介绍：&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://litxiaosa.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://litxiaosa.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（十）之 RabbitMQ</title>
    <link href="http://litxiaosa.cn/2017/12/14/SpringBoot%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8B%20RabbitMQ/"/>
    <id>http://litxiaosa.cn/2017/12/14/SpringBoot（十）之 RabbitMQ/</id>
    <published>2017-12-14T08:27:18.000Z</published>
    <updated>2017-12-28T09:46:58.451Z</updated>
    
    <content type="html"><![CDATA[<p>本文要介绍的RabbitMQ是以AMQP协议实现的一种中间件产品，它可以支持多种操作系统，多种编程语言，几乎可以覆盖所有主流的企业级技术平台。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><p>在RabbitMQ官网的下载页面 <a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noopener">https://www.rabbitmq.com/download.html</a>中，我们可以获取到针对各种不同操作系统的安装包和说明文档。</p><p>由于我用的是MAC ，这里介绍怎么在MAC上安装RabbitMQ。</p><a id="more"></a><p>在Mac OS X中使用brew工具，可以很容易的安装RabbitMQ的服务端，只需要按如下命令操作即可：</p><ul><li>brew更新到最新版本，执行：<code>brew update</code></li><li>安装Erlang，执行：<code>brew install erlang</code></li><li>安装RabbitMQ Server，执行：<code>brew install rabbitmq</code></li></ul><p>我们这里说一下brew工具，这是他的 <a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">官网</a> , 它是macOS 缺失的软件包管理器，非常好用，官网有中文，不知道的可以自己研究一下，如果你的电脑没有安装brew, 官网有安装教程，这里也不再赘述。</p><p>BabbitMQ是基于Erlang，安装Erlang时为了避免未知报错。</p><p>通过上面的命令，RabbitMQ Server的命令会被安装到 <code>/usr/local/sbin</code>，并不会自动加到用户的环境变量中去，所以我们需要在<code>.bash_profile</code>文件中增加下面内容：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span><span class="symbol">:/usr/local/sbin</span></span><br></pre></td></tr></table></figure><p>打开 <code>.bash_profile</code></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span> .bash_profile</span><br></pre></td></tr></table></figure><p>输入下面的命令使修改生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><p>这样，我们就可以通过 <code>rabbitmq-server</code> 命令来启动RabbitMQ的服务端了。</p><p>下图表示启动成功</p><p><img src="/2017/12/14/SpringBoot（十）之 RabbitMQ/1.png" alt=""></p><h3 id="RabbitMQ管理"><a href="#RabbitMQ管理" class="headerlink" title="RabbitMQ管理"></a><strong>RabbitMQ管理</strong></h3><p>我们可以直接通过配置文件的访问进行管理，也可以通过Web的访问进行管理。下面我们将介绍如何通过Web进行管理。</p><ul><li><p>执行 <code>rabbitmq-plugins enable rabbitmq_management</code> 命令，开启Web管理插件，这样我们就可以通过浏览器来进行管理了。</p><p>  <img src="/2017/12/14/SpringBoot（十）之 RabbitMQ/2.png" alt=""></p></li><li><p>打开浏览器并访问：<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a>， 并使用默认用户guest登录，密码也为guest。我们可以看到如下图的管理页面：</p><p>  <img src="/2017/12/14/SpringBoot（十）之 RabbitMQ/3.png" alt=""></p></li></ul><p>点击 <code>Admin</code> 标签，在这里可以进行用户的管理。</p><h3 id="与Spring-Boot整合"><a href="#与Spring-Boot整合" class="headerlink" title="与Spring Boot整合"></a><strong>与Spring Boot整合</strong></h3><p>下面，我们通过在Spring Boot应用中整合RabbitMQ，并实现一个简单的发送、接收消息的例子来对RabbitMQ有一个直观的感受和理解。</p><p>在Spring Boot中整合RabbitMQ是一件非常容易的事，下面我们就来详细说说整合过程：</p><ul><li>这次我们新建一个Spring Boot工程，命名为：“rabbitmq”</li><li><p>在pom.xml中引入如下依赖内容，其中spring-boot-starter-amqp用于支持RabbitMQ</p>  <figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attribute">&lt;groupId&gt;</span>org.springframework.boot<span class="attribute">&lt;/groupId</span></span><br><span class="line"><span class="attribute">    &lt;artifactId&gt;</span>spring-boot-starter-amqp<span class="attribute">&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attribute">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>application.properties</code> 中配置关于RabbitMQ的连接和用户信息，用户可以回到上面的安装内容，在管理页面中创建用户,这里我们用默认的账号</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.application</span><span class="selector-class">.name</span>=rabbitmq</span><br><span class="line"></span><br><span class="line">spring<span class="selector-class">.rabbitmq</span><span class="selector-class">.host</span>=localhost</span><br><span class="line">spring<span class="selector-class">.rabbitmq</span><span class="selector-class">.port</span>=<span class="number">5672</span></span><br><span class="line">spring<span class="selector-class">.rabbitmq</span><span class="selector-class">.username</span>=guest</span><br><span class="line">spring<span class="selector-class">.rabbitmq</span><span class="selector-class">.password</span>=guest</span><br></pre></td></tr></table></figure></li><li><p>创建消息生产者 <code>Sender</code>。通过注入 <code>AmqpTemplate</code> 接口的实例来实现消息的发送，<code>AmqpTemplate</code> 接口定义了一套针对AMQP协议的基础操作。在Spring Boot中会根据配置来注入其具体实现。在该生产者，我们会产生一个字符串，并发送到名为hello的队列中</p>  <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sender</span> &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span>  AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">send</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        String context = <span class="string">"RabbitMQ"</span> + <span class="keyword">new</span> Date();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Sender : "</span> + context);</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">"hello"</span>, context);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建消息消费者 <code>Receiver</code>。通过 <code>@RabbitListener</code> 注解定义该类对hello队列的监听，并用 <code>@RabbitHandler</code> 注解来指定对消息的处理方法。所以，该消费者实现了对hello队列的消费，消费操作为输出消息的字符串内容。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">process</span><span class="params">(String hello)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Receiver : "</span>+hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建RabbitMQ的配置类 <code>RabbitConfig</code>，用来配置队列、交换器、路由等高级信息。这里我们以入门为主，先以最小化的配置来定义，以完成一个基本的生产和消费过程。</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.amqp</span><span class="selector-class">.core</span><span class="selector-class">.Queue</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Bean</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Configuration</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Configuration</span></span><br><span class="line"><span class="keyword">public</span> class RabbitConfig &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Bean</span></span><br><span class="line">    public Queue helloQueue() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Queue</span>("<span class="selector-tag">hello</span>");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建单元测试类，用来调用消息生产：</p>  <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="variable">@SpringBootTest</span></span><br><span class="line">public class RabbitmqApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private  Sender sender;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span>  <span class="selector-tag">void</span> <span class="selector-tag">test</span>()&#123;</span><br><span class="line">        <span class="selector-tag">sender</span><span class="selector-class">.send</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  完成程序编写之后，下面开始尝试运行。首先确保RabbitMQ Server已经开始，然后进行下面的操作：</p></li><li><p>启动应用主类，从控制台中，我们看到如下内容，程序创建了一个访问<code>127.0.0.1:5672</code> 中 <code>springcloud</code> 的连接。</p>  <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Created <span class="keyword">new</span> connection: rabbitConnectionFactory<span class="string">#52100</span>cb8:<span class="number">0</span>/SimpleConnection@<span class="number">184</span>db0f4 [<span class="keyword">delegate</span>=amqp:<span class="comment">//guest@127.0.0.1:5672/, localPort= 62685]</span></span><br></pre></td></tr></table></figure><p>  同时，我们通过RabbitMQ的控制面板，可以看到Connection和Channels中包含当前连接的条目。</p></li><li><p>运行单元测试类，我们可以看到控制台中输出下面的内容，消息被发送到了RabbitMQ Server的hello队列中。</p>  <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sender : <span class="type">RabbitMQ</span><span class="comment">----------------------Thu Dec 14 18:44:16 CST 2017</span></span><br></pre></td></tr></table></figure></li><li><p>切换到应用主类的控制台，我们可以看到类似如下输出，消费者对hello队列的监听程序执行了，并输出了接受到的消息信息</p>  <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Receiver : <span class="type">RabbitMQ</span><span class="comment">----------------------Thu Dec 14 18:44:16 CST 2017</span></span><br></pre></td></tr></table></figure></li></ul><p>通过上面的示例，我们在Spring Boot应用中引入spring-boot-starter-amqp模块，进行简单配置就完成了对RabbitMQ的消息生产和消费的开发内容。然而在实际应用中，我们还有很多内容没有演示，这里不做更多的讲解，读者可以自行查阅RabbitMQ的官方教程，有更全面的了解。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文要介绍的RabbitMQ是以AMQP协议实现的一种中间件产品，它可以支持多种操作系统，多种编程语言，几乎可以覆盖所有主流的企业级技术平台。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;在RabbitMQ官网的下载页面 &lt;a href=&quot;https://www.rabbitmq.com/download.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.rabbitmq.com/download.html&lt;/a&gt;中，我们可以获取到针对各种不同操作系统的安装包和说明文档。&lt;/p&gt;
&lt;p&gt;由于我用的是MAC ，这里介绍怎么在MAC上安装RabbitMQ。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot系列" scheme="http://litxiaosa.cn/categories/SpringBoot%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringBoot" scheme="http://litxiaosa.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（九）之 事务管理</title>
    <link href="http://litxiaosa.cn/2017/12/14/SpringBoot%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8B%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>http://litxiaosa.cn/2017/12/14/SpringBoot（九）之 事务管理/</id>
    <published>2017-12-14T05:27:18.000Z</published>
    <updated>2018-03-21T10:32:05.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a><strong>什么是事务？</strong></h3><p>我们在开发企业应用时，对于业务人员的一个操作实际是对数据读写的多步操作的结合。由于数据操作在顺序执行的过程中，任何一步操作都有可能发生异常，异常会导致后续操作无法完成，此时由于业务逻辑并未正确的完成，之前成功操作数据的并不可靠，需要在这种情况下进行回退。</p><p>事务的作用就是为了保证用户的每一个操作都是可靠的，事务中的每一步操作都必须成功执行，只要有发生异常就回退到事务开始未进行操作的状态。</p><a id="more"></a><p>事务管理是Spring框架中最为常用的功能之一，我们在使用Spring Boot开发应用时，大部分情况下也都需要使用事务</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a><strong>快速入门</strong></h3><p>在Spring Boot中，当我们使用了spring-boot-starter-jdbc或spring-boot-starter-data-jpa依赖的时候，框架会自动默认分别注入<code>DataSourceTransactionManager</code>或 <code>JpaTransactionManager</code>。所以我们不需要任何额外配置就可以用 <code>@Transactional</code> 注解进行事务的使用。</p><p>我们用之前的项目作为基础模版，我们引入了spring-data-jpa，并创建了User实体以及对User的数据访问对象UserRepository，在ApplicationTest类中实现了使用UserRepository进行数据读写的单元测试用例，如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootTest</span></span><br><span class="line"><span class="variable">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line">public class DemoApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">   <span class="variable">@Autowired</span></span><br><span class="line">   UserRepository  userRepository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="variable">@Test</span></span><br><span class="line">   public  void  test ()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建5条数据</span></span><br><span class="line">      <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"a"</span>,<span class="string">"110"</span>));</span><br><span class="line">      <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"b"</span>,<span class="string">"112"</span>));</span><br><span class="line">      <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"c"</span>,<span class="string">"114"</span>));</span><br><span class="line">      <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"d"</span>,<span class="string">"115"</span>));</span><br><span class="line">      <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"e"</span>,<span class="string">"119"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在这个单元测试用例中，使用UserRepository对象连续创建了5个User实体到数据库中，下面我们人为的来制造一些异常，看看会发生什么情况。</p><p>通过定义User的userName属性长度为5，这样通过创建时User实体的userName属性超长就可以触发异常产生。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="built_in">Long</span>  id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, length = 5)</span></span><br><span class="line">    <span class="keyword">private</span>  String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span>  String passWord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  User()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User(String userName, String passWord) &#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.passWord = passWord;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改测试用例中创建记录的语句，将一条记录的userName长度超过5，如下：userName为AAAAAAAAAAAAAA的User对象将会抛出异常。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span>  test ()&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建5条数据</span></span><br><span class="line">   userRepository.<span class="built_in">save</span>(<span class="keyword">new</span> User(<span class="string">"a"</span>,<span class="string">"110"</span>));</span><br><span class="line">   userRepository.<span class="built_in">save</span>(<span class="keyword">new</span> User(<span class="string">"b"</span>,<span class="string">"112"</span>));</span><br><span class="line">   userRepository.<span class="built_in">save</span>(<span class="keyword">new</span> User(<span class="string">"c"</span>,<span class="string">"114"</span>));</span><br><span class="line">   userRepository.<span class="built_in">save</span>(<span class="keyword">new</span> User(<span class="string">"AAAAAAAAAAAAAA"</span>,<span class="string">"115"</span>));</span><br><span class="line">   userRepository.<span class="built_in">save</span>(<span class="keyword">new</span> User(<span class="string">"e"</span>,<span class="string">"119"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行测试用例，可以看到控制台中抛出了如下异常，userName字段超长：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.MysqlDataTruncation</span>: Data truncation: Data too long <span class="keyword">for</span> column <span class="string">'user_name'</span> at row <span class="number">1</span></span><br><span class="line">    at com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.MysqlIO</span><span class="selector-class">.checkErrorPacket</span>(MysqlIO<span class="selector-class">.java</span>:<span class="number">3971</span>)</span><br><span class="line">    at com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.MysqlIO</span><span class="selector-class">.checkErrorPacket</span>(MysqlIO<span class="selector-class">.java</span>:<span class="number">3909</span>)</span><br><span class="line">    at com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.MysqlIO</span><span class="selector-class">.sendCommand</span>(MysqlIO<span class="selector-class">.java</span>:<span class="number">2527</span>)</span><br><span class="line">    at com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.MysqlIO</span><span class="selector-class">.sqlQueryDirect</span>(MysqlIO<span class="selector-class">.java</span>:<span class="number">2680</span>)</span><br><span class="line">    at com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.ConnectionImpl</span><span class="selector-class">.execSQL</span>(ConnectionImpl<span class="selector-class">.java</span>:<span class="number">2487</span>)</span><br></pre></td></tr></table></figure><p>此时查数据库中，创建了userName从a到c的记录，没有AAAAAAAAAAAAAA,e的记录。而若这是一个希望保证完整性操作的情况下，a到c的记录希望能在发生异常的时候被回退，这时候就可以使用事务让它实现回退，做法非常简单，我们只需要在test函数上添加<code>@Transactional</code>注解即可。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Test</span></span><br><span class="line"><span class="variable">@Transactional</span></span><br><span class="line">public  void  test ()&#123;</span><br><span class="line">    <span class="comment">//创建5条数据</span></span><br><span class="line">    <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"a"</span>,<span class="string">"110"</span>));</span><br><span class="line">    <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"b"</span>,<span class="string">"112"</span>));</span><br><span class="line">    <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"c"</span>,<span class="string">"114"</span>));</span><br><span class="line">    <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"AAAAAAAAAAAAAA"</span>,<span class="string">"115"</span>));</span><br><span class="line">    <span class="selector-tag">userRepository</span><span class="selector-class">.save</span>(new User(<span class="string">"e"</span>,<span class="string">"119"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把刚刚插入的数据删掉，从新执行测试用例。再看数据库中，User表就没有a到c的用户数据了，成功实现了自动回滚。</p><p>这里主要通过单元测试演示了如何使用<code>@Transactional</code>注解来声明一个函数需要被事务管理，通常我们单元测试为了保证每个测试之间的数据独立，会使用<code>@Rollback</code>注解让每个单元测试都能在结束时回滚。而真正在开发业务逻辑时，我们通常在service层接口中使用<code>@Transactional</code>来对各个业务逻辑进行事务管理的配置。</p><h3 id="事务详解"><a href="#事务详解" class="headerlink" title="事务详解"></a><strong>事务详解</strong></h3><p>上面的例子中我们使用了默认的事务配置，可以满足一些基本的事务需求，但是当我们项目较大较复杂时（比如，有多个数据源等），这时候需要在声明事务时，指定不同的事务管理器。在声明事务时，只需要通过value属性指定配置的事务管理器名即可，例如：</p><p><code>@Transactional(value=&quot;transactionManagerPrimary&quot;)。</code></p><p>除了指定不同的事务管理器之后，还能对事务进行隔离级别和传播行为的控制，下面分别详细解释：</p><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a><strong>隔离级别</strong></h4><p>我们可以<code>org.springframework.transaction.annotation.Isolation</code>枚举类中定义了五个表示隔离级别的值：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Isolation</span> &#123;</span></span><br><span class="line">    DEFAULT(-<span class="number">1</span>),</span><br><span class="line">    READ_UNCOMMITTED(<span class="number">1</span>),</span><br><span class="line">    READ_COMMITTED(<span class="number">2</span>),</span><br><span class="line">    REPEATABLE_READ(<span class="number">4</span>),</span><br><span class="line">    SERIALIZABLE(<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是：READ_COMMITTED。</li><li>READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。</li><li>READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</li><li>REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读</li><li>SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li></ul><p>指定方法：通过使用isolation属性设置，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Transactional</span>(<span class="keyword">isolation</span> = Isolation.READ_COMMITTED)</span><br></pre></td></tr></table></figure><h4 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a><strong>传播行为</strong></h4><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。</p><p>我们可以看<code>org.springframework.transaction.annotation.Propagation</code>枚举类中定义了7个表示传播行为的枚举值：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Propagation</span> &#123;</span></span><br><span class="line">    REQUIRED(<span class="number">0</span>),</span><br><span class="line">    SUPPORTS(<span class="number">1</span>),</span><br><span class="line">    MANDATORY(<span class="number">2</span>),</span><br><span class="line">    REQUIRES_NEW(<span class="number">3</span>),</span><br><span class="line">    NOT_SUPPORTED(<span class="number">4</span>),</span><br><span class="line">    NEVER(<span class="number">5</span>),</span><br><span class="line">    NESTED(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li>SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li>MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li><li>REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li>NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li>NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li><li>NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于REQUIRED。</li></ul><p>指定方法：通过使用propagation属性设置，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Transactional</span>(<span class="keyword">propagation</span> = Propagation.REQUIRED)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是事务？&quot;&gt;&lt;a href=&quot;#什么是事务？&quot; class=&quot;headerlink&quot; title=&quot;什么是事务？&quot;&gt;&lt;/a&gt;&lt;strong&gt;什么是事务？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;我们在开发企业应用时，对于业务人员的一个操作实际是对数据读写的多步操作的结合。由于数据操作在顺序执行的过程中，任何一步操作都有可能发生异常，异常会导致后续操作无法完成，此时由于业务逻辑并未正确的完成，之前成功操作数据的并不可靠，需要在这种情况下进行回退。&lt;/p&gt;
&lt;p&gt;事务的作用就是为了保证用户的每一个操作都是可靠的，事务中的每一步操作都必须成功执行，只要有发生异常就回退到事务开始未进行操作的状态。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot系列" scheme="http://litxiaosa.cn/categories/SpringBoot%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringBoot" scheme="http://litxiaosa.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（八）之 整合 MyBatis</title>
    <link href="http://litxiaosa.cn/2017/12/13/SpringBoot%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8B%20%E6%95%B4%E5%90%88%20MyBatis/"/>
    <id>http://litxiaosa.cn/2017/12/13/SpringBoot（八）之 整合 MyBatis/</id>
    <published>2017-12-13T08:27:18.000Z</published>
    <updated>2017-12-13T10:09:22.039Z</updated>
    
    <content type="html"><![CDATA[<p>现在大部分的项目还是整合的mybatis，下边我们就学习SpringBoot整合MyBatis。使用的项目基础是我们之前的教程中一步一步建立起来的。</p><ul><li><p><code>pom.xml</code> 中引入依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 这里不引入spring-boot-starter-jdbc依赖，是由于mybatis-spring-boot-starter中已经包含了此依赖</p></li></ul><a id="more"></a><ul><li><p>同之前介绍的使用spring-data连接数据库一样，在<code>application.properties</code>中配置mysql的连接配置</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.url</span>=jdbc:mysql:<span class="comment">//localhost:3306/demo</span></span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.username</span>=root</span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.password</span>=root</span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.driver-class-name</span>=com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.Driver</span></span><br></pre></td></tr></table></figure></li><li><p>在Mysql中创建product表，包含id(bigint)、name(varcher)、colour(varcher)字段。同时，创建映射对象Product</p>  <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Data <span class="comment">//此注解为lombok</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">String</span>  colour;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Product映射的操作ProductMapper，为了后续单元测试验证，实现插入和查询操作</p>  <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Mapper</span></span><br><span class="line">public interface ProductMapper &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">@Insert</span>(<span class="string">"insert into product(name, colour) values(#&#123;name&#125;, #&#123;colour&#125;)"</span>)</span><br><span class="line">int insert(<span class="variable">@Param</span>(<span class="string">"name"</span>) String name, <span class="variable">@Param</span>(<span class="string">"colour"</span>) String colour);</span><br><span class="line"></span><br><span class="line"><span class="variable">@Select</span>(<span class="string">"select * from product where name = #&#123;name&#125;"</span>)</span><br><span class="line">Product getProductByName(<span class="variable">@Param</span>(<span class="string">"name"</span>) String name);</span><br><span class="line"></span><br><span class="line"><span class="variable">@Update</span>(<span class="string">"update product set colour = #&#123;colour&#125; where name =#&#123;name&#125;"</span>)</span><br><span class="line">int updateColourByName(<span class="variable">@Param</span>(<span class="string">"name"</span>) String name , <span class="variable">@Param</span>(<span class="string">"colour"</span>) String colour);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  接下来，我们分别来介绍下这个注解方式。</p><p>  Mybatis注解的方式很简单，只要定义一个dao接口，然后sql语句通过注解写在接口方法上。最后给这个接口添加@Mapper注解就行了。如上图。</p><p>  简单的语句只需要使用@Insert、@Update、@Delete、@Select这4个注解即可。</p></li><li><p>创建测试</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    productMapper.insert(<span class="string">"红桃A"</span>, <span class="string">"red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getProductByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Product  p  = productMapper.getProductByName(<span class="string">"红桃A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    productMapper.updateColourByName(<span class="string">"红桃A"</span>, <span class="string">"blue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分页插件</p><p>  <code>pom.xml</code>中添加依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  然后你只需在查询list之前使用PageHelper.startPage(int pageNum, int pageSize)方法即可。pageNum是第几页，pageSize是每页多少条。</p><p>  分页插件PageHelper项目地址： <a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在大部分的项目还是整合的mybatis，下边我们就学习SpringBoot整合MyBatis。使用的项目基础是我们之前的教程中一步一步建立起来的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pom.xml&lt;/code&gt; 中引入依赖&lt;/p&gt;
  &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.3.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 这里不引入spring-boot-starter-jdbc依赖，是由于mybatis-spring-boot-starter中已经包含了此依赖&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="SpringBoot系列" scheme="http://litxiaosa.cn/categories/SpringBoot%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringBoot" scheme="http://litxiaosa.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（七）之 Spring-data-jpa</title>
    <link href="http://litxiaosa.cn/2017/12/06/SpringBoot%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%20Spring-data-jpa/"/>
    <id>http://litxiaosa.cn/2017/12/06/SpringBoot（七）之 Spring-data-jpa/</id>
    <published>2017-12-06T01:27:18.000Z</published>
    <updated>2017-12-06T06:57:45.225Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它为Java开发人员提供了一种对象/关联映射工具来管理Java应用中的关系数据。提供了包括增删改查等在内的常用功能，且易于扩展。学习并使用 Spring Data JPA 可以极大提高开发效率,他的出现主要是为了简化现有的持久化开发工作和整合ORM技术,值得注意的是，JPA是在充分吸收了现有Hibernate，TopLink，JDO等ORM框架的基础上发展而来的，具有易于使用，伸缩性强等优点 。</p><a id="more"></a><h4 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a><strong>工程配置</strong></h4><p>在pom.xml中添加相关依赖，加入以下内容</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">&lt;dependency</span></span><br><span class="line"><span class="attribute">    &lt;groupId&gt;</span>org.springframework.boot<span class="attribute">&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attribute">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="attribute">&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attribute">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attribute">&lt;groupId&gt;</span>org.springframework.boot<span class="attribute">&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attribute">&lt;artifactId&gt;</span>spring-boot-starter-jdbc<span class="attribute">&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attribute">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attribute">&lt;groupId&gt;</span>mysql<span class="attribute">&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attribute">&lt;artifactId&gt;</span>mysql-connector-java<span class="attribute">&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attribute">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>application.properties</code>中配置：数据库连接信息（自动创建表结构的设置，例如使用mysql的情况如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.url</span>=jdbc:mysql:<span class="comment">//localhost:3306/demo</span></span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.username</span>=root </span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.password</span>=root</span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.driver-class-name</span>=com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.Driver</span></span><br><span class="line"></span><br><span class="line">spring<span class="selector-class">.jpa</span><span class="selector-class">.properties</span><span class="selector-class">.hibernate</span><span class="selector-class">.hbm2ddl</span><span class="selector-class">.auto</span>=create-drop</span><br></pre></td></tr></table></figure><p><code>spring.jpa.properties.hibernate.hbm2ddl.auto</code>是hibernate的配置属性，其主要作用是：自动创建、更新、验证数据库表结构。该参数的几种配置如下：</p><p><code>create</code>：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。</p><p><code>create-drop</code>：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。</p><p><code>update</code>：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。</p><p><code>validate</code>：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</p><h4 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a><strong>创建实体</strong></h4><p>创建一个User实体，包含id（主键）、userName（姓名）、passWord（密码）属性，通过ORM框架其会被映射到数据库表中，由于配置了<code>hibernate.hbm2ddl.auto</code>，在应用启动的时候框架会自动去数据库中创建对应的表。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="built_in">Long</span>  id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span>  String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span>  String passWord;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User(String userName, String passWord) &#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.passWord = passWord;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建数据访问接口"><a href="#创建数据访问接口" class="headerlink" title="创建数据访问接口"></a><strong>创建数据访问接口</strong></h4><p>下面针对User实体创建对应的<code>Repository</code>接口实现对该实体的数据访问，如下代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>UserRepository extends JpaRepository&lt;User, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> User </span>findByUserName(String userName);</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> User </span>findByUserNameAndPassWord(String userName, String passWord);</span><br><span class="line"></span><br><span class="line">    @Query(<span class="string">"from User u where u.userName=:userName"</span>)</span><br><span class="line">   <span class="built_in"> User </span>findUser(@Param(<span class="string">"userName"</span>) String userName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring-data-jpa中，只需要编写类似上面这样的接口就可实现数据访问。不再像我们以往编写了接口时候还需要自己编写接口实现类</p><p>下面对上面的<code>UserRepository</code>做一些解释，该接口继承自<code>JpaRepository</code>，通过查看<code>JpaRepository</code>接口的<a href="https://docs.spring.io/spring-data/data-jpa/docs/current/api/" target="_blank" rel="noopener">API文档</a>，可以看到该接口本身已经实现了创建（save）、更新（save）、删除（delete）、查询（findAll、findOne）等基本操作的函数，因此对于这些基础操作的数据访问就不需要开发者再自己定义。</p><p>在上例中，我们可以看到下面两个函数：</p><ul><li>User findByUserName(String userName)</li><li>User findByUserNameAndPassWord(String userName, String passWord)</li></ul><p>它们分别实现了按userName查询User实体和按userName和passWord查询User实体，可以看到我们这里没有任何类SQL语句就完成了两个条件查询方法。这就是Spring-data-jpa的一大特性：<strong>通过解析方法名创建查询。</strong></p><p>除了通过解析方法名来创建查询外，它也提供通过使用@Query 注解来创建查询，您只需要编写JPQL语句，并通过类似“:name”来映射@Param指定的参数，就像例子中的第三个findUser函数一样。</p><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a><strong>单元测试</strong></h4><p>在完成了上面的数据访问接口之后,我们编写对应的单元测试来验证编写的内容是否正确,我们在测试类中编写如下代码</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> DemoApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> testJpa()&#123;</span><br><span class="line">        <span class="comment">//创建5条数据</span></span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"a"</span>,<span class="string">"110"</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"b"</span>,<span class="string">"112"</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"c"</span>,<span class="string">"114"</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"d"</span>,<span class="string">"115"</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"e"</span>,<span class="string">"119"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试findAll, 查询所有记录</span></span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">count</span>  = userRepository.<span class="keyword">findAll</span>().<span class="keyword">size</span>();</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">count</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//测试findByUserName, 查询姓名为a的User</span></span><br><span class="line">        User user =  userRepository.findByUserName(<span class="string">"a"</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试findByUserNameAndPassWord, 查询姓名为e密码为119的User</span></span><br><span class="line">        user = userRepository.findByUserNameAndPassWord(<span class="string">"e"</span>, <span class="string">"119"</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试findUser, 查询姓名为b的User</span></span><br><span class="line">        user = userRepository.findUser(<span class="string">"b"</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试删除姓名为c的User</span></span><br><span class="line">        userRepository.<span class="keyword">delete</span>(userRepository.findByUserName(<span class="string">"c"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试findAll, 查询所有记录, 验证上面的删除是否成功</span></span><br><span class="line">        <span class="keyword">count</span> = userRepository.<span class="keyword">findAll</span>().<span class="keyword">size</span>();</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">count</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2017/12/06/SpringBoot（七）之 Spring-data-jpa/1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它为Java开发人员提供了一种对象/关联映射工具来管理Java应用中的关系数据。提供了包括增删改查等在内的常用功能，且易于扩展。学习并使用 Spring Data JPA 可以极大提高开发效率,他的出现主要是为了简化现有的持久化开发工作和整合ORM技术,值得注意的是，JPA是在充分吸收了现有Hibernate，TopLink，JDO等ORM框架的基础上发展而来的，具有易于使用，伸缩性强等优点 。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot系列" scheme="http://litxiaosa.cn/categories/SpringBoot%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringBoot" scheme="http://litxiaosa.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（六）之 使用Swagger2构建RESTful API</title>
    <link href="http://litxiaosa.cn/2017/12/05/SpringBoot%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%20%E4%BD%BF%E7%94%A8Swagger2%E6%9E%84%E5%BB%BARESTful%20API/"/>
    <id>http://litxiaosa.cn/2017/12/05/SpringBoot（六）之 使用Swagger2构建RESTful API/</id>
    <published>2017-12-05T08:27:18.000Z</published>
    <updated>2017-12-05T08:12:43.252Z</updated>
    
    <content type="html"><![CDATA[<p>由于Spring Boot能够快速开发、便捷部署等特性，相信有很大一部分Spring Boot的用户会用来构建RESTful API。</p><p>传统做法我们会创建一份RESTful API文档来记录所有接口细节，然而这样的做法有以下几个问题：</p><ul><li>由于接口众多，并且细节复杂，高质量地创建这份文档本身就是件非常吃力的事。</li><li>随着时间推移，不断修改接口实现的时候都必须同步修改接口文档，而文档与代码又处于两个不同的媒介，除非有严格的管理机制，不然很容易导致不一致现象。</li></ul><a id="more"></a><p>为了解决上面这样的问题，本文将介绍RESTful API的好伙伴Swagger2，它可以轻松的整合到Spring Boot中，并与Spring MVC程序配合组织出强大RESTful API文档。它既可以减少我们创建文档的工作量，同时说明内容又整合入实现代码中，让维护文档和修改代码整合为一体，可以让我们在修改代码逻辑的同时方便的修改文档说明。另外Swagger2也提供了强大的页面测试功能来调试每个RESTful API</p><p>下面来具体介绍，如果在Spring Boot中使用Swagger2</p><h4 id="添加Swagger2依赖"><a href="#添加Swagger2依赖" class="headerlink" title="添加Swagger2依赖"></a><strong>添加Swagger2依赖</strong></h4><p>在pom.xml中加入Swagger2的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建Swagger2配置类"><a href="#创建Swagger2配置类" class="headerlink" title="创建Swagger2配置类"></a><strong>创建Swagger2配置类</strong></h4><p>在<code>DemoApplication.java</code>同级创建<code>Swagger2</code>的配置类<code>Swagger</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@EnableSwagger2</span></span><br><span class="line">public class Swagger &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">@Bean</span></span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="selector-class">.apiInfo</span>(apiInfo())</span><br><span class="line">                <span class="selector-class">.select</span>()</span><br><span class="line">                <span class="selector-class">.apis</span>(RequestHandlerSelectors.basePackage(<span class="string">"com.xiaosa.demo"</span>))</span><br><span class="line">                <span class="selector-class">.paths</span>(PathSelectors.any())</span><br><span class="line">                <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">ApiInfo</span> <span class="selector-tag">apiInfo</span>() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">ApiInfoBuilder</span>()</span><br><span class="line">                <span class="selector-class">.title</span>(<span class="string">"Spring Boot中使用Swagger2构建RESTful API"</span>)</span><br><span class="line">                <span class="selector-class">.description</span>(<span class="string">"更多Spring Boot相关文章请关注：http://litxiaosa.me"</span>)</span><br><span class="line">                <span class="selector-class">.termsOfServiceUrl</span>(<span class="string">"http://litxiaosa.me/"</span>)</span><br><span class="line">                <span class="selector-class">.contact</span>(<span class="string">"潇洒"</span>)</span><br><span class="line">                <span class="selector-class">.version</span>(<span class="string">"1.0"</span>)</span><br><span class="line">                <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码所示，通过<code>@Configuration</code>注解，让Spring来加载该类配置。再通过<code>@EnableSwagger2</code>注解来启用Swagger2。</p><p>再通过<code>createRestApi</code>函数创建<code>Docket</code>的Bean之后，<code>apiInfo()</code>用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。select()函数返回一个<code>ApiSelectorBuilder</code>实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被<code>@ApiIgnore</code>指定的请求）。</p><h4 id="添加文档内容"><a href="#添加文档内容" class="headerlink" title="添加文档内容"></a><strong>添加文档内容</strong></h4><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们通过<code>@ApiOperation</code>注解来给API增加说明、通过<code>@ApiImplicitParams</code>、<code>@ApiImplicitParam</code>注解来给参数增加说明</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"/users"</span>)</span> <span class="comment">// 通过这里配置使下面的映射都在/users下，可去除</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    static Map&lt;<span class="built_in">Long</span>, User&gt; users = Collections.synchronizedMap(new HashMap&lt;<span class="built_in">Long</span>, User&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"获取用户列表"</span>, notes=<span class="meta-string">""</span>)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = <span class="meta-string">"getUserList"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; getUserList() &#123;</span><br><span class="line">        List&lt;User&gt; user = new ArrayList&lt;User&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"创建用户"</span>, notes=<span class="meta-string">"根据User对象创建用户"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"user"</span>, value = <span class="meta-string">"用户详细实体user"</span>, required = true, dataType = <span class="meta-string">"User"</span>)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = <span class="meta-string">"createUser"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String createUser(<span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"获取用户详细信息"</span>, notes=<span class="meta-string">"根据url的id来获取用户详细信息"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"用户ID"</span>, required = true, dataType = <span class="meta-string">"Long"</span>)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = <span class="meta-string">"getUser"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> User getUser(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id) &#123;</span><br><span class="line">        <span class="keyword">return</span> users.<span class="keyword">get</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"删除用户"</span>, notes=<span class="meta-string">"根据user的id来指定删除对象"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"用户ID"</span>, required = true, dataType = <span class="meta-string">"Long"</span>)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(value = <span class="meta-string">"deleteUser"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String deleteUser(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id) &#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成上述代码添加上，启动Spring Boot程序，访问：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> 就能看到前文所展示的RESTful API的页面。</p><p><img src="/2017/12/05/SpringBoot（六）之 使用Swagger2构建RESTful API/1.png" alt=""></p><p>我们可以再点开具体的API请求，以POST类型的/users请求为例，可找到上述代码中我们配置的Notes信息以及参数user的描述信息，如下图所示。</p><p><img src="/2017/12/05/SpringBoot（六）之 使用Swagger2构建RESTful API/2.png" alt=""></p><h4 id="API文档访问与调试"><a href="#API文档访问与调试" class="headerlink" title="API文档访问与调试"></a><strong>API文档访问与调试</strong></h4><p>在上图请求的页面中，我们看到user的Value是个输入框？是的，Swagger除了查看接口功能外，还提供了调试测试功能，我们可以点击上图中右侧的Model Schema（黄色区域：它指明了User的数据结构），此时Value中就有了user对象的模板，我们只需要稍适修改，点击下方“Try it out！”按钮，即可完成了一次请求调用！</p><p>相比为这些接口编写文档的工作，我们增加的配置内容是非常少而且精简的，对于原有代码的侵入也在忍受范围之内。因此，在构建RESTful API的同时，加入swagger来对API文档进行管理，是个不错的选择。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于Spring Boot能够快速开发、便捷部署等特性，相信有很大一部分Spring Boot的用户会用来构建RESTful API。&lt;/p&gt;
&lt;p&gt;传统做法我们会创建一份RESTful API文档来记录所有接口细节，然而这样的做法有以下几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于接口众多，并且细节复杂，高质量地创建这份文档本身就是件非常吃力的事。&lt;/li&gt;
&lt;li&gt;随着时间推移，不断修改接口实现的时候都必须同步修改接口文档，而文档与代码又处于两个不同的媒介，除非有严格的管理机制，不然很容易导致不一致现象。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="SpringBoot系列" scheme="http://litxiaosa.cn/categories/SpringBoot%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringBoot" scheme="http://litxiaosa.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（五）之 统一异常处理</title>
    <link href="http://litxiaosa.cn/2017/12/05/SpringBoot%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%20%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://litxiaosa.cn/2017/12/05/SpringBoot（五）之 统一异常处理/</id>
    <published>2017-12-05T06:27:18.000Z</published>
    <updated>2017-12-05T07:29:55.473Z</updated>
    
    <content type="html"><![CDATA[<p>我们在做Web应用的时候，请求处理过程中发生错误是非常常见的情况。Spring Boot提供了一个默认的映射：/error，当处理中抛出异常之后，会转到该请求中处理，并且该请求有一个全局的错误页面用来展示异常内容。</p><p>我们写一个一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaosa</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">error</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"发生错误！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>此时，可以看到类似下面的报错页面，该页面就是Spring Boot提供的默认error映射页面。</p><p><img src="/2017/12/05/SpringBoot（五）之 统一异常处理/1.png" alt=""></p><p>虽然，Spring Boot中实现了默认的error映射，但是在实际应用中，上面的错误页面对用户来说并不够友好，我们通常需要去实现我们自己的异常提示。</p><ul><li><p>创建全局异常处理类：通过使用<code>@ControllerAdvice</code>定义统一的异常处理类，而不是在每个<code>Controller</code>中逐个定义。<code>@ExceptionHandler</code>用来定义函数针对的异常类型，最后将<code>Exception</code>对象和请求URL映射到<code>error.html</code>中</p>  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_ERROR_VIEW = <span class="string">"error"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception.<span class="keyword">class</span>)</span><br><span class="line">    <span class="keyword">public</span> ModelAndView defaultErrorHandler(HttpServletRequest req, Exception e) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.addObject(<span class="string">"exception"</span>, e);</span><br><span class="line">        mav.addObject(<span class="string">"url"</span>, req.getRequestURL());</span><br><span class="line">        mav.setViewName(DEFAULT_ERROR_VIEW);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>error.html</code>页面展示：在<code>templates</code>目录下创建<code>error.html</code>，将请求的URL和Exception对象的message输出。</p>  <figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>统一异常处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Error Handler<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;exception.message&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><p>启动该应用，访问：<a href="http://localhost:8080/hello，可以看到如下错误提示页面" target="_blank" rel="noopener">http://localhost:8080/hello，可以看到如下错误提示页面</a>:</p><p><img src="/2017/12/05/SpringBoot（五）之 统一异常处理/2.png" alt=""></p><p>通过实现上述内容之后，我们只需要在<code>Controller</code>中抛出<code>Exception</code>，当然我们可能会有多种不同的<code>Exception</code>。然后在<code>@ControllerAdvice</code>类中，根据抛出的具体<code>Exception</code>类型匹配<code>@ExceptionHandler</code>中配置的异常类型来匹配错误映射和处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在做Web应用的时候，请求处理过程中发生错误是非常常见的情况。Spring Boot提供了一个默认的映射：/error，当处理中抛出异常之后，会转到该请求中处理，并且该请求有一个全局的错误页面用来展示异常内容。&lt;/p&gt;
&lt;p&gt;我们写一个一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; xiaosa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Controller&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ErrorController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;  String &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;string&quot;&gt;&quot;发生错误！！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="SpringBoot系列" scheme="http://litxiaosa.cn/categories/SpringBoot%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringBoot" scheme="http://litxiaosa.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（四）之 静态资源和拦截器</title>
    <link href="http://litxiaosa.cn/2017/12/05/SpringBoot%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%20%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://litxiaosa.cn/2017/12/05/SpringBoot（四）之 静态资源和拦截器/</id>
    <published>2017-12-05T02:27:18.000Z</published>
    <updated>2017-12-05T06:42:23.274Z</updated>
    
    <content type="html"><![CDATA[<p>本章我们来介绍下SpringBoot对静态资源的支持以及很重要的一个类<code>WebMvcConfigurerAdapter</code></p><p>通常情况下，Spring Boot的自动配置是符合我们大多数需求的。在你既需要保留Spring Boot提供的便利，有需要增加自己的额外的配置的时候，可以定义一个配置类并继承WebMvcConfigurerAdapter，重写这个类中的方法可以让我们增加额外的配置</p><a id="more"></a><h4 id="自定义资源映射addResourceHandlers"><a href="#自定义资源映射addResourceHandlers" class="headerlink" title="自定义资源映射addResourceHandlers"></a><strong>自定义资源映射addResourceHandlers</strong></h4><p>比如，我们想自定义静态资源映射目录的话，只需重写addResourceHandlers方法即可。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author xiaosa</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置静态访问资源</span></span><br><span class="line"><span class="comment">     * @param registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void addResourceHandlers(<span class="type">ResourceHandlerRegistry</span> registry) &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"image/**"</span>).addResourceLocations(<span class="string">"classpath:/image/"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>addResourceHandler</code>添加映射路径，然后通过<code>addResourceLocations</code>来指定路径。我们访问自定义<code>image</code>文件夹中的a.jpg 图片的地址为 <a href="http://localhost:8080/image/a.jpg" target="_blank" rel="noopener">http://localhost:8080/image/a.jpg</a></p><p>addResourceLocations指的是文件放置的目录，addResoureHandler指的是对外暴露的访问路径</p><h4 id="页面跳转addViewControllers"><a href="#页面跳转addViewControllers" class="headerlink" title="页面跳转addViewControllers"></a><strong>页面跳转addViewControllers</strong></h4><p>SpringBoot 中，重写<code>WebMvcConfigurerAdapter</code>中的<code>addViewControllers</code>方法即可达到效果</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面跳转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addViewController(<span class="string">"login"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">    <span class="keyword">super</span>.addViewControllers(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里重写<code>addViewControllers</code>方法，并不会覆盖<code>WebMvcAutoConfiguration</code>中的<code>addViewControllers</code>（在此方法中，Spring Boot将“/”映射至index.html），这也就意味着我们自己的配置和Spring Boot的自动配置同时有效，这也是我们推荐添加自己的MVC配置的方式。  </p><h4 id="拦截器addInterceptors"><a href="#拦截器addInterceptors" class="headerlink" title="拦截器addInterceptors"></a><strong>拦截器addInterceptors</strong></h4><p>拦截器在我们项目中经常使用的，这里就来介绍下最简单的判断是否登录的使用。<br>要实现拦截器功能需要完成以下2个步骤：</p><ul><li>创建我们自己的拦截器类并实现 HandlerInterceptor 接口</li><li>重写WebMvcConfigurerAdapter中的addInterceptors方法把自定义的拦截器类添加进来</li></ul><p>第一步：自定义拦截器</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokingInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = (User)request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            response.sendRedirect(<span class="string">"login"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们简单实现了根据session中是否有User对象来判断是否登录，为空就跳转到登录页，不为空就通过。</p><p>第二步：重写<code>WebMvcConfigurerAdapter</code>中的<code>addInterceptors</code>方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// addPathPatterns 用于添加拦截规则</span></span><br><span class="line">    <span class="comment">// excludePathPatterns 用户排除拦截</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> InvokingInterceptor())</span><br><span class="line">            .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">"/toLogin"</span>,<span class="string">"/login"</span>);</span><br><span class="line">    <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样拦截器就写完了。</p><p><strong>页面登录代码</strong></p><p>html:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">meta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span> = <span class="string">"userName"</span> <span class="attr">required</span>=<span class="string">"required"</span> <span class="attr">placeholder</span> = <span class="string">"用户名"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span> = <span class="string">"password"</span> <span class="attr">required</span>=<span class="string">"required"</span> <span class="attr">placeholder</span> = <span class="string">"密码"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span> = <span class="string">"submit"</span> <span class="attr">id</span> = <span class="string">"toLogin"</span> &gt;</span>登陆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/login.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#toLogin"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type : <span class="string">"post"</span>,</span><br><span class="line">        url : <span class="string">"/toLogin"</span>,</span><br><span class="line">        data : &#123;</span><br><span class="line">            <span class="string">"userName"</span> : $(<span class="string">"#userName"</span>).val(),</span><br><span class="line">            <span class="string">"password"</span> : $(<span class="string">"#password"</span>).val()</span><br><span class="line">        &#125;,</span><br><span class="line">        success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (data.result == <span class="string">"0"</span>) &#123;</span><br><span class="line">                <span class="built_in">window</span>.location.href =<span class="string">"/learn"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">"账号密码不能为空！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>控制层代码</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登陆</span></span><br><span class="line"><span class="comment">     * @param request</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @RequestMapping(value = <span class="string">"/toLogin"</span>, method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; login(HttpServletRequest request, <span class="keyword">String</span> userName, <span class="keyword">String</span> password)&#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; map = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span>(!userName.equals(<span class="string">""</span>) &amp;&amp; password!=<span class="string">""</span>)&#123;</span><br><span class="line">            User user =<span class="keyword">new</span> <span class="type">User</span>(userName,password);</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">            map.put(<span class="string">"result"</span>,<span class="string">"0"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(<span class="string">"result"</span>,<span class="string">"-1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/learn"</span>)</span><br><span class="line">    <span class="keyword">public</span> ModelAndView index ()&#123;</span><br><span class="line">        List&lt;LearnThymeleaf&gt; learnList =<span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        LearnThymeleaf bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"官方参考文档"</span>,<span class="string">"Spring Boot Reference Guide"</span>,<span class="string">"地址1"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"地址2"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"龙国学院"</span>,<span class="string">"Spring Boot 教程系列学习"</span>,<span class="string">"地址3"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"潇洒的博客"</span>,<span class="string">"SpringBoot系列"</span>,<span class="string">"地址4"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"程序猿DD"</span>,<span class="string">"Spring Boot系列"</span>,<span class="string">"地址5"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> <span class="type">ModelAndView</span>(<span class="string">"/index"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"learnList"</span>, learnList);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样访问的时候，如果未登录就会跳转到login.html页面，而访问 <a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a> 不会被拦截。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章我们来介绍下SpringBoot对静态资源的支持以及很重要的一个类&lt;code&gt;WebMvcConfigurerAdapter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通常情况下，Spring Boot的自动配置是符合我们大多数需求的。在你既需要保留Spring Boot提供的便利，有需要增加自己的额外的配置的时候，可以定义一个配置类并继承WebMvcConfigurerAdapter，重写这个类中的方法可以让我们增加额外的配置&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot系列" scheme="http://litxiaosa.cn/categories/SpringBoot%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringBoot" scheme="http://litxiaosa.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（三）之 Thymeleaf篇</title>
    <link href="http://litxiaosa.cn/2017/12/04/SpringBoot%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%20Thymeleaf%E7%AF%87/"/>
    <id>http://litxiaosa.cn/2017/12/04/SpringBoot（三）之 Thymeleaf篇/</id>
    <published>2017-12-04T08:07:18.000Z</published>
    <updated>2017-12-05T06:36:26.100Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的示例中，我们都是通过@RestController来处理请求，所以返回的内容为json对象。那么如果需要渲染html页面的时候，要如何实现呢？</p><p>Spring Boot提供了默认配置的模板引擎主要有以下几种：</p><ul><li>Thymeleaf（官方推荐）</li><li>FreeMarker</li><li>Velocity</li><li>Groovy</li><li>Mustache</li></ul><a id="more"></a><p>当你使用上述模板引擎中的任何一个，它们默认的模板配置路径为：<code>src/main/resources/templates</code></p><h3 id="Thymeleaf模版"><a href="#Thymeleaf模版" class="headerlink" title="Thymeleaf模版"></a><strong>Thymeleaf模版</strong></h3><p>Thymeleaf提供了一个用于整合Spring MVC的可选模块，在应用开发中，你可以使用Thymeleaf来完全代替JSP或其他模板引擎，如Velocity、FreeMarker等。Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。你可以使用它创建经过验证的XML与HTML模板。相对于编写逻辑或代码，开发者只需将标签属性添加到模板中即可。</p><p>在Spring Boot中使用Thymeleaf，只需要引入下面依赖，并在默认的模板路径<code>src/main/resources/templates</code>下编写模板文件即可完成。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="示例页面模板："><a href="#示例页面模板：" class="headerlink" title="示例页面模板："></a><strong>示例页面模板：</strong></h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>learn thymeleaf<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: center;margin:0 auto;width: 500px; "</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>SpringBoot系列<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>系列名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"learn : $</span></span></span><span class="template-variable">&#123;learnList&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;learn.author&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>潇洒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;learn.title&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>SpringBoot系列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;learn.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>注：通过xmlns:th=”<a href="http://www.thymeleaf.org“" target="_blank" rel="noopener">http://www.thymeleaf.org“</a> 命令空间，将静态页面转换为动态的视图，需要进行动态处理的元素将使用“th:”前缀。</p></blockquote><h4 id="编写controller"><a href="#编写controller" class="headerlink" title="编写controller:"></a><strong>编写controller:</strong></h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/"</span>)</span><br><span class="line">    <span class="keyword">public</span> ModelAndView index ()&#123;</span><br><span class="line">        List&lt;LearnThymeleaf&gt; learnList =<span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        LearnThymeleaf bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"官方参考文档"</span>,<span class="string">"Spring Boot Reference Guide"</span>,<span class="string">"地址1"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"地址2"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"龙国学院"</span>,<span class="string">"Spring Boot 教程系列学习"</span>,<span class="string">"地址3"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"潇洒的博客"</span>,<span class="string">"SpringBoot系列"</span>,<span class="string">"地址4"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> <span class="type">LearnThymeleaf</span>(<span class="string">"程序猿DD"</span>,<span class="string">"Spring Boot系列"</span>,<span class="string">"地址5"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> <span class="type">ModelAndView</span>(<span class="string">"/index"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"learnList"</span>, learnList);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接打开html页面展现下面的内容</p><p><img src="/2017/12/04/SpringBoot（三）之 Thymeleaf篇/1.png" alt=""></p><p>但是启动程序后，访问 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 则是展示Controller中的值，做到了不破坏HTML自身内容的数据逻辑分离。</p><p><img src="/2017/12/04/SpringBoot（三）之 Thymeleaf篇/2.png" alt=""></p><p>如果报错404， 看一下Thymeleaf是否引入到了maven里。</p><p>更多Thymeleaf的页面语法，还请访问<a href="http://www.thymeleaf.org/documentation.html" target="_blank" rel="noopener">Thymeleaf的官方文档</a>查询使用。</p><h4 id="Thymeleaf的默认参数配置"><a href="#Thymeleaf的默认参数配置" class="headerlink" title="Thymeleaf的默认参数配置"></a><strong>Thymeleaf的默认参数配置</strong></h4><p>如有需要修改默认配置的时候，只需复制下面要修改的属性到application.properties中，并修改成需要的值，如修改模板文件的扩展名，修改默认的模板路径等。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启模板缓存（默认值：true）</span></span><br><span class="line"><span class="string">spring.thymeleaf.cache=true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#在展示之前检查模板是否存在。</span></span><br><span class="line"><span class="string">spring.thymeleaf.check-template=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查模板位置是否正确（默认值:true）</span></span><br><span class="line"><span class="string">spring.thymeleaf.check-template-location=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Content-Type的值（默认值：text/html）</span></span><br><span class="line"><span class="string">spring.thymeleaf.content-type=text/html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启MVC Thymeleaf视图解析（默认值：true）</span></span><br><span class="line"><span class="string">spring.thymeleaf.enabled=true</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#模板编码</span></span><br><span class="line"><span class="string">spring.thymeleaf.encoding=UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要被排除在解析之外的视图名称列表，用逗号分隔</span></span><br><span class="line"><span class="string">spring.thymeleaf.excluded-view-names=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要运用于模板之上的模板模式。另见StandardTemplate-ModeHandlers(默认值：HTML5)</span></span><br><span class="line"><span class="string">spring.thymeleaf.mode=HTML5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在构建URL时添加到视图名称前的前缀（默认值：classpath:/templates/）</span></span><br><span class="line"><span class="string">spring.thymeleaf.prefix=classpath:/templates/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在构建URL时添加到视图名称后的后缀（默认值：.html）</span></span><br><span class="line"><span class="string">spring.thymeleaf.suffix=.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Thymeleaf模板解析器在解析器链中的顺序。默认情况下，它排第一位。顺序从1开始，只有在定义了额外的TemplateResolver Bean时才需要设置这个属性。</span></span><br><span class="line"><span class="string">spring.thymeleaf.template-resolver-order=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可解析的视图名称列表，用逗号分隔</span></span><br><span class="line"><span class="string">spring.thymeleaf.view-names=</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前的示例中，我们都是通过@RestController来处理请求，所以返回的内容为json对象。那么如果需要渲染html页面的时候，要如何实现呢？&lt;/p&gt;
&lt;p&gt;Spring Boot提供了默认配置的模板引擎主要有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thymeleaf（官方推荐）&lt;/li&gt;
&lt;li&gt;FreeMarker&lt;/li&gt;
&lt;li&gt;Velocity&lt;/li&gt;
&lt;li&gt;Groovy&lt;/li&gt;
&lt;li&gt;Mustache&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="SpringBoot系列" scheme="http://litxiaosa.cn/categories/SpringBoot%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringBoot" scheme="http://litxiaosa.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot (二) 之 配置文件详解</title>
    <link href="http://litxiaosa.cn/2017/12/04/SpringBoot%20%20(%E4%BA%8C)%20%E4%B9%8B%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://litxiaosa.cn/2017/12/04/SpringBoot  (二) 之 配置文件详解/</id>
    <published>2017-12-04T06:07:18.000Z</published>
    <updated>2017-12-05T07:34:01.626Z</updated>
    
    <content type="html"><![CDATA[<p>相信很多人选择Spring Boot主要是考虑到它既能兼顾Spring的强大功能，还能实现快速开发的便捷。我们在Spring Boot使用过程中，最直观的感受就是没有了原来自己整合Spring应用时繁多的XML配置内容，替代它的是在pom.xml中引入模块化的Starter POMs，其中各个模块都有自己的默认配置，所以如果不是特殊应用场景，就只需要在application.properties中完成一些属性配置就能开启各模块的应用。</p><a id="more"></a><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a><strong>自定义属性</strong></h3><p>application.properties提供自定义属性的支持，这样我们就可以把一些常量配置在这里：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com<span class="selector-class">.xiaosa</span><span class="selector-class">.name</span> = <span class="string">"xiaosa"</span></span><br><span class="line">com<span class="selector-class">.xiaosa</span><span class="selector-class">.title</span> = <span class="string">"SpringBoot"</span></span><br></pre></td></tr></table></figure><p>然后通过<code>@Value(&quot;${属性名}&quot;)</code>注解来加载对应的配置属性，为了方便我们依然在启动类里写如下代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;com.xiaosa.name&#125;</span>"</span>)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;com.xiaosa.title&#125;</span>"</span>)</span></span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String hexo()&#123;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">","</span>+title;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们启动工程输入<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 就可以看到打印了<code>”xiaosa,SpringBoot”</code></p><p>在application.properties中的各个参数之间也可以直接引用来使用，就像下面的设置：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com<span class="selector-class">.xiaosa</span><span class="selector-class">.name</span>=xiaosa</span><br><span class="line">com<span class="selector-class">.xiaosa</span><span class="selector-class">.title</span>=StringBoot</span><br><span class="line">com<span class="selector-class">.xiaosa</span><span class="selector-class">.desc</span>=$&#123;com.xiaosaname&#125;正在努力学$&#123;com<span class="selector-class">.xiaosa</span><span class="selector-class">.title</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="使用随机数"><a href="#使用随机数" class="headerlink" title="使用随机数"></a><strong>使用随机数</strong></h3><p>在一些情况下，有些参数我们需要希望它不是一个固定的值，比如密钥、服务端口等。Spring Boot的属性配置文件中可以通过<code>${random}</code>来产生int值、long值或者string字符串，来支持属性的随机值。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机字符串</span></span><br><span class="line">com.xiaosa.<span class="attribute">value</span>=<span class="variable">$&#123;random.value&#125;</span></span><br><span class="line"><span class="comment"># 随机int</span></span><br><span class="line">com.xiaosa.<span class="attribute">number</span>=<span class="variable">$&#123;random.int&#125;</span></span><br><span class="line"><span class="comment"># 随机long</span></span><br><span class="line">com.xiaosa.<span class="attribute">bignumber</span>=<span class="variable">$&#123;random.long&#125;</span></span><br><span class="line"><span class="comment"># 10以内的随机数</span></span><br><span class="line">com.xiaosa.<span class="attribute">test1</span>=<span class="variable">$&#123;random.int(10)&#125;</span></span><br><span class="line"><span class="comment"># 10-20的随机数</span></span><br><span class="line">com.xiaosa.<span class="attribute">test2</span>=<span class="variable">$&#123;random.int[10,20]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a><strong>多环境配置</strong></h3><p>我们在开发Spring Boot应用时，通常同一套程序会被应用和安装到几个不同的环境，比如：开发、测试、生产等。其中每个环境的数据库地址、服务器端口等等配置都会不同，如果在为不同环境打包时都要频繁修改配置文件的话，那必将是个非常繁琐且容易发生错误的事。</p><p>在Spring Boot中多环境配置文件名需要满足<code>application-{profile}.properties</code>的格式，其中<code>{profile}</code>对应你的环境标识，比如：</p><ul><li><p>application-dev.properties：开发环境</p></li><li><p>application-test.properties：测试环境  </p></li><li><p>application-prod.properties：生产环境</p></li></ul><p>至于哪个具体的配置文件会被加载，需要在<code>application.properties</code>文件中通过<code>spring.profiles.active</code>属性来设置，其值对应<code>{profile}</code>值。</p><p>如：<code>spring.profiles.active=test</code>就会加载<code>application-test.properties</code>配置文件内容</p><p>还可以给不同的环境添加不同的端口属性,例如：</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="attribute">port</span>=8081</span><br></pre></td></tr></table></figure><p>按照上面的实验，可以如下总结多环境的配置思路：</p><ul><li><code>application.properties</code>中配置通用内容，并设置<code>spring.profiles.active=dev</code>，以开发环境为默认配置</li><li><code>application-{profile}.properties</code>中配置各个环境不同的内容</li></ul><p>通过命令行方式去激活不同环境的配置,例如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.profiles</span><span class="selector-class">.active</span>=dev</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多人选择Spring Boot主要是考虑到它既能兼顾Spring的强大功能，还能实现快速开发的便捷。我们在Spring Boot使用过程中，最直观的感受就是没有了原来自己整合Spring应用时繁多的XML配置内容，替代它的是在pom.xml中引入模块化的Starter POMs，其中各个模块都有自己的默认配置，所以如果不是特殊应用场景，就只需要在application.properties中完成一些属性配置就能开启各模块的应用。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot系列" scheme="http://litxiaosa.cn/categories/SpringBoot%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringBoot" scheme="http://litxiaosa.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（一）之 快速入门</title>
    <link href="http://litxiaosa.cn/2017/12/01/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://litxiaosa.cn/2017/12/01/SpringBoot（一）之 快速入门/</id>
    <published>2017-12-01T01:54:26.000Z</published>
    <updated>2017-12-04T06:21:56.909Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本系列基于：IDEA、JDK8、SprigBoot1.5.9。通常我们推荐使用JDK8</strong> </p><h2 id="使用Intellij中的Spring-Initializr来快速构建Spring-Boot工程"><a href="#使用Intellij中的Spring-Initializr来快速构建Spring-Boot工程" class="headerlink" title="使用Intellij中的Spring Initializr来快速构建Spring Boot工程"></a>使用Intellij中的Spring Initializr来快速构建Spring Boot工程</h2><p><strong>初始化Spring Boot项目</strong></p><ul><li><p>点击Create New Project，我们可以看到如下图所示的创建功能窗口。其中Initial Service Url指向的地址就是Spring官方提供的Spring Initializr工具地址，所以这里创建的工程实际上也是基于它的Web工具来实现的。</p><a id="more"></a><p><img src="/2017/12/01/SpringBoot（一）之 快速入门/2.png" alt=""></p></li></ul><ul><li><p>点击Next，等待片刻后，我们可以看到如下图所示的工程信息窗口，在这里我们可以编辑我们想要创建的工程信息。其中，</p><blockquote><p>Group 一般是公司名字的反写，也可以自己随意<br>Artifact: 你这个项目叫什么<br>Type可以改变我们要构建的工程类型，比如：Maven、Gradle；<br>Language可以选择：Java、Groovy、Kotlin。</p></blockquote><p><img src="/2017/12/01/SpringBoot（一）之 快速入门/3.png" alt=""></p></li><li><p>点击Next，进入选择Spring Boot版本和依赖管理的窗口。在这里值的我们关注的是，它不仅包含了Spring Boot Starter POMs中的各个依赖，还包含了Spring Cloud的各种依赖。 我们还可以选择SpringBoot的版本。</p><p><img src="/2017/12/01/SpringBoot（一）之 快速入门/4.png" alt=""></p></li><li><p>这个我们勾选了web，你也可以根据自己的需求勾选。点击Next，进入最后关于工程物理存储的一些细节。最后，点击Finish就能完成工程的构建了。   </p><p><img src="/2017/12/01/SpringBoot（一）之 快速入门/5.png" alt=""></p></li></ul><p><strong>项目结构</strong></p><p><img src="/2017/12/01/SpringBoot（一）之 快速入门/6.png" alt=""></p><p>如你所见，项目里面基本没有代码，除了几个空目录外，还包含如下几样东西。</p><ul><li>pom.xml：Maven构建说明文件。</li><li>DemoApplication：一个带有main()方法的类，用于启动应用程序（关键）。</li><li>DemoApplicationTests：一个空的Junit测试类，它加载了一个使用Spring Boot字典配置功能的Spring应用程序上下文。</li><li>application.properties：一个空的properties文件，你可以根据需要添加配置属性。</li></ul><p><strong>应用入口类</strong></p><p>DemoApplication是一个很关键的启动类，程序的入口就是这里,为了演示简单，我们不再新建控制类，而是直接在这个入口类中编写，添加@RestController以及index方法，如下：</p><p><img src="/2017/12/01/SpringBoot（一）之 快速入门/7.png" alt=""></p><ul><li>@SpringBootApplication是Sprnig Boot项目的核心注解，主要目的是开启自动配置。后续讲解原理的时候再深入介绍。</li><li><p>main方法这是一个标准的Java应用的main的方法，主要作用是作为项目启动的入口。</p></li><li><p>@RestController注解等价于@Controller+@ResponseBody的结合，使用这个注解的类里面的方法都以json格式输出。</p></li></ul><p>启动这个最简单的Web项目，他有三种方法。</p><ol><li><p>DemoApplication的main方法启动，上边个标红的和下面那个标红的是一样的。</p><p> <img src="/2017/12/01/SpringBoot（一）之 快速入门/8.png" alt=""></p></li><li><p>使用命令 <code>mvn spring-boot:run</code>”在命令行启动该应用，IDEA中该命令在如下位置：</p><p> <img src="/2017/12/01/SpringBoot（一）之 快速入门/9.png" alt=""></p></li><li><p>运行<code>mvn package</code>进行打包时，会打包成一个可以直接运行的 JAR 文件，使用<code>java -jar</code>命令就可以直接运行。</p><p><img src="/2017/12/01/SpringBoot（一）之 快速入门/10.png" alt=""></p></li></ol><p>这里是SpringBoot的启动标志</p><p><img src="/2017/12/01/SpringBoot（一）之 快速入门/11.png" alt=""></p><p>打开浏览器访问<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>, 你就能看到页面显示Hello Spring Boot效果了，一个简单的Web的项目就是如此简单。</p><p><img src="/2017/12/01/SpringBoot（一）之 快速入门/12.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本系列基于：IDEA、JDK8、SprigBoot1.5.9。通常我们推荐使用JDK8&lt;/strong&gt; &lt;/p&gt;
&lt;h2 id=&quot;使用Intellij中的Spring-Initializr来快速构建Spring-Boot工程&quot;&gt;&lt;a href=&quot;#使用Intellij中的Spring-Initializr来快速构建Spring-Boot工程&quot; class=&quot;headerlink&quot; title=&quot;使用Intellij中的Spring Initializr来快速构建Spring Boot工程&quot;&gt;&lt;/a&gt;使用Intellij中的Spring Initializr来快速构建Spring Boot工程&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;初始化Spring Boot项目&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;点击Create New Project，我们可以看到如下图所示的创建功能窗口。其中Initial Service Url指向的地址就是Spring官方提供的Spring Initializr工具地址，所以这里创建的工程实际上也是基于它的Web工具来实现的。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="SpringBoot系列" scheme="http://litxiaosa.cn/categories/SpringBoot%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringBoot" scheme="http://litxiaosa.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>学习Git（五）之 搭建Git服务器</title>
    <link href="http://litxiaosa.cn/2017/11/29/%E5%AD%A6%E4%B9%A0Git%EF%BC%88%E4%BA%94%EF%BC%89%20%E4%B9%8B%20%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://litxiaosa.cn/2017/11/29/学习Git（五） 之 搭建Git服务器/</id>
    <published>2017-11-29T08:40:46.000Z</published>
    <updated>2017-12-04T03:06:22.665Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的学习中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。</p><p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</p><a id="more"></a><p>搭建Git服务器需要准备一台运行Linux的机器。我是在VMware虚拟机上装了一个CentOS 如果你装的是Ubuntu或者其他的，安装命令可能会不同。这个要注意一下。</p><p>假设你已经有sudo权限的用户账号，下面，正式开始安装。</p><p>第一步，安装git:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure><p>如果安装不上可能是网络没配好，找到这个下面这个文件</p><p><img src="/2017/11/29/学习Git（五） 之 搭建Git服务器/1.png" alt=""></p><p>看一下标红的是不是no,如果是,该为yes。再执行上边那个操作就可以了。</p><p><img src="/2017/11/29/学习Git（五） 之 搭建Git服务器/2.png" alt=""></p><p>第二步，创建证书：</p><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到 <code>/home/git/.ssh/authorized_keys</code> 文件里，一行一个。</p><p><code>git</code>和 <code>.ssh/keys</code>是自己手动创建的，我的创建在了root目录下。</p><p>创建命令是：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> git</span><br><span class="line"><span class="built_in">mkdir</span> .ssh</span><br></pre></td></tr></table></figure><p>然后给这个目录对应的权限：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 <span class="string">.ssh/</span></span><br></pre></td></tr></table></figure><p>再<code>cd .ssh</code> 创建 keys 文件：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">touch keys</span></span><br></pre></td></tr></table></figure><p>然后给这个文件对应的权限</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chmod</span> <span class="number">600</span> <span class="keyword">keys</span></span><br></pre></td></tr></table></figure><p>接着就是把所有的公钥导入了。</p><p>第三步，初始化Git仓库：</p><p>先选定一个目录作为Git仓库，假定是/root/lean.git，在/root目录下输入命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git init <span class="comment">--bare lean.git</span></span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（五） 之 搭建Git服务器/3.png" alt=""></p><p>第四步，克隆远程仓库：</p><p>现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git<span class="variable">@server</span><span class="symbol">:/root/lean</span>.git</span><br></pre></td></tr></table></figure><blockquote><p>@server: 对应你们git服务器的ip地址。 </p></blockquote><p>剩下的推送就简单了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前的学习中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。&lt;/p&gt;
&lt;p&gt;GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。&lt;/p&gt;
    
    </summary>
    
      <category term="学习Git" scheme="http://litxiaosa.cn/categories/%E5%AD%A6%E4%B9%A0Git/"/>
    
    
      <category term="Git" scheme="http://litxiaosa.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>学习Git（四）之 分支管理</title>
    <link href="http://litxiaosa.cn/2017/11/29/%E5%AD%A6%E4%B9%A0Git%EF%BC%88%E5%9B%9B%EF%BC%89%20%E4%B9%8B%20%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
    <id>http://litxiaosa.cn/2017/11/29/学习Git（四） 之 分支管理/</id>
    <published>2017-11-29T02:22:33.000Z</published>
    <updated>2017-12-04T03:14:52.371Z</updated>
    
    <content type="html"><![CDATA[<p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p><p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p><a id="more"></a><p><img src="/2017/11/29/学习Git（四） 之 分支管理/1.png" alt=""></p><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。</p><p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/2.png" alt=""></p><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长：</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/3.png" alt=""></p><p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/4.png" alt=""></p><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/5.png" alt=""></p><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/6.png" alt=""></p><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a><strong>创建与合并分支</strong></h3><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支, 当然了，要在你本地的仓库目录下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -<span class="selector-tag">b</span> dev</span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（四） 之 分支管理/7.png" alt=""></p><p><code>git checkout</code> 命令加上-b参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="built_in">dev</span></span><br><span class="line">git checkout <span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p>然后，用<code>git branch</code>命令查看当前分支：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git branch</span></span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（四） 之 分支管理/8.png" alt=""></p><p><code>git branch</code> 命令会列出所有分支，当前分支前面会标一个*号。</p><p>然后，我们就可以在<code>dev</code>分支上正常提交，比如对<code>demo.txt</code>做个修改，加上 <code>haha</code></p><p>然后提交</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"branch test"</span></span></span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（四） 之 分支管理/9.png" alt=""></p><p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br></pre></td></tr></table></figure><p>切换回<code>master</code>分支后，再查看一个<code>demo.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/10.png" alt=""></p><p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">merge</span> dev</span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（四） 之 分支管理/11.png" alt=""></p><p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-D dev</span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（四） 之 分支管理/12.png" alt=""></p><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/13.png" alt=""></p><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a><strong>解决冲突</strong></h3><p>人生不如意之事十之八九，合并分支往往也不是一帆风顺的</p><p>准备新的<code>feature1</code>分支，继续我们的新分支开发：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -<span class="selector-tag">b</span> feature1</span><br></pre></td></tr></table></figure><p>再次修改<code>demo.txt</code>, 增加： </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a <span class="keyword">new</span> branch <span class="keyword">is</span> quick <span class="keyword">AND</span> simple.</span><br></pre></td></tr></table></figure><p>在<code>feature1</code>分支上提交：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"AND simple"</span></span></span><br></pre></td></tr></table></figure><p>切换到<code>master</code>分支：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br></pre></td></tr></table></figure><p>Git还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/14.png" alt=""></p><p>在<code>master</code>分支上把<code>demo.txt</code>文件的最后一行替换为:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a <span class="keyword">new</span> branch <span class="keyword">is</span> quick &amp; simple</span><br></pre></td></tr></table></figure><p>提交</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt </span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"&amp; simple"</span></span></span><br></pre></td></tr></table></figure><p>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/15.png" alt=""></p><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">merge</span> feature1</span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（四） 之 分支管理/16.png" alt=""></p><p>果然冲突了！Git告诉我们，<code>demo.txt</code>文件存在冲突，必须手动解决冲突后再提交。我们可以直接查看<code>demo.txt</code>的内容：</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/17.png" alt=""></p><p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存：</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/18.png" alt=""></p><p>再提交：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"conflict fixed"</span></span></span><br></pre></td></tr></table></figure><p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/19.png" alt=""></p><p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/20.png" alt="">    </p><p>最后，删除<code>feature1</code>分支：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-D feature1</span><br></pre></td></tr></table></figure><p>工作完成。</p><h3 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a><strong>分支策略</strong></h3><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在``master分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/21.png" alt=""></p><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a><strong>多人协作</strong></h3><p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p><p>要查看远程库的信息，用<code>git remote</code>：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git remote</span></span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（四） 之 分支管理/22.png" alt=""></p><p>或者，用<code>git remote -v</code>显示更详细的信息</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git remote -v</span></span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（四） 之 分支管理/23.png" alt=""></p><p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p><h4 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a><strong>推送分支</strong></h4><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><p>如果要推送其他分支，比如dev，就改成：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> dev</span><br></pre></td></tr></table></figure><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li></ul><p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p><h4 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a><strong>抓取分支</strong></h4><p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p><p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/Litxiaosa/learnGit.git</span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（四） 之 分支管理/24.png" alt=""></p><p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支。不信可以用<code>git branch</code>命令看看：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git branch</span></span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（四） 之 分支管理/25.png" alt=""></p><p>现在，你的小伙伴要在dev分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">dev</span> origin/<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（四） 之 分支管理/26.png" alt=""></p><p>现在，他就可以在<code>dev</code>上继续修改，(我们在里面添加了<code>hello world</code>)然后，时不时地把<code>dev</code>分支push到远程：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"add hello world"</span></span></span><br><span class="line"><span class="bash">git push origin dev</span></span><br></pre></td></tr></table></figure><p>可能让你输入你的GitHub的用户名和密码 </p><p><img src="/2017/11/29/学习Git（四） 之 分支管理/27.png" alt=""></p><p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送,我们添加了一句：<code>hello git</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> demo.txt</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"add hello git"</span></span></span><br><span class="line"><span class="bash">git push origin dev</span></span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（四） 之 分支管理/28.png" alt=""></p><p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git pull origin dev</span></span><br></pre></td></tr></table></figure><p><img src="/2017/11/29/学习Git（四） 之 分支管理/29.png" alt=""></p><p><code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push。</p><p>因此，多人协作的工作模式通常是这样：</p><p>首先，可以试图用 <code>git push origin branch-name</code> 推送自己的修改；</p><p>如果推送失败，则因为远程分支比你的本地更新，需要先用 <code>git pull</code> 试图合并；</p><p>如果合并有冲突，则解决冲突，并在本地提交；</p><p>没有冲突或者解决掉冲突后，再用 <code>git push origin branch-name</code> 推送就能成功！</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h2><blockquote><ul><li>git branch           查看当前分支</li><li>git branch -v        查看每一个分支的最后一次提交</li><li>git branch -a        查看本地和远程分支的情况</li><li>git branch –merged  查看已经与当前分支合并的分支</li><li>git branch –no-merged 查看已经与当前分支未合并的分支</li><li>git branch -r        查看远程分支</li><li>git branch dev       创建分支 dev</li><li>git checkout dev     切换到分支dev</li><li>git checkout -b dev  创建并切换分支dev</li><li>git merge dev        名称为dev的分支与当前分支合并</li><li>git branch -d dev    删除分支dev</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。&lt;/p&gt;
&lt;p&gt;如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！&lt;/p&gt;
    
    </summary>
    
      <category term="学习Git" scheme="http://litxiaosa.cn/categories/%E5%AD%A6%E4%B9%A0Git/"/>
    
    
      <category term="Git" scheme="http://litxiaosa.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>学习Git（三） 之 远程仓库</title>
    <link href="http://litxiaosa.cn/2017/11/28/%E5%AD%A6%E4%B9%A0Git%EF%BC%88%E4%B8%89%EF%BC%89%20%E4%B9%8B%20%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <id>http://litxiaosa.cn/2017/11/28/学习Git（三） 之 远程仓库/</id>
    <published>2017-11-28T09:58:43.000Z</published>
    <updated>2017-12-04T03:43:30.216Z</updated>
    
    <content type="html"><![CDATA[<p>Git本地操作的熟练了后，就可以尝试连接远程仓库了，完全可以自己搭建一台运行Git的服务器，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交，不过现阶段，我们不打算这么搞。目前国内外比较出名的提供Git仓库远程托管的有国外的GitHub，国内的开源中国以及coding。这里我以GitHub为例子介绍如何操作远程仓库。</p><a id="more"></a><p>现在的情景是，你已经在本地创建了一个Git仓库，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。</p><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a><strong>添加远程仓库</strong></h2><ol><li><p>首先，登陆GitHub，然后，在右上角找到“<code>new repository</code>”按钮，创建一个新的仓库：</p><p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/1.png" alt=""></p></li><li><p>在<code>Repository name</code>填入<code>learnGit</code>，其他保持默认设置，点击“<code>Create repository</code>”按钮，就成功地创建了一个新的Git仓库：</p><p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/2.png" alt=""></p></li><li><p>目前，在GitHub上的这个<code>learnGit</code>仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/3.png" alt=""></p></li><li><p>现在，我们根据GitHub的提示，在本地的<code>GitRepository</code>仓库下运行命令：</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span><span class="bash"> origin git@github.com:Litxiaosa/learnGit.git</span></span><br></pre></td></tr></table></figure><p> <strong>请千万注意，把上面的<code>Litxiaosa</code>替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中</strong></p></li><li><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p></li><li><p>下一步，就可以把本地库的所有内容推送到远程库上</p> <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/4.png" alt=""></p><p> 可以看到，你本地的代码就推送到远程仓库了推送成功后</p><p> 由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</p><p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/5.png" alt=""></p></li><li><p>从现在起，只要本地作了提交，就可以通过命令</p> <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><p> 把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p></li></ol><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a><strong>从远程库克隆</strong></h2><p>我们讲了先有本地库，后有远程库的时候，如何关联远程库。现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p><ol><li><p>首先，登陆GitHub，创建一个新的仓库，名字叫gitskills：</p><p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/6.png" alt=""></p><p> 我们勾选<code>Initialize this repository with a README</code>，这样GitHub会自动为我们创建一个<code>README.md</code>文件。创建完毕后，可以看到README.md文件：</p><p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/7.png" alt=""></p></li><li><p>现在，远程库已经准备好了，下一步是用命令<code>git clone</code>克隆一个本地库</p>  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="keyword">clone</span> <span class="title">https</span>://github.com/Litxiaosa/gitskills.git</span><br></pre></td></tr></table></figure><p> <img src="/2017/11/28/学习Git（三） 之 远程仓库/8.png" alt=""></p><p><strong>注意把Git库的地址换成你自己的</strong>，然后进入<code>gitskills</code>目录看看，已经有<br><code>README.md</code>文件了。</p><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p></li></ol><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h1><ol><li><p>要关联一个远程库，使用命令 <code>git remote add origin git@server-name:path/repo-name.git</code></p></li><li><p>关联后，使用命令 <code>git push -u origin master</code> 第一次推送<code>master</code>分支的所有内容</p></li><li><p>此后，每次本地提交后，只要有必要，就可以使用命令 <code>git push origin master</code> 推送最新修改</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git本地操作的熟练了后，就可以尝试连接远程仓库了，完全可以自己搭建一台运行Git的服务器，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交，不过现阶段，我们不打算这么搞。目前国内外比较出名的提供Git仓库远程托管的有国外的GitHub，国内的开源中国以及coding。这里我以GitHub为例子介绍如何操作远程仓库。&lt;/p&gt;
    
    </summary>
    
      <category term="学习Git" scheme="http://litxiaosa.cn/categories/%E5%AD%A6%E4%B9%A0Git/"/>
    
    
      <category term="Git" scheme="http://litxiaosa.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>学习Git（二）之 暂存区</title>
    <link href="http://litxiaosa.cn/2017/11/28/%E5%AD%A6%E4%B9%A0Git%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%20%E6%9A%82%E5%AD%98%E5%8C%BA/"/>
    <id>http://litxiaosa.cn/2017/11/28/学习Git（二）之 暂存区/</id>
    <published>2017-11-28T08:55:30.000Z</published>
    <updated>2017-12-04T03:49:30.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a><strong>工作区和暂存区</strong></h2><p>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。</p><p>先来看名词解释。</p><a id="more"></a><h3 id="工作区（Working-Directory）"><a href="#工作区（Working-Directory）" class="headerlink" title="工作区（Working Directory）"></a><strong>工作区（Working Directory）</strong></h3><p>就是你在电脑里能看到的目录，比如我的GitRepository文件夹就是一个工作区：</p><p><img src="/2017/11/28/学习Git（二）之 暂存区/1.png" alt=""></p><h3 id="版本库（Repository）"><a href="#版本库（Repository）" class="headerlink" title="版本库（Repository）"></a><strong>版本库（Repository）</strong></h3><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为<code>stage</code>（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p><img src="/2017/11/28/学习Git（二）之 暂存区/1.jpeg" alt=""> </p><p>前面说了我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，<code>Git</code>自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往master分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a><strong>撤销操作</strong></h2><ol><li><p>如果你文件只是在工作区修改了，但是还没提交到暂存区的时候，你可以用下面的命令来撤销。</p> <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- <span class="string">[file]</span></span><br></pre></td></tr></table></figure><p> 比如，你有一个文件叫<code>demo.txt</code>, 里面的内容为：<code>Today is Tuesday</code>。 并且这句话已经提交到暂存区。 此时，你又在工作区修改了<code>demo.txt</code> 这个文件， 内容增加了一句：<code>I don&#39;t know what to say</code> </p><p> 然后执行<code>git checkout -- demo.txt</code>命令,你会发现<code>demo.txt</code>内容又变成<code>Today is Tuesday</code>了。</p> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">-- demo.txt</span></span><br></pre></td></tr></table></figure><p> <code>git checkout -- file</code>命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令。</p></li><li><p>假如你文件在工作区修改了,并且也执行 <code>git add</code> 命令提交给暂存区了，但是，还没有执行<code>commit</code>操作。那么执行上面的 <code>git checkout -- [file]</code> 已经无效了，因为工作区跟暂存区已经一样了，再怎么覆盖内容也一样，这时候就应该使用 <code>git reset HEAD</code> 命令来撤销。</p> <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">reset</span> HEAD <span class="built_in">demo</span>.txt</span><br></pre></td></tr></table></figure><p> 还记得如何丢弃工作区的修改吗？</p> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">-- demo.txt</span></span><br></pre></td></tr></table></figure><p> 回头看看添加的内容是不是又回滚了？</p></li><li><p>现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。</p></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h2><p> 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code></p><p> 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p><p> 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工作区和暂存区&quot;&gt;&lt;a href=&quot;#工作区和暂存区&quot; class=&quot;headerlink&quot; title=&quot;工作区和暂存区&quot;&gt;&lt;/a&gt;&lt;strong&gt;工作区和暂存区&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。&lt;/p&gt;
&lt;p&gt;先来看名词解释。&lt;/p&gt;
    
    </summary>
    
      <category term="学习Git" scheme="http://litxiaosa.cn/categories/%E5%AD%A6%E4%B9%A0Git/"/>
    
    
      <category term="Git" scheme="http://litxiaosa.cn/tags/Git/"/>
    
  </entry>
  
</feed>
